%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: logo.pdf
%%Creator: Adobe Acrobat 9.1.2
%%For: ALAN
%%CreationDate: 2019/3/11, 16:16:40
%%BoundingBox: 0 0 165 157
%%HiResBoundingBox: 0 0 164.8250 156.9950
%%CropBox: 0 0 164.8250 156.9950
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1284 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2018-03-14T11:00:33+08:00"
   xmp:CreateDate="2018-03-14T10:58:16+08:00"
   xmp:MetadataDate="2018-03-14T11:00:33+08:00"
   xmp:CreatorTool="PDFLaTeX with uestcthesis class"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:662effc2-29d0-8b42-9d19-029882b41d2b"
   xmpMM:InstanceID="uuid:cc32b709-d1cd-d34b-bfb1-0e85c8ac6c46"
   pdf:Producer="pdfTeX-1.40.14">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">基于东拼西凑的电子科技大学毕业论文LaTeX模板生成样例</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">电子科技大学博士学位论文</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>时富军</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -156.995 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 156.995 li
164.825 156.995 li
164.825 0 li
cp
clp
[1 0 0 1 -215.243 0 ]ct
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966f7a512eb00000de00000087668656164e34ba941000003f40000
003668686561020000eb0000042c00000024686d74780d00012500000450
000000386c6f63610c770a52000004880000001e6d61787001ca3f570000
04a8000000206e616d65fff6e5a1000004c8000008627072657005dc4fcc
00000d2c000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
44ee46fb5f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe0000010000010000000000000000000000000000000e010000000000
00000100000c0100000c01000029010000290100002b0100002801000012
010000100100001d010000150100000b01000009000000000000003b0081
00b300eb012d017b01cd022f02a8032603c2043b000000010000000e016c
00310000000000010000002f0029000001613dbb000000000000001e016e
0001000000000000002700000001000000000001000d0027000100000000
0002000700340001000000000003000d003b0001000000000004000d0048
0001000000000005000c00550001000000000006000d0061000100000000
0007002c006e0003000104090000004e009a0003000104090001001a00e8
0003000104090002000e01020003000104090003001a0110000300010409
0004001a012a0003000104090005001801440003000104090006001a015c
000300010409000700580176000300010409000d02aa01ce000300010409
000e005204780003000108040000008204ca00030001080400010012054c
00030001080400020004055e000300010804000300120562000300010804
00040012057400030001080400050018058600030001080400060012059e
0003000108040007005805b00003000108040008003e0608000300010804
0009003e0646000300010804000b00380684000300010804000c003806bc
a920436f70797269676874205a484f4e47594920456c656374726f6e6963
20436f2e2032303031475a465447532b53696d53756e526567756c617247
5a465447532b53696d53756e475a465447532b53696d53756e5665727369
6f6e20352e3034475a465447532b53696d53756e54726164656d61726b20
6f66205a484f4e47594920456c656374726f6e696320436f2e2c20426569
6a696e6700a900200043006f00700079007200690067006800740020005a
0048004f004e00470059004900200045006c0065006300740072006f006e
0069006300200043006f002e002000320030003000310047005a00460054
00470053002b00530069006d00530075006e0052006500670075006c0061
00720047005a0046005400470053002b00530069006d00530075006e0047
005a0046005400470053002b00530069006d00530075006e005600650072
00730069006f006e00200035002e003000340047005a0046005400470053
002b00530069006d00530075006e00540072006100640065006d00610072
006b0020006f00660020005a0048004f004e00470059004900200045006c
0065006300740072006f006e0069006300200043006f002e002c00200042
00650069006a0069006e00670059006f00750020006d0061007900200075
007300650020007400680069007300200066006f006e007400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
00650020006c006900630065006e007300650020007400650072006d0073
00200066006f00720020007400680065002000700072006f006400750063
007400200069006e00200077006800690063006800200074006800690073
00200066006f006e007400200069007300200069006e0063006c00750064
00650064002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e0074007300a90020
0043006f00700079007200690067006800740020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e00200032003000300031000d000a5b574f536570636e75315317
4eac4e2d66134e2d680775355b504fe1606f6280672f67099650516c53f8
63d04f9b30020047005a0046005400470053002b5b8b4f535e3889c40047
005a0046005400470053002b5b8b4f530047005a0046005400470053002b
5b8b4f5300560065007200730069006f006e00200035002e003000340047
005a0046005400470053002b5b8b4f5300540072006100640065006d0061
0072006b0020006f00660020005a0048004f004e00470059004900200045
006c0065006300740072006f006e0069006300200043006f002e002c0020
004200650069006a0069006e0067004200650069006a0069006e00670020
005a0068006f006e00670059006900200045006c0065006300740072006f
006e00690063007300200043006f002e004200650069006a0069006e0067
0020005a0068006f006e00670059006900200045006c0065006300740072
006f006e00690063007300200043006f002e0068007400740070003a002f
002f007700770077002e007a0068006f006e006700790069006300740073
002e0063006f006d002e0063006e0068007400740070003a002f002f0077
00770077002e007a0068006f006e006700790069006300740073002e0063
006f006d002e0063006e0000411a01110110003200280110010e00280028
010f010e00280028010c010d00460028010d010e00280028010e010d0018
0028010c010db346285001b801ff858d001db0324b5258b0801d59b80106
4568b801062344b801044568b801042344b801054568b801044560b80105
2344b801024568b801044560b801022344b801034568b801024560b80103
2344b801004568b801044560b801002344b801014568b801004560b80101
2344012b2b2b2b2b2b2b000000>
[2167 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 602 7 <00050028ffee00f100d10027002b002f0033003700003734271707153337
1707141707352315143b013e0137331416170e012b01223d012315073634
271707153335331533350715333533153335730117083d0a0e09010f3e0c
45090201050707040c0b4e153c0f010110013c0e3e883c0e3e9c1d180b07
230a0e075014070c2d0b01131d191005080714300e0722481e09062b2b2b
2b312d2d2d2d>PBAAAA+SimSun AddT42Char 

1 0 0 <> PBAAAA+SimSun AddT42Char 
PBAAAA+SimSun /CharStrings get begin
/g7 7 def
end
PBAAAA+SimSun /Encoding get
dup 53 /g7 put
pop
end
%ADOEndSubsetFont
/KEVNYP+SimSun /PBAAAA+SimSun findfont ct_VMDictPut
/KEVNYP+SimSun*1 
[53{/.notdef}rp /g7 202{/.notdef}rp]
KEVNYP+SimSun nf
KEVNYP+SimSun*1 [21.997 0 0 -21.997 0 0 ]msf
204.148 -177.523 mo
(5)sh
%ADOBeginSubsetFont: HIBBAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c796610ee9f2300000e1c0000118268656164e34ba941000003f40000
003668686561020000f50000042c00000024686d74781700012600000450
000000606c6f636131262ce8000004b0000000326d61787001d43f570000
04e4000000206e616d65fdf7bbe400000504000008627072657005dc4fcc
00000d68000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
3640539f5f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000018010000000000
00000100000b0100000b010000090100000f0100000a010000120100000f
0100000b0100000c0100000a0100000c01000010010000100100000c0100
000d010000130100000b010000140100000d0100000e0100000901000011
0000000000000035008e00ee015a01a701f7025402ab0309036b03ca0426
048b05140584061006a9071b07d7080b086808c10000000100000018016c
00310000000000010000002f0029000001613dbb000000000000001e016e
0001000000000000002700000001000000000001000d0027000100000000
0002000700340001000000000003000d003b0001000000000004000d0048
0001000000000005000c00550001000000000006000d0061000100000000
0007002c006e0003000104090000004e009a0003000104090001001a00e8
0003000104090002000e01020003000104090003001a0110000300010409
0004001a012a0003000104090005001801440003000104090006001a015c
000300010409000700580176000300010409000d02aa01ce000300010409
000e005204780003000108040000008204ca00030001080400010012054c
00030001080400020004055e000300010804000300120562000300010804
00040012057400030001080400050018058600030001080400060012059e
0003000108040007005805b00003000108040008003e0608000300010804
0009003e0646000300010804000b00380684000300010804000c003806bc
a920436f70797269676874205a484f4e47594920456c656374726f6e6963
20436f2e2032303031464a555a52462b53696d53756e526567756c617246
4a555a52462b53696d53756e464a555a52462b53696d53756e5665727369
6f6e20352e3034464a555a52462b53696d53756e54726164656d61726b20
6f66205a484f4e47594920456c656374726f6e696320436f2e2c20426569
6a696e6700a900200043006f00700079007200690067006800740020005a
0048004f004e00470059004900200045006c0065006300740072006f006e
0069006300200043006f002e002000320030003000310046004a0055005a
00520046002b00530069006d00530075006e0052006500670075006c0061
00720046004a0055005a00520046002b00530069006d00530075006e0046
004a0055005a00520046002b00530069006d00530075006e005600650072
00730069006f006e00200035002e003000340046004a0055005a00520046
002b00530069006d00530075006e00540072006100640065006d00610072
006b0020006f00660020005a0048004f004e00470059004900200045006c
0065006300740072006f006e0069006300200043006f002e002c00200042
00650069006a0069006e00670059006f00750020006d0061007900200075
007300650020007400680069007300200066006f006e007400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
00650020006c006900630065006e007300650020007400650072006d0073
00200066006f00720020007400680065002000700072006f006400750063
007400200069006e00200077006800690063006800200074006800690073
00200066006f006e007400200069007300200069006e0063006c00750064
00650064002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e0074007300a90020
0043006f00700079007200690067006800740020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e00200032003000300031000d000a5b574f536570636e75315317
4eac4e2d66134e2d680775355b504fe1606f6280672f67099650516c53f8
63d04f9b30020046004a0055005a00520046002b5b8b4f535e3889c40046
004a0055005a00520046002b5b8b4f530046004a0055005a00520046002b
5b8b4f5300560065007200730069006f006e00200035002e003000340046
004a0055005a00520046002b5b8b4f5300540072006100640065006d0061
0072006b0020006f00660020005a0048004f004e00470059004900200045
006c0065006300740072006f006e0069006300200043006f002e002c0020
004200650069006a0069006e0067004200650069006a0069006e00670020
005a0068006f006e00670059006900200045006c0065006300740072006f
006e00690063007300200043006f002e004200650069006a0069006e0067
0020005a0068006f006e00670059006900200045006c0065006300740072
006f006e00690063007300200043006f002e0068007400740070003a002f
002f007700770077002e007a0068006f006e006700790069006300740073
002e0063006f006d002e0063006e0068007400740070003a002f002f0077
00770077002e007a0068006f006e006700790069006300740073002e0063
006f006d002e0063006e0000411a01110110003200280110010e00280028
010f010e00280028010c010d00460028010d010e00280028010e010d0018
0028010c010db346285001b801ff858d001db0324b5258b0801d59b80106
4568b801062344b801044568b801042344b801054568b801044560b80105
2344b801024568b801044560b801022344b801034568b801024560b80103
2344b801004568b801044560b801002344b801014568b801004560b80101
2344012b2b2b2b2b2b2b000000>
[4483 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 0 2 <0001000bffe700f400cb0023000037333717220607170715333717231514
07342735163227352322072733342717372322072b930d130c2522090b45
10166b1a211b12014e0d0b096f010e37720d0bbf0c161518060613101660
13090f0905030e5403091615092e0300>HIBBAA+SimSun AddT42Char 
1 476 5 <0004000fffe800f200d00005000b002200460000371e01062627371e0106
262717273723160e01263637331733363717070607333717060716363d01
232207273334271737232207273337172606071707153337172315140736
273720040f0810381d0210060c610310ab0202100a10040501711308170a
1111330a12118e19104c0d0b096d010b23530d0b09730b11081b18080741
101667170121c9151510201807161510231662021c0d110505161a0c251d
0f0417180c14028104010a270309090e061d03090a14010e0f0504051016
310f090b0b00>HIBBAA+SimSun AddT42Char 

1 0 0 <> HIBBAA+SimSun AddT42Char 
HIBBAA+SimSun /CharStrings get begin
/g2 2 def
/g5 5 def
end
HIBBAA+SimSun /Encoding get
dup 80 /g2 put
dup 102 /g5 put
pop
end
%ADOEndSubsetFont
/KEVNYQ+SimSun /HIBBAA+SimSun findfont ct_VMDictPut
/KEVNYQ+SimSun*1 
[80{/.notdef}rp /g2 21{/.notdef}rp /g5 153{/.notdef}rp]
KEVNYQ+SimSun nf
KEVNYQ+SimSun*1 [21.997 0 0 -21.997 0 0 ]msf
237.145 -177.523 mo
(P)sh
%ADOBeginSubsetFont: QJJAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /QJJAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c79666bc6543000000dd4000008a268656164e34ba941000003f40000
003668686561020000e90000042c00000024686d74780b00006d00000450
000000306c6f63610c1b09c1000004800000001a6d61787001c83f570000
049c000000206e616d65dc0bd81e000004bc000008627072657005dc4fcc
00000d20000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
9f85ecbb5f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe0000010000010000000000000000000000000000000c010000000000
00000100000b0100000c0100000b0100000e0100000b0100000a0100000a
0100000a010000090100000b000000000000004000940108019c01f3025a
02c3034003c30451000000010000000c016c00310000000000010000002f
0029000001613dbb000000000000001e016e000100000000000000270000
0001000000000001000d0027000100000000000200070034000100000000
0003000d003b0001000000000004000d00480001000000000005000c0055
0001000000000006000d00610001000000000007002c006e000300010409
0000004e009a0003000104090001001a00e80003000104090002000e0102
0003000104090003001a01100003000104090004001a012a000300010409
0005001801440003000104090006001a015c000300010409000700580176
000300010409000d02aa01ce000300010409000e00520478000300010804
0000008204ca00030001080400010012054c00030001080400020004055e
000300010804000300120562000300010804000400120574000300010804
00050018058600030001080400060012059e0003000108040007005805b0
0003000108040008003e06080003000108040009003e0646000300010804
000b00380684000300010804000c003806bca920436f7079726967687420
5a484f4e47594920456c656374726f6e696320436f2e2032303031594c4c
4754512b53696d53756e526567756c6172594c4c4754512b53696d53756e
594c4c4754512b53696d53756e56657273696f6e20352e3034594c4c4754
512b53696d53756e54726164656d61726b206f66205a484f4e4759492045
6c656374726f6e696320436f2e2c204265696a696e6700a900200043006f
00700079007200690067006800740020005a0048004f004e004700590049
00200045006c0065006300740072006f006e0069006300200043006f002e
002000320030003000310059004c004c004700540051002b00530069006d
00530075006e0052006500670075006c006100720059004c004c00470054
0051002b00530069006d00530075006e0059004c004c004700540051002b
00530069006d00530075006e00560065007200730069006f006e00200035
002e003000340059004c004c004700540051002b00530069006d00530075
006e00540072006100640065006d00610072006b0020006f00660020005a
0048004f004e00470059004900200045006c0065006300740072006f006e
0069006300200043006f002e002c0020004200650069006a0069006e0067
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e007400200074006f00200064006900730070006c
0061007900200061006e00640020007000720069006e007400200063006f
006e00740065006e00740020006100730020007000650072006d00690074
00740065006400200062007900200074006800650020006c006900630065
006e007300650020007400650072006d007300200066006f007200200074
00680065002000700072006f006400750063007400200069006e00200077
00680069006300680020007400680069007300200066006f006e00740020
0069007300200069006e0063006c0075006400650064002e00200059006f
00750020006d006100790020006f006e006c007900200028006900290020
0065006d0062006500640020007400680069007300200066006f006e0074
00200069006e00200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
006500200065006d00620065006400640069006e00670020007200650073
007400720069006300740069006f006e007300200069006e0063006c0075
00640065006400200069006e0020007400680069007300200066006f006e
0074003b00200061006e006400200028006900690029002000740065006d
0070006f0072006100720069006c007900200064006f0077006e006c006f
006100640020007400680069007300200066006f006e007400200074006f
002000610020007000720069006e0074006500720020006f00720020006f
00740068006500720020006f007500740070007500740020006400650076
00690063006500200074006f002000680065006c00700020007000720069
006e007400200063006f006e00740065006e0074002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f0066006f006e0074007300a900200043006f0070007900720069
0067006800740020005a0048004f004e00470059004900200045006c0065
006300740072006f006e0069006300200043006f002e0020003200300030
0031000d000a5b574f536570636e753153174eac4e2d66134e2d68077535
5b504fe1606f6280672f67099650516c53f863d04f9b30020059004c004c
004700540051002b5b8b4f535e3889c40059004c004c004700540051002b
5b8b4f530059004c004c004700540051002b5b8b4f530056006500720073
0069006f006e00200035002e003000340059004c004c004700540051002b
5b8b4f5300540072006100640065006d00610072006b0020006f00660020
005a0048004f004e00470059004900200045006c0065006300740072006f
006e0069006300200043006f002e002c0020004200650069006a0069006e
0067004200650069006a0069006e00670020005a0068006f006e00670059
006900200045006c0065006300740072006f006e00690063007300200043
006f002e004200650069006a0069006e00670020005a0068006f006e0067
0059006900200045006c0065006300740072006f006e0069006300730020
0043006f002e0068007400740070003a002f002f007700770077002e007a
0068006f006e006700790069006300740073002e0063006f006d002e0063
006e0068007400740070003a002f002f007700770077002e007a0068006f
006e006700790069006300740073002e0063006f006d002e0063006e0000
411a01110110003200280110010e00280028010f010e00280028010c010d
00460028010d010e00280028010e010d00180028010c010db346285001b8
01ff858d001db0324b5258b0801d59b801064568b801062344b801044568
b801042344b801054568b801044560b801052344b801024568b801044560
b801022344b801034568b801024560b801032344b801004568b801044560
b801002344b801014568b801004560b801012344012b2b2b2b2b2b2b0000
00>
[2211 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1204 8 <0004000affe500f700d20006000c001e00430000371e010e012627171e01
0626271734271707153f01170714170736350f012f011417073635060727
3e01372322072733350607353e01371706071533371723151e0106268712
0f020809100111100d090d3c01180a0c0a142a010f0147090a16010f0115
2103161d05150d0b0937200f0f34120d0f17120c112f180e0a0daf080b0e
0a1711390910161c1030731f0b077d030e0f08460b0722330e0508325d16
073043261c03193513030931040104020c0d120105330c12160910161d00
>QJJAAA+SimSun AddT42Char 

1 0 0 <> QJJAAA+SimSun AddT42Char 
QJJAAA+SimSun /CharStrings get begin
/g8 8 def
end
QJJAAA+SimSun /Encoding get
dup 209 /g8 put
pop
end
%ADOEndSubsetFont
/KEVNYR+SimSun /QJJAAA+SimSun findfont ct_VMDictPut
/KEVNYR+SimSun*1 
[209{/.notdef}rp /g8 46{/.notdef}rp]
KEVNYR+SimSun nf
KEVNYR+SimSun*1 [21.997 0 0 -21.997 0 0 ]msf
270.141 -177.523 mo
(\321)sh
%ADOBeginSubsetFont: GFNBAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /GFNBAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966f27d756d00000e58000019c668656164e34ba941000003f40000
003668686561020000ff0000042c00000024686d74782100016300000450
000000886c6f63616944626d000004d8000000466d61787001de3f570000
0520000000206e616d65c05b94ac00000540000008627072657005dc4fcc
00000da4000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
4fe7a6135f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000022010000000000
00000100000c0100000c0100000d010000090100000b0100000a0100000d
0100000a01000009010000120100000e0100000a0100000a0100000d0100
000a010000090100000a0100000a0100000b0100000a0100000d0100000c
0100000b01000008010000090100000c0100000d0100000b0100000a0100
000c0100000a0100000a000000000000006800dc014801f10220027202e1
031b0349039503de045704a704f8056a05db065206c9073a079d081f0875
08cf094b09af0a1a0a790b090b790bff0c690ce30000000100000022016c
00310000000000010000002f0029000001613dbb000000000000001e016e
0001000000000000002700000001000000000001000d0027000100000000
0002000700340001000000000003000d003b0001000000000004000d0048
0001000000000005000c00550001000000000006000d0061000100000000
0007002c006e0003000104090000004e009a0003000104090001001a00e8
0003000104090002000e01020003000104090003001a0110000300010409
0004001a012a0003000104090005001801440003000104090006001a015c
000300010409000700580176000300010409000d02aa01ce000300010409
000e005204780003000108040000008204ca00030001080400010012054c
00030001080400020004055e000300010804000300120562000300010804
00040012057400030001080400050018058600030001080400060012059e
0003000108040007005805b00003000108040008003e0608000300010804
0009003e0646000300010804000b00380684000300010804000c003806bc
a920436f70797269676874205a484f4e47594920456c656374726f6e6963
20436f2e2032303031564256414c422b53696d53756e526567756c617256
4256414c422b53696d53756e564256414c422b53696d53756e5665727369
6f6e20352e3034564256414c422b53696d53756e54726164656d61726b20
6f66205a484f4e47594920456c656374726f6e696320436f2e2c20426569
6a696e6700a900200043006f00700079007200690067006800740020005a
0048004f004e00470059004900200045006c0065006300740072006f006e
0069006300200043006f002e002000320030003000310056004200560041
004c0042002b00530069006d00530075006e0052006500670075006c0061
00720056004200560041004c0042002b00530069006d00530075006e0056
004200560041004c0042002b00530069006d00530075006e005600650072
00730069006f006e00200035002e003000340056004200560041004c0042
002b00530069006d00530075006e00540072006100640065006d00610072
006b0020006f00660020005a0048004f004e00470059004900200045006c
0065006300740072006f006e0069006300200043006f002e002c00200042
00650069006a0069006e00670059006f00750020006d0061007900200075
007300650020007400680069007300200066006f006e007400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
00650020006c006900630065006e007300650020007400650072006d0073
00200066006f00720020007400680065002000700072006f006400750063
007400200069006e00200077006800690063006800200074006800690073
00200066006f006e007400200069007300200069006e0063006c00750064
00650064002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e0074007300a90020
0043006f00700079007200690067006800740020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e00200032003000300031000d000a5b574f536570636e75315317
4eac4e2d66134e2d680775355b504fe1606f6280672f67099650516c53f8
63d04f9b30020056004200560041004c0042002b5b8b4f535e3889c40056
004200560041004c0042002b5b8b4f530056004200560041004c0042002b
5b8b4f5300560065007200730069006f006e00200035002e003000340056
004200560041004c0042002b5b8b4f5300540072006100640065006d0061
0072006b0020006f00660020005a0048004f004e00470059004900200045
006c0065006300740072006f006e0069006300200043006f002e002c0020
004200650069006a0069006e0067004200650069006a0069006e00670020
005a0068006f006e00670059006900200045006c0065006300740072006f
006e00690063007300200043006f002e004200650069006a0069006e0067
0020005a0068006f006e00670059006900200045006c0065006300740072
006f006e00690063007300200043006f002e0068007400740070003a002f
002f007700770077002e007a0068006f006e006700790069006300740073
002e0063006f006d002e0063006e0068007400740070003a002f002f0077
00770077002e007a0068006f006e006700790069006300740073002e0063
006f006d002e0063006e0000411a01110110003200280110010e00280028
010f010e00280028010c010d00460028010d010e00280028010e010d0018
0028010c010db346285001b801ff858d001db0324b5258b0801d59b80106
4568b801062344b801044568b801042344b801054568b801044560b80105
2344b801024568b801044560b801022344b801034568b801024560b80103
2344b801004568b801044560b801002344b801014568b801004560b80101
2344012b2b2b2b2b2b2b000000>
[6599 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 3474 20 <0003000bffe800f500d20026002b004c0000370706071e01171506072627
060727363726270727333523072733342717071533371723153337071617
363707323735230727333427170715333717231537170715060736273516
363d010607e10911170e2512100223192533022f23140b0908321e0b0831
01190a240c12421a094c0d14180bbe07271b0c082f0118090d0b11292402
2601150220190d1d0563052f170c10010404090c1a1c0c040f1f1c2c0208
2a020824150b08260c122a090f28181b25130f3402081f1b0c06280b1130
0e04145910070b0c04040109490e0700>GFNBAA+SimSun AddT42Char 

1 0 0 <> GFNBAA+SimSun AddT42Char 
GFNBAA+SimSun /CharStrings get begin
/g20 20 def
end
GFNBAA+SimSun /Encoding get
dup 128 /g20 put
pop
end
%ADOEndSubsetFont
/KEVNYS+SimSun /GFNBAA+SimSun findfont ct_VMDictPut
/KEVNYS+SimSun*1 
[128{/.notdef}rp /g20 127{/.notdef}rp]
KEVNYS+SimSun nf
KEVNYS+SimSun*1 [21.997 0 0 -21.997 0 0 ]msf
303.137 -177.523 mo
(\200)sh
%ADOBeginSubsetFont: HJCBAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /HJCBAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966f6793aa700000e200000112668656164e34ba941000003f40000
003668686561020000f60000042c00000024686d74781800012a00000450
000000646c6f63612eae32fe000004b4000000346d61787001d53f570000
04e8000000206e616d65c84a986900000508000008627072657005dc4fcc
00000d6c000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
cc95b7075f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000019010000000000
00000100000f0100000d010000110100000f01000016010000090100000d
0100000f0100000a0100000e0100000e010000100100000e0100000c0100
000c0100000c0100000b0100000a0100000a0100000e0100000b0100000a
01000009000000000000005d00ca0136017f01da027402a602e0031d035e
03aa03f5043c049204f2057105e3066906d5073107ab0821089300010000
0019016c00310000000000010000002f0029000001613dbb000000000000
001e016e0001000000000000002700000001000000000001000d00270001
000000000002000700340001000000000003000d003b0001000000000004
000d00480001000000000005000c00550001000000000006000d00610001
000000000007002c006e0003000104090000004e009a0003000104090001
001a00e80003000104090002000e01020003000104090003001a01100003
000104090004001a012a0003000104090005001801440003000104090006
001a015c000300010409000700580176000300010409000d02aa01ce0003
00010409000e005204780003000108040000008204ca0003000108040001
0012054c00030001080400020004055e0003000108040003001205620003
000108040004001205740003000108040005001805860003000108040006
0012059e0003000108040007005805b00003000108040008003e06080003
000108040009003e0646000300010804000b00380684000300010804000c
003806bca920436f70797269676874205a484f4e47594920456c65637472
6f6e696320436f2e203230303144434f4756442b53696d53756e52656775
6c617244434f4756442b53696d53756e44434f4756442b53696d53756e56
657273696f6e20352e303444434f4756442b53696d53756e54726164656d
61726b206f66205a484f4e47594920456c656374726f6e696320436f2e2c
204265696a696e6700a900200043006f0070007900720069006700680074
0020005a0048004f004e00470059004900200045006c0065006300740072
006f006e0069006300200043006f002e0020003200300030003100440043
004f004700560044002b00530069006d00530075006e0052006500670075
006c0061007200440043004f004700560044002b00530069006d00530075
006e00440043004f004700560044002b00530069006d00530075006e0056
0065007200730069006f006e00200035002e0030003400440043004f0047
00560044002b00530069006d00530075006e00540072006100640065006d
00610072006b0020006f00660020005a0048004f004e0047005900490020
0045006c0065006300740072006f006e0069006300200043006f002e002c
0020004200650069006a0069006e00670059006f00750020006d00610079
00200075007300650020007400680069007300200066006f006e00740020
0074006f00200064006900730070006c0061007900200061006e00640020
007000720069006e007400200063006f006e00740065006e007400200061
00730020007000650072006d006900740074006500640020006200790020
0074006800650020006c006900630065006e007300650020007400650072
006d007300200066006f00720020007400680065002000700072006f0064
00750063007400200069006e002000770068006900630068002000740068
0069007300200066006f006e007400200069007300200069006e0063006c
0075006400650064002e00200059006f00750020006d006100790020006f
006e006c0079002000280069002900200065006d00620065006400200074
00680069007300200066006f006e007400200069006e00200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
00650064002000620079002000740068006500200065006d006200650064
00640069006e00670020007200650073007400720069006300740069006f
006e007300200069006e0063006c007500640065006400200069006e0020
007400680069007300200066006f006e0074003b00200061006e00640020
0028006900690029002000740065006d0070006f0072006100720069006c
007900200064006f0077006e006c006f0061006400200074006800690073
00200066006f006e007400200074006f002000610020007000720069006e
0074006500720020006f00720020006f00740068006500720020006f0075
0074007000750074002000640065007600690063006500200074006f0020
00680065006c00700020007000720069006e007400200063006f006e0074
0065006e0074002e0068007400740070003a002f002f007700770077002e
006d006900630072006f0073006f00660074002e0063006f006d002f0074
00790070006f006700720061007000680079002f0066006f006e00740073
00a900200043006f00700079007200690067006800740020005a0048004f
004e00470059004900200045006c0065006300740072006f006e00690063
00200043006f002e00200032003000300031000d000a5b574f536570636e
753153174eac4e2d66134e2d680775355b504fe1606f6280672f67099650
516c53f863d04f9b300200440043004f004700560044002b5b8b4f535e38
89c400440043004f004700560044002b5b8b4f5300440043004f00470056
0044002b5b8b4f5300560065007200730069006f006e00200035002e0030
003400440043004f004700560044002b5b8b4f5300540072006100640065
006d00610072006b0020006f00660020005a0048004f004e004700590049
00200045006c0065006300740072006f006e0069006300200043006f002e
002c0020004200650069006a0069006e0067004200650069006a0069006e
00670020005a0068006f006e00670059006900200045006c006500630074
0072006f006e00690063007300200043006f002e004200650069006a0069
006e00670020005a0068006f006e00670059006900200045006c00650063
00740072006f006e00690063007300200043006f002e0068007400740070
003a002f002f007700770077002e007a0068006f006e0067007900690063
00740073002e0063006f006d002e0063006e0068007400740070003a002f
002f007700770077002e007a0068006f006e006700790069006300740073
002e0063006f006d002e0063006e0000411a01110110003200280110010e
00280028010f010e00280028010c010d00460028010d010e00280028010e
010d00180028010c010db346285001b801ff858d001db0324b5258b0801d
59b801064568b801062344b801044568b801042344b801054568b8010445
60b801052344b801024568b801044560b801022344b801034568b8010245
60b801032344b801004568b801044560b801002344b801014568b8010045
60b801012344012b2b2b2b2b2b2b000000>
[4391 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1256 8 <0001000dffe700f400d2001e000037342717071533371723151e01171506
072e01270e0107273e0237230727750118084a1016700a35300f0721300a
093a3101233013024f0e088b35120b0834101608254b0d04010c1446263d
3b10040f2e3c21020800>HJCBAA+SimSun AddT42Char 

1 0 0 <> HJCBAA+SimSun AddT42Char 
HJCBAA+SimSun /CharStrings get begin
/g8 8 def
end
HJCBAA+SimSun /Encoding get
dup 39 /g8 put
pop
end
%ADOEndSubsetFont
/KEVNYT+SimSun /HJCBAA+SimSun findfont ct_VMDictPut
/KEVNYT+SimSun*1 
[39{/.notdef}rp /g8 216{/.notdef}rp]
KEVNYT+SimSun nf
KEVNYT+SimSun*1 [21.997 0 0 -21.997 0 0 ]msf
336.133 -177.523 mo
(')sh
KEVNYQ+SimSun*1 [21.997 0 0 -21.997 0 0 ]msf
369.13 -177.523 mo
(f)sh
%ADOBeginSubsetFont: UGXAAA+NimbusRomNo9L-Regu Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /UGXAAA+NimbusRomNo9L-Regu def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 89 /Y put
def
/FontBBox {-168 -281 1000 924} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 450 470 662 682] def
/BlueScale 0.039625 def
/StdHW [30] def
/StdVW [85] def
/StemSnapH [30 38 43 53 60 73] def
/StemSnapV [78 85 91 103 109 115] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/A <1C60D8A8C9B6079F1E495237E195FB086879F6BCD60DCB240CDB4816DCDA
7E7D74835F693D24CCD6C338D68869D7AF0A42511BFE8C5AA9C0FDA69D2F0CC3
FEEA1E37C9F5A5B0401E78C533D84B405A09584E86C2A416FFCA03B71FACE3A1
46D6DFD53C2043C5A98FBBF0B70EB7EE652DFCDC5B6B> |-
/C <1C60D8A8C9B64EDF7E182276F33FE64591D35477734F1A3F05995A9E21B3
849012DBE3E5D9BEEC357D7966D622D0BDA2A87D7DF76C988A3C6DB72B7AC755
68902A6FAD90FC53E6498F9E166085199E8D84083DB27D286921A07C13F283E6
EF1D868FB1C61773EE28620908EC2A5479956F05B0F020BC9E52293B72C896E3
409360C9D09608CE13546B> |-
/D <1C60D8A8C9B6079F1E4884847E183CDFB6808979A7FFAABD96864B66E877
4E70985CF395DC1D2FB7C8BCD1A4C47C710B24983ACFD957FDD5209F65A7CC6D
CA7FAB2B31A94757B920900AF55DAFF07E485481F6EE171E97C1FB25B33FFF25
DE136D66C781030917AD5172E37CA4D4A7F6F4BF8A8F873BF0626800AF87A204
C228E1B6C0435E1F9862D6C5EA44C6C9DEA79E98A81138E9957151BC634A5F49
B7895409D9F2A50BD885B883DF4C> |-
/E <1C60D8A8C9B7D8BE6A6FAF13E57A5D0C2C66821CCEEF24B4E4419847787E
D4C8A98BBE3EBCCE15D1DC333F323E4C7D43FF48D1C1F11091632F6F11174D4D
B924B1BBA6DF69EF4ADB27C45D6BAFF8FAE037CF2DD63F0C99022D146FEDA01C
CFEE96DE599AE8069A8E5F6B8E0F74979F0CC193D875C6765F26CD248D1D0923
817F3CBDA21B14A62B3E828ED4997E1F5E3EED19C373DD0855950863084BA232
08116185FD3DCF> |-
/F <1C60D8A8C9B7EF322BCE349315DC362BCA8CFE4FA18BB639D443336F7111
E2FACF60D2E19F1D435E96E49FD0AF135C8F4D593F674BA833D2635B8F02FCB2
BA0EA4D7637689C705ACF839A843947A142679A187B852855766FB975C8A7F4A
36CBB0767C130BA6A421FFE56B2026B49CFD6C7C20869DFF5A9F134D0B5DB06E
3DBFFEF295> |-
/G <1C60D8A8C9B6079FE80B2D9587063A0F42FCF180C2C0D9DB89A2D8D27614
F3B775C2888E457B564DD121D768F26DDE098413D22B9A5F0CB2CD19AEDBFFAC
36A33330BDE6B90C658E0E9792E64DB94CF67C391D10BB06977C8574E10F3929
312E77FD1B9E2DD8E6968F0669B7B77DA5CCB2A388D224061BD5C50DA8D6A6F6
BF5A46DBF2EA09B29E7A07A6A0280473B616743851101D4FF591F24A214C14E5
593E25539926> |-
/H <1C60D8A8C9B6079F1E4884809AF27C32C4C4644B748B72386090DF6EB484
CEA0815D83DD608CC775FE83C31EDE164D077FF80BB002D9CA37B26EA5372CD4
FEE69909A5383B74A93FDCDCA1E7577D38E8B9431EDF4F2AED0BB7B71858AF38
E98C9DD8D402A49E8B0C6A4E0841C41D036EDF21A21312F4AE79B0046CA7EE30
82CAAB0BAB2FA41410BA4687> |-
/I <1C60D8A8C9B81F2C46F6291E6BC656A33181A7A4C9904C14F3C78DD8A216
6C79F417AFFBE3B86093B7A5C9E5643BE68ED9E3DF5945A598D6DBA4A9E1182E
708E6DE986B0C684C3> |-
/L <1C60D8A8C9B7D8BE6A6D10833A58E10E35AAFF577B959C281B432F2033A3
778270B7BC2F94F72D8EF799737B2B47855DBABFD82810DF495FF107F9807477
33A863894E18FDBBE26BF9A4CCFBEC890F8084F442A884FC2F927A7A2864CE18
84EE963B829AA2B70A1A8A> |-
/N <1C60D8A8C9B6079F150BE669E05A86555759DA107B43AB61905A62645A66
3DE63B767402DC6894A5DFEDB84E4BDD1D351CED404CF8174231DE9B67002319
4AC38274F20C1FD6D4B8DAC4F0C8BAF545ED28910A7DBCC99ACA30CFE6FD8C85
EEB2F3221A60E51AFB01492A579996C127A28D4FA98C92096380068298F29040
ACE78F68E55A11F391A0536D2E67FD1C08CF11> |-
/O <1C60D8A8C9B6079FE817D875D2CBFFB503E7661914031DEF82D48C90EF37
02517DD03C8E65B1C85769ED6887A24289D9AB99F5B1BDE82993DEACC2DDC39A
E11851296B5BD32A727B69731E92C7B0DB7ABEFABCF42140BCA1DA9DAA31FC27
FA6483912C36637F02E27FBD8C9B9BE19A703CEB20A6852E97F86CBFE152A658
3E5E69CA94CEFA79FBBF39D4558C7345137E92> |-
/R <1C60D8A8C9B64EDF88216CFE4D3F3D06C439990B9502E48B1E9505CADB19
021894EAC2A555525553B38C5C90F2EB03B1EAA9C843F3EC6B1FDF49C4D2529B
157D754C9D04B9C2E4D5F9153F875E924C7C70B9AE574EA090FB61D41C37FC51
04946381820B77D1612851C3FA0E44B55800E05B6E555083090B55D924DA4751
63F3F85730D71659BCB18AB61841F49D0C395BFB5282E1ECCB55DDA64334BE28
FCDB0DD4220B74399C87C53A8CCBF542DE115866523BA0> |-
/S <1C60D8A8C9B7EF3225294A5FFA2220B3A70A7F29A870B3BAEE7DFF2B94C6
9EBE02BC5C072804E44299D7CD5195B2B62440E331BF680EB99E90C8D38CE947
04C41DF179991352DDB1E57AF890781C25959AA3B7BFDF862D34BECCC3DC0893
FC4126E7ABEE67256549F5A2A6CFFEB66EFE3C866BD2872F8C1B7A2ABDDA6D8F
5E1298D98292AA28BF3CA599A78D591197DCA6EC3B7EEB172439C64EFD164E42
7DBBBA3E18B9157A9BDD8BAC44A0627E4C08D45A6CE6CCFD19F304834876F210
34F9D8D789834201D1B0F60CFC76F29AFE4E29BC48F795> |-
/T <1C60D8A8C9B7D8BE6A419732DB5F024C0509628A5C1F3C8AEF4E7D00CBC1
830EA50E7630715A3443152766048C069B0A4C72A78E94AB6D91F59E64DF9B5E
3A2935C3883FA28660A00DBD8C0553BBB6DF7158E8BBDF61D18A> |-
/U <1C60D8A8C9B6079FE80F64D637F1516D9E8985E20DE1E54990D7E09FF6F7
F806CCE49A90DDF87D67E8B1682A426E98A2CB5AE74C2EB02CDAB73A761D0960
0E57E4986D919E48378EC23E82D2FD189FD8197C33600A4305AFF2F750237481
DBB6D87498C90361FF0E685A3AB0DFA4934DE082373B6FDECB908D9CAFE5371A
B2391636> |-
/V <1C60D8A8C9B6079F150BE669E10D0A89FB4B4A79E924F118832305224132
22E2A9A1CA143D92C4493C7C521082241671767794552BBE0C72C572F506851B
9FFC5646BF7C80A1B249DE720E4EBC4B3BAA42C2C22BCB20793D277D6ECFB9BD
2B6241E55E3D01802787A6> |-
/Y <1C60D8A8C9B6079F1E48848E899D058BE400EBF328928D801D8EF13846FF
5B0C73A36F6E27F4DA34E3860E0374EF8FE6D6480E8536526A69999D3B13F855
B3AEA553E80159C21F0FB29E0A1FCAE86A8B04BE7FF542902CA0805A808770B4
704FF8C0B09E75F95B0A405A038D010FB18EDE32DB263B8C503B7C6289A326EE
D3E3A0667800422922> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KEVNYU+NimbusRomNo9L-Regu /UGXAAA+NimbusRomNo9L-Regu findfont ct_VMDictPut
/KEVNYU+NimbusRomNo9L-Regu*1 
[65{/.notdef}rp /A /.notdef /C /D /E /F /G 
/H /I 2{/.notdef}rp /L /.notdef /N /O 2{/.notdef}rp 
/R /S /T /U /V 2{/.notdef}rp /Y 166{/.notdef}rp]
KEVNYU+NimbusRomNo9L-Regu nf
KEVNYU+NimbusRomNo9L-Regu*1 [12.005 0 0 -12.005 0 0 ]msf
100.859 -157.498 mo
(UNIVERSITYOFELECTRONICSCIENCEANDTECHNOLOGYOFCHINA)
[8.66761 8.66761 3.99757 8.66762 7.33496 8.00743 6.67477 3.99757 7.33496 11.6689 8.6676 9.67603 
7.33496 7.33498 7.33496 8.00743 7.33496 7.52722 8.66762 8.66759 3.99759 11.0087 6.67474 8.00745 
3.99756 7.33496 8.6676 8.00745 10.3362 8.66763 8.66763 11.6688 7.33499 7.33496 8.00742 8.6676 
8.66763 8.6676 7.33496 8.6676 8.66763 11.6689 8.66763 9.67596 8.00745 8.6676 3.99756 8.24741 
0 ]xsh
%ADOBeginSubsetFont: MZQAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /MZQAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966000e646e00000eb000001cd268656164e34ba941000003f40000
0036686865610200010e0000042c00000024686d7478300002f100000450
000000c46c6f6361ae4eb59700000514000000646d61787001ed3f570000
0578000000206e616d65cc97bab600000598000008627072657005dc4fcc
00000dfc000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
91fbc7155f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000031010000000000
00000100000a0100000b0100000e010000170100001d0100000b0100000c
0100000e0100000b0100000b0100000c0100000b0100000d0100001e0100
001d0100000f0100000c0100000e0100000d0100000b0100000b01000010
0100000e0100000c0100000c0100000c010000090100000b0100000a0100
000b0100000e0100000d0100000f0100000a01000031010000100100000b
01000010010000190100001d0100000c0100001e0100000f0100000c0100
001a0100001001000014000000000000005a00aa00f201320174019701d5
021d028302e9034403dd0411045604b40516059f05d2061d066306b70726
076c07e30816085108a108ee0946098c09f20a520ac70b2b0b4d0b830bcb
0c1a0c540c930ccc0d0d0d620da30dde0e260e69000100000031016c0031
0000000000010000002f0029000001613dbb000000000000001e016e0001
000000000000002700000001000000000001000d00270001000000000002
000700340001000000000003000d003b0001000000000004000d00480001
000000000005000c00550001000000000006000d00610001000000000007
002c006e0003000104090000004e009a0003000104090001001a00e80003
000104090002000e01020003000104090003001a01100003000104090004
001a012a0003000104090005001801440003000104090006001a015c0003
00010409000700580176000300010409000d02aa01ce000300010409000e
005204780003000108040000008204ca00030001080400010012054c0003
0001080400020004055e0003000108040003001205620003000108040004
0012057400030001080400050018058600030001080400060012059e0003
000108040007005805b00003000108040008003e06080003000108040009
003e0646000300010804000b00380684000300010804000c003806bca920
436f70797269676874205a484f4e47594920456c656374726f6e69632043
6f2e203230303147424d425a552b53696d53756e526567756c617247424d
425a552b53696d53756e47424d425a552b53696d53756e56657273696f6e
20352e303447424d425a552b53696d53756e54726164656d61726b206f66
205a484f4e47594920456c656374726f6e696320436f2e2c204265696a69
6e6700a900200043006f00700079007200690067006800740020005a0048
004f004e00470059004900200045006c0065006300740072006f006e0069
006300200043006f002e0020003200300030003100470042004d0042005a
0055002b00530069006d00530075006e0052006500670075006c00610072
00470042004d0042005a0055002b00530069006d00530075006e00470042
004d0042005a0055002b00530069006d00530075006e0056006500720073
0069006f006e00200035002e0030003400470042004d0042005a0055002b
00530069006d00530075006e00540072006100640065006d00610072006b
0020006f00660020005a0048004f004e00470059004900200045006c0065
006300740072006f006e0069006300200043006f002e002c002000420065
0069006a0069006e00670059006f00750020006d00610079002000750073
00650020007400680069007300200066006f006e007400200074006f0020
0064006900730070006c0061007900200061006e00640020007000720069
006e007400200063006f006e00740065006e007400200061007300200070
00650072006d006900740074006500640020006200790020007400680065
0020006c006900630065006e007300650020007400650072006d00730020
0066006f00720020007400680065002000700072006f0064007500630074
00200069006e002000770068006900630068002000740068006900730020
0066006f006e007400200069007300200069006e0063006c007500640065
0064002e00200059006f00750020006d006100790020006f006e006c0079
002000280069002900200065006d00620065006400200074006800690073
00200066006f006e007400200069006e00200063006f006e00740065006e
00740020006100730020007000650072006d006900740074006500640020
00620079002000740068006500200065006d00620065006400640069006e
00670020007200650073007400720069006300740069006f006e00730020
0069006e0063006c007500640065006400200069006e0020007400680069
007300200066006f006e0074003b00200061006e00640020002800690069
0029002000740065006d0070006f0072006100720069006c007900200064
006f0077006e006c006f006100640020007400680069007300200066006f
006e007400200074006f002000610020007000720069006e007400650072
0020006f00720020006f00740068006500720020006f0075007400700075
0074002000640065007600690063006500200074006f002000680065006c
00700020007000720069006e007400200063006f006e00740065006e0074
002e0068007400740070003a002f002f007700770077002e006d00690063
0072006f0073006f00660074002e0063006f006d002f007400790070006f
006700720061007000680079002f0066006f006e0074007300a900200043
006f00700079007200690067006800740020005a0048004f004e00470059
004900200045006c0065006300740072006f006e0069006300200043006f
002e00200032003000300031000d000a5b574f536570636e753153174eac
4e2d66134e2d680775355b504fe1606f6280672f67099650516c53f863d0
4f9b300200470042004d0042005a0055002b5b8b4f535e3889c400470042
004d0042005a0055002b5b8b4f5300470042004d0042005a0055002b5b8b
4f5300560065007200730069006f006e00200035002e0030003400470042
004d0042005a0055002b5b8b4f5300540072006100640065006d00610072
006b0020006f00660020005a0048004f004e00470059004900200045006c
0065006300740072006f006e0069006300200043006f002e002c00200042
00650069006a0069006e0067004200650069006a0069006e00670020005a
0068006f006e00670059006900200045006c0065006300740072006f006e
00690063007300200043006f002e004200650069006a0069006e00670020
005a0068006f006e00670059006900200045006c0065006300740072006f
006e00690063007300200043006f002e0068007400740070003a002f002f
007700770077002e007a0068006f006e006700790069006300740073002e
0063006f006d002e0063006e0068007400740070003a002f002f00770077
0077002e007a0068006f006e006700790069006300740073002e0063006f
006d002e0063006e0000411a01110110003200280110010e00280028010f
010e00280028010c010d00460028010d010e00280028010e010d00180028
010c010db346285001b801ff858d001db0324b5258b0801d59b801064568
b801062344b801044568b801042344b801054568b801044560b801052344
b801024568b801044560b801022344b801034568b801024560b801032344
b801004568b801044560b801002344b801014568b801004560b801012344
012b2b2b2b2b2b2b000000>
[7379 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1672 13 <0009000bffe700f600d10005000b000f00130017001b00400059006d0000
3f011e010626071e01062627371533353315333507153335331533353715
141707352315073523150736342717333523220727333427170715333717
231533371707342717071533371723151406072627371e013d0123220727
07363d0123072733342717071533371723151417b2011909090c5c1d050a
0a100a290d285e290d280c010d280d290d01010e28260d0b094701150733
0b114f27070d200116080c0d132c080b0118010f0f590d0b0919010d0b08
20011709090a102301cc03080d0f179c0e110e1b0f6a181818181e181818
181b230c0f070c0c061211061832150613030915100907150b1113080b60
0d0c0907090d13290b0b040a080402010729030948100e7c020835120c06
350a106d1113>MZQAAA+SimSun AddT42Char 

1 0 0 <> MZQAAA+SimSun AddT42Char 
MZQAAA+SimSun /CharStrings get begin
/g13 13 def
end
MZQAAA+SimSun /Encoding get
dup 90 /g13 put
pop
end
%ADOEndSubsetFont
/KEVNYV+SimSun /MZQAAA+SimSun findfont ct_VMDictPut
/KEVNYV+SimSun*1 
[90{/.notdef}rp /g13 165{/.notdef}rp]
KEVNYV+SimSun nf
KEVNYV+SimSun*1 [42.003 0 0 -42.003 0 0 ]msf
171.63 -82.85 mo
(Z)sh
%ADOBeginSubsetFont: ELRBAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /ELRBAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c79667e6ce3e600000dbc000004b668656164e34ba941000003f40000
003668686561020000e50000042c00000024686d74780700004a00000450
000000206c6f6361053a043400000470000000126d61787001c43f570000
0484000000206e616d65ce66b659000004a4000008627072657005dc4fcc
00000d08000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
a1a94a515f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000008010000000000
00000100000c0100000b0100000b0100000f0100000a0100000f00000000
0000007f011601a301c90212025b0000000100000008016c003100000000
00010000002f0029000001613dbb000000000000001e016e000100000000
0000002700000001000000000001000d0027000100000000000200070034
0001000000000003000d003b0001000000000004000d0048000100000000
0005000c00550001000000000006000d00610001000000000007002c006e
0003000104090000004e009a0003000104090001001a00e8000300010409
0002000e01020003000104090003001a01100003000104090004001a012a
0003000104090005001801440003000104090006001a015c000300010409
000700580176000300010409000d02aa01ce000300010409000e00520478
0003000108040000008204ca00030001080400010012054c000300010804
00020004055e000300010804000300120562000300010804000400120574
00030001080400050018058600030001080400060012059e000300010804
0007005805b00003000108040008003e06080003000108040009003e0646
000300010804000b00380684000300010804000c003806bca920436f7079
7269676874205a484f4e47594920456c656374726f6e696320436f2e2032
3030315650464641482b53696d53756e526567756c61725650464641482b
53696d53756e5650464641482b53696d53756e56657273696f6e20352e30
345650464641482b53696d53756e54726164656d61726b206f66205a484f
4e47594920456c656374726f6e696320436f2e2c204265696a696e6700a9
00200043006f00700079007200690067006800740020005a0048004f004e
00470059004900200045006c0065006300740072006f006e006900630020
0043006f002e00200032003000300031005600500046004600410048002b
00530069006d00530075006e0052006500670075006c0061007200560050
0046004600410048002b00530069006d00530075006e0056005000460046
00410048002b00530069006d00530075006e00560065007200730069006f
006e00200035002e00300034005600500046004600410048002b00530069
006d00530075006e00540072006100640065006d00610072006b0020006f
00660020005a0048004f004e00470059004900200045006c006500630074
0072006f006e0069006300200043006f002e002c0020004200650069006a
0069006e00670059006f00750020006d0061007900200075007300650020
007400680069007300200066006f006e007400200074006f002000640069
00730070006c0061007900200061006e00640020007000720069006e0074
00200063006f006e00740065006e00740020006100730020007000650072
006d0069007400740065006400200062007900200074006800650020006c
006900630065006e007300650020007400650072006d007300200066006f
00720020007400680065002000700072006f006400750063007400200069
006e0020007700680069006300680020007400680069007300200066006f
006e007400200069007300200069006e0063006c0075006400650064002e
00200059006f00750020006d006100790020006f006e006c007900200028
0069002900200065006d0062006500640020007400680069007300200066
006f006e007400200069006e00200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
002000740068006500200065006d00620065006400640069006e00670020
007200650073007400720069006300740069006f006e007300200069006e
0063006c007500640065006400200069006e002000740068006900730020
0066006f006e0074003b00200061006e0064002000280069006900290020
00740065006d0070006f0072006100720069006c007900200064006f0077
006e006c006f006100640020007400680069007300200066006f006e0074
00200074006f002000610020007000720069006e0074006500720020006f
00720020006f00740068006500720020006f007500740070007500740020
00640065007600690063006500200074006f002000680065006c00700020
007000720069006e007400200063006f006e00740065006e0074002e0068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f0066006f006e0074007300a900200043006f0070
0079007200690067006800740020005a0048004f004e0047005900490020
0045006c0065006300740072006f006e0069006300200043006f002e0020
0032003000300031000d000a5b574f536570636e753153174eac4e2d6613
4e2d680775355b504fe1606f6280672f67099650516c53f863d04f9b3002
005600500046004600410048002b5b8b4f535e3889c40056005000460046
00410048002b5b8b4f53005600500046004600410048002b5b8b4f530056
0065007200730069006f006e00200035002e003000340056005000460046
00410048002b5b8b4f5300540072006100640065006d00610072006b0020
006f00660020005a0048004f004e00470059004900200045006c00650063
00740072006f006e0069006300200043006f002e002c0020004200650069
006a0069006e0067004200650069006a0069006e00670020005a0068006f
006e00670059006900200045006c0065006300740072006f006e00690063
007300200043006f002e004200650069006a0069006e00670020005a0068
006f006e00670059006900200045006c0065006300740072006f006e0069
0063007300200043006f002e0068007400740070003a002f002f00770077
0077002e007a0068006f006e006700790069006300740073002e0063006f
006d002e0063006e0068007400740070003a002f002f007700770077002e
007a0068006f006e006700790069006300740073002e0063006f006d002e
0063006e0000411a01110110003200280110010e00280028010f010e0028
0028010c010d00460028010d010e00280028010e010d00180028010c010d
b346285001b801ff858d001db0324b5258b0801d59b801064568b8010623
44b801044568b801042344b801054568b801044560b801052344b8010245
68b801044560b801022344b801034568b801024560b801032344b8010045
68b801044560b801002344b801014568b801004560b801012344012b2b2b
2b2b2b2b000000>
[1207 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 838 5 <0001000ffffb00f300cf0018000037342717071533371723153337172322
072733352322072733780119094610166c370f159d0d0b0954480d0b0969
ad0c160b084a1016680f150309680309>ELRBAA+SimSun AddT42Char 

1 0 0 <> ELRBAA+SimSun AddT42Char 
ELRBAA+SimSun /CharStrings get begin
/g5 5 def
end
ELRBAA+SimSun /Encoding get
dup 235 /g5 put
pop
end
%ADOEndSubsetFont
/KEVNYW+SimSun /ELRBAA+SimSun findfont ct_VMDictPut
/KEVNYW+SimSun*1 
[235{/.notdef}rp /g5 20{/.notdef}rp]
KEVNYW+SimSun nf
KEVNYW+SimSun*1 [42.003 0 0 -42.003 0 0 ]msf
213.633 -82.85 mo
(\353)sh
KEVNYQ+SimSun*1 [42.003 0 0 -42.003 0 0 ]msf
255.636 -82.85 mo
(f)sh
%ADOBeginSubsetFont: AXNBAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /AXNBAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966ae3c9a7d00000e340000141c68656164e34ba941000003f40000
003668686561020000f90000042c00000024686d74781b00010c00000450
000000706c6f636141ce3cbf000004c00000003a6d61787001d83f570000
04fc000000206e616d65ca0e9d1a0000051c000008627072657005dc4fcc
00000d80000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
3c7c98415f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe0000010000010000000000000000000000000000001c010000000000
00000100000e0100000b0100000901000009010000090100000a0100000a
0100000a01000009010000080100000a010000090100000a0100000e0100
000b0100000b0100000b0100000b0100000a0100000a0100000c01000008
0100000b0100000b0100000a0100000a0000000000000043009900f9014f
01b8021c026a02bb0318036603bb0424048504da053a058805f1066d06e6
074f07bf083908b8092009810a0e000000010000001c016c003100000000
00010000002f0029000001613dbb000000000000001e016e000100000000
0000002700000001000000000001000d0027000100000000000200070034
0001000000000003000d003b0001000000000004000d0048000100000000
0005000c00550001000000000006000d00610001000000000007002c006e
0003000104090000004e009a0003000104090001001a00e8000300010409
0002000e01020003000104090003001a01100003000104090004001a012a
0003000104090005001801440003000104090006001a015c000300010409
000700580176000300010409000d02aa01ce000300010409000e00520478
0003000108040000008204ca00030001080400010012054c000300010804
00020004055e000300010804000300120562000300010804000400120574
00030001080400050018058600030001080400060012059e000300010804
0007005805b00003000108040008003e06080003000108040009003e0646
000300010804000b00380684000300010804000c003806bca920436f7079
7269676874205a484f4e47594920456c656374726f6e696320436f2e2032
30303143554e4144412b53696d53756e526567756c617243554e4144412b
53696d53756e43554e4144412b53696d53756e56657273696f6e20352e30
3443554e4144412b53696d53756e54726164656d61726b206f66205a484f
4e47594920456c656374726f6e696320436f2e2c204265696a696e6700a9
00200043006f00700079007200690067006800740020005a0048004f004e
00470059004900200045006c0065006300740072006f006e006900630020
0043006f002e0020003200300030003100430055004e004100440041002b
00530069006d00530075006e0052006500670075006c0061007200430055
004e004100440041002b00530069006d00530075006e00430055004e0041
00440041002b00530069006d00530075006e00560065007200730069006f
006e00200035002e0030003400430055004e004100440041002b00530069
006d00530075006e00540072006100640065006d00610072006b0020006f
00660020005a0048004f004e00470059004900200045006c006500630074
0072006f006e0069006300200043006f002e002c0020004200650069006a
0069006e00670059006f00750020006d0061007900200075007300650020
007400680069007300200066006f006e007400200074006f002000640069
00730070006c0061007900200061006e00640020007000720069006e0074
00200063006f006e00740065006e00740020006100730020007000650072
006d0069007400740065006400200062007900200074006800650020006c
006900630065006e007300650020007400650072006d007300200066006f
00720020007400680065002000700072006f006400750063007400200069
006e0020007700680069006300680020007400680069007300200066006f
006e007400200069007300200069006e0063006c0075006400650064002e
00200059006f00750020006d006100790020006f006e006c007900200028
0069002900200065006d0062006500640020007400680069007300200066
006f006e007400200069006e00200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
002000740068006500200065006d00620065006400640069006e00670020
007200650073007400720069006300740069006f006e007300200069006e
0063006c007500640065006400200069006e002000740068006900730020
0066006f006e0074003b00200061006e0064002000280069006900290020
00740065006d0070006f0072006100720069006c007900200064006f0077
006e006c006f006100640020007400680069007300200066006f006e0074
00200074006f002000610020007000720069006e0074006500720020006f
00720020006f00740068006500720020006f007500740070007500740020
00640065007600690063006500200074006f002000680065006c00700020
007000720069006e007400200063006f006e00740065006e0074002e0068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f0066006f006e0074007300a900200043006f0070
0079007200690067006800740020005a0048004f004e0047005900490020
0045006c0065006300740072006f006e0069006300200043006f002e0020
0032003000300031000d000a5b574f536570636e753153174eac4e2d6613
4e2d680775355b504fe1606f6280672f67099650516c53f863d04f9b3002
00430055004e004100440041002b5b8b4f535e3889c400430055004e0041
00440041002b5b8b4f5300430055004e004100440041002b5b8b4f530056
0065007200730069006f006e00200035002e0030003400430055004e0041
00440041002b5b8b4f5300540072006100640065006d00610072006b0020
006f00660020005a0048004f004e00470059004900200045006c00650063
00740072006f006e0069006300200043006f002e002c0020004200650069
006a0069006e0067004200650069006a0069006e00670020005a0068006f
006e00670059006900200045006c0065006300740072006f006e00690063
007300200043006f002e004200650069006a0069006e00670020005a0068
006f006e00670059006900200045006c0065006300740072006f006e0069
0063007300200043006f002e0068007400740070003a002f002f00770077
0077002e007a0068006f006e006700790069006300740073002e0063006f
006d002e0063006e0068007400740070003a002f002f007700770077002e
007a0068006f006e006700790069006300740073002e0063006f006d002e
0063006e0000411a01110110003200280110010e00280028010f010e0028
0028010c010d00460028010d010e00280028010e010d00180028010c010d
b346285001b801ff858d001db0324b5258b0801d59b801064568b8010623
44b801044568b801042344b801054568b801044560b801052344b8010245
68b801044560b801022344b801034568b801024560b801032344b8010045
68b801044560b801002344b801014568b801004560b801012344012b2b2b
2b2b2b2b000000>
[5149 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1740 12 <0005000affe800f600d100100016001d0024003300001736350607273e01
3717070607170714173f011e0106260733371723220717371e01062e0137
170e010733371723220727333e013201151103131f08170910070d080143
031d010f0540790e147b0c0b0e03190c1401084a180912132d0e148a0d0b
09550c10181e762312021e46240c05241009067815dd0216140c1e220e14
031402282815182c2c0d053c380e140309294d00>AXNBAA+SimSun AddT42Char 

1 0 0 <> AXNBAA+SimSun AddT42Char 
AXNBAA+SimSun /CharStrings get begin
/g12 12 def
end
AXNBAA+SimSun /Encoding get
dup 77 /g12 put
pop
end
%ADOEndSubsetFont
/KEVNYX+SimSun /AXNBAA+SimSun findfont ct_VMDictPut
/KEVNYX+SimSun*1 
[77{/.notdef}rp /g12 178{/.notdef}rp]
KEVNYX+SimSun nf
KEVNYX+SimSun*1 [42.003 0 0 -42.003 0 0 ]msf
297.639 -82.85 mo
(M)sh
%ADOBeginSubsetFont: YEKBAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /YEKBAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966774638b000000e580000199468656164e34ba941000003f40000
003668686561020000ff0000042c00000024686d74782100015c00000450
000000886c6f636162d25c58000004d8000000466d61787001de3f570000
0520000000206e616d65bd1b913200000540000008627072657005dc4fcc
00000da4000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
d5fe92a15f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000022010000000000
00000100000a0100000d0100000a0100000a0100000c0100000d0100000c
0100000d010000090100000a0100000b0100000c0100000e010000080100
000a010000090100000c010000090100000c0100000b0100000a0100000a
010000090100000a0100000e0100000d0100000a0100000d0100000d0100
000801000009010000090000000000000047008c00d10126016901c0021c
027d02d20337038c03f1046904ce051e057f05db063d06a60722079507f8
088608f6097009dd0a4d0ac00b3d0bba0c400cca0000000100000022016c
00310000000000010000002f0029000001613dbb000000000000001e016e
0001000000000000002700000001000000000001000d0027000100000000
0002000700340001000000000003000d003b0001000000000004000d0048
0001000000000005000c00550001000000000006000d0061000100000000
0007002c006e0003000104090000004e009a0003000104090001001a00e8
0003000104090002000e01020003000104090003001a0110000300010409
0004001a012a0003000104090005001801440003000104090006001a015c
000300010409000700580176000300010409000d02aa01ce000300010409
000e005204780003000108040000008204ca00030001080400010012054c
00030001080400020004055e000300010804000300120562000300010804
00040012057400030001080400050018058600030001080400060012059e
0003000108040007005805b00003000108040008003e0608000300010804
0009003e0646000300010804000b00380684000300010804000c003806bc
a920436f70797269676874205a484f4e47594920456c656374726f6e6963
20436f2e203230303146444a4553412b53696d53756e526567756c617246
444a4553412b53696d53756e46444a4553412b53696d53756e5665727369
6f6e20352e303446444a4553412b53696d53756e54726164656d61726b20
6f66205a484f4e47594920456c656374726f6e696320436f2e2c20426569
6a696e6700a900200043006f00700079007200690067006800740020005a
0048004f004e00470059004900200045006c0065006300740072006f006e
0069006300200043006f002e0020003200300030003100460044004a0045
00530041002b00530069006d00530075006e0052006500670075006c0061
007200460044004a004500530041002b00530069006d00530075006e0046
0044004a004500530041002b00530069006d00530075006e005600650072
00730069006f006e00200035002e0030003400460044004a004500530041
002b00530069006d00530075006e00540072006100640065006d00610072
006b0020006f00660020005a0048004f004e00470059004900200045006c
0065006300740072006f006e0069006300200043006f002e002c00200042
00650069006a0069006e00670059006f00750020006d0061007900200075
007300650020007400680069007300200066006f006e007400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
00650020006c006900630065006e007300650020007400650072006d0073
00200066006f00720020007400680065002000700072006f006400750063
007400200069006e00200077006800690063006800200074006800690073
00200066006f006e007400200069007300200069006e0063006c00750064
00650064002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e0074007300a90020
0043006f00700079007200690067006800740020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e00200032003000300031000d000a5b574f536570636e75315317
4eac4e2d66134e2d680775355b504fe1606f6280672f67099650516c53f8
63d04f9b300200460044004a004500530041002b5b8b4f535e3889c40046
0044004a004500530041002b5b8b4f5300460044004a004500530041002b
5b8b4f5300560065007200730069006f006e00200035002e003000340046
0044004a004500530041002b5b8b4f5300540072006100640065006d0061
0072006b0020006f00660020005a0048004f004e00470059004900200045
006c0065006300740072006f006e0069006300200043006f002e002c0020
004200650069006a0069006e0067004200650069006a0069006e00670020
005a0068006f006e00670059006900200045006c0065006300740072006f
006e00690063007300200043006f002e004200650069006a0069006e0067
0020005a0068006f006e00670059006900200045006c0065006300740072
006f006e00690063007300200043006f002e0068007400740070003a002f
002f007700770077002e007a0068006f006e006700790069006300740073
002e0063006f006d002e0063006e0068007400740070003a002f002f0077
00770077002e007a0068006f006e006700790069006300740073002e0063
006f006d002e0063006e0000411a01110110003200280110010e00280028
010f010e00280028010c010d00460028010d010e00280028010e010d0018
0028010c010db346285001b801ff858d001db0324b5258b0801d59b80106
4568b801062344b801044568b801042344b801054568b801044560b80105
2344b801024568b801044560b801022344b801034568b801024560b80103
2344b801004568b801044560b801002344b801014568b801004560b80101
2344012b2b2b2b2b2b2b000000>
[6549 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1816 13 <0004000cfff000f400d1000600170026004100003f011e01140626173717
06072736273523220727333717073707161715060726270607273e013717
06071514373316363533141617062b01063734271707153637172a030f0e
0d060a2d032d051005010c070b09260710086c091e320f062f0f1e35021e
230a2e1f1d0e2f0b0205040b0910391c02011708241410c602080e0e0e1d
a12803350e1004115903090a0d0755063e1004010b28324021031b3b2081
170f1b130102250b0b1f010f011956140b08311a1d14>YEKBAA+SimSun AddT42Char 

1 0 0 <> YEKBAA+SimSun AddT42Char 
YEKBAA+SimSun /CharStrings get begin
/g13 13 def
end
YEKBAA+SimSun /Encoding get
dup 186 /g13 put
pop
end
%ADOEndSubsetFont
/KEVNYY+SimSun /YEKBAA+SimSun findfont ct_VMDictPut
/KEVNYY+SimSun*1 
[186{/.notdef}rp /g13 69{/.notdef}rp]
KEVNYY+SimSun nf
KEVNYY+SimSun*1 [42.003 0 0 -42.003 0 0 ]msf
339.642 -82.85 mo
(\272)sh
%ADOBeginSubsetFont: LLIAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /LLIAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c79662c17647500000e340000156a68656164e34ba941000003f40000
003668686561020000f90000042c00000024686d74781b0001a300000450
000000706c6f63614ea2495f000004c00000003a6d61787001d83f570000
04fc000000206e616d65c794c2920000051c000008627072657005dc4fcc
00000d80000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
346277975f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe0000010000010000000000000000000000000000001c010000000000
00000100000b01000013010000130100000b0100000a0100000e01000010
0100000d010000090100000c0100000b0100000c0100000b0100000a0100
00140100000b0100000b0100000b0100000f010000090100000c01000019
01000036010000270100000c010000160000000000000044009a00f8014a
01c0022702ac034c03d70484052e056905df065206cf074407d1080e088a
090e095009ce09f50a290a640ab5000000010000001c016c003100000000
00010000002f0029000001613dbb000000000000001e016e000100000000
0000002700000001000000000001000d0027000100000000000200070034
0001000000000003000d003b0001000000000004000d0048000100000000
0005000c00550001000000000006000d00610001000000000007002c006e
0003000104090000004e009a0003000104090001001a00e8000300010409
0002000e01020003000104090003001a01100003000104090004001a012a
0003000104090005001801440003000104090006001a015c000300010409
000700580176000300010409000d02aa01ce000300010409000e00520478
0003000108040000008204ca00030001080400010012054c000300010804
00020004055e000300010804000300120562000300010804000400120574
00030001080400050018058600030001080400060012059e000300010804
0007005805b00003000108040008003e06080003000108040009003e0646
000300010804000b00380684000300010804000c003806bca920436f7079
7269676874205a484f4e47594920456c656374726f6e696320436f2e2032
3030315242434453562b53696d53756e526567756c61725242434453562b
53696d53756e5242434453562b53696d53756e56657273696f6e20352e30
345242434453562b53696d53756e54726164656d61726b206f66205a484f
4e47594920456c656374726f6e696320436f2e2c204265696a696e6700a9
00200043006f00700079007200690067006800740020005a0048004f004e
00470059004900200045006c0065006300740072006f006e006900630020
0043006f002e00200032003000300031005200420043004400530056002b
00530069006d00530075006e0052006500670075006c0061007200520042
0043004400530056002b00530069006d00530075006e0052004200430044
00530056002b00530069006d00530075006e00560065007200730069006f
006e00200035002e00300034005200420043004400530056002b00530069
006d00530075006e00540072006100640065006d00610072006b0020006f
00660020005a0048004f004e00470059004900200045006c006500630074
0072006f006e0069006300200043006f002e002c0020004200650069006a
0069006e00670059006f00750020006d0061007900200075007300650020
007400680069007300200066006f006e007400200074006f002000640069
00730070006c0061007900200061006e00640020007000720069006e0074
00200063006f006e00740065006e00740020006100730020007000650072
006d0069007400740065006400200062007900200074006800650020006c
006900630065006e007300650020007400650072006d007300200066006f
00720020007400680065002000700072006f006400750063007400200069
006e0020007700680069006300680020007400680069007300200066006f
006e007400200069007300200069006e0063006c0075006400650064002e
00200059006f00750020006d006100790020006f006e006c007900200028
0069002900200065006d0062006500640020007400680069007300200066
006f006e007400200069006e00200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
002000740068006500200065006d00620065006400640069006e00670020
007200650073007400720069006300740069006f006e007300200069006e
0063006c007500640065006400200069006e002000740068006900730020
0066006f006e0074003b00200061006e0064002000280069006900290020
00740065006d0070006f0072006100720069006c007900200064006f0077
006e006c006f006100640020007400680069007300200066006f006e0074
00200074006f002000610020007000720069006e0074006500720020006f
00720020006f00740068006500720020006f007500740070007500740020
00640065007600690063006500200074006f002000680065006c00700020
007000720069006e007400200063006f006e00740065006e0074002e0068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f0066006f006e0074007300a900200043006f0070
0079007200690067006800740020005a0048004f004e0047005900490020
0045006c0065006300740072006f006e0069006300200043006f002e0020
0032003000300031000d000a5b574f536570636e753153174eac4e2d6613
4e2d680775355b504fe1606f6280672f67099650516c53f863d04f9b3002
005200420043004400530056002b5b8b4f535e3889c40052004200430044
00530056002b5b8b4f53005200420043004400530056002b5b8b4f530056
0065007200730069006f006e00200035002e003000340052004200430044
00530056002b5b8b4f5300540072006100640065006d00610072006b0020
006f00660020005a0048004f004e00470059004900200045006c00650063
00740072006f006e0069006300200043006f002e002c0020004200650069
006a0069006e0067004200650069006a0069006e00670020005a0068006f
006e00670059006900200045006c0065006300740072006f006e00690063
007300200043006f002e004200650069006a0069006e00670020005a0068
006f006e00670059006900200045006c0065006300740072006f006e0069
0063007300200043006f002e0068007400740070003a002f002f00770077
0077002e007a0068006f006e006700790069006300740073002e0063006f
006d002e0063006e0068007400740070003a002f002f007700770077002e
007a0068006f006e006700790069006300740073002e0063006f006d002e
0063006e0000411a01110110003200280110010e00280028010f010e0028
0028010c010d00460028010d010e00280028010e010d00180028010c010d
b346285001b801ff858d001db0324b5258b0801d59b801064568b8010623
44b801044568b801042344b801054568b801044560b801052344b8010245
68b801044560b801022344b801034568b801024560b801032344b8010045
68b801044560b801002344b801014568b801004560b801012344012b2b2b
2b2b2b2b000000>
[5483 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2652 13 <0003000cffe900f200ce0005001d00220000371e01062627073337172306
0716171506072627060727363726272322073716173637710e1111060b5c
ba10163e0d1f284113033d1f2f4301412a1d0c1b0d0b390e1d1a0bce0914
162011311016412b240504030c12222b0d03132b2b4003033a27273a>LLIAAA+SimSun AddT42Char 

1 0 0 <> LLIAAA+SimSun AddT42Char 
LLIAAA+SimSun /CharStrings get begin
/g13 13 def
end
LLIAAA+SimSun /Encoding get
dup 135 /g13 put
pop
end
%ADOEndSubsetFont
/KEVNYZ+SimSun /LLIAAA+SimSun findfont ct_VMDictPut
/KEVNYZ+SimSun*1 
[135{/.notdef}rp /g13 120{/.notdef}rp]
KEVNYZ+SimSun nf
KEVNYZ+SimSun*1 [42.003 0 0 -42.003 0 0 ]msf
381.645 -82.85 mo
(\207)sh
%ADOBeginSubsetFont: NQPBAA+NimbusRomNo9L-Medi Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NQPBAA+NimbusRomNo9L-Medi def
/FontInfo 7 dict dup begin
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 73 /I put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 84 /T put
def
/FontBBox {-168 -341 1000 960} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 461 481 676 696] def
/BlueScale 0.039625 def
/StdHW [33] def
/StdVW [140] def
/StemSnapH [33 44 48 55 66 73] def
/StemSnapV [118 140 148 163 174 178] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/A <1C60D8A8C9B6079F1E726295E14B9D3E37B5679DF68031BFBD1BFE066052
926E25CE0977A152243271BE1D747B37EA89DE114D2E292EBCFA5757AB5F0742
8265AD587191DB5983F8ED99B8DB322C097F8AA32C17CF35304218F0C8E5E2CB
9D3370FBC8175B895A9A7BF3FBEB1A81A06888C0AA48BAA23BD6E670F21106> |-
/C <1C60D8A8C9B6079FED7B811C9CB98FDD2CBB73B766F3FE85D1EE3FD8DDB8
5BC465FE2BC61BAC5B5A2E845BEE1CB687D5EE8D92148AD0E5427DF74A90FB77
64CC177867BD76CAA04E6A69E2891FC8B9E96FF6DA1BBC73DDC3D80086E55449
49DB2A153C2FBD03A3FAF8D79C22F8E0F57F4EB1D994BB49218C5E945433A9F2
5B2828A5C917A6F314FC> |-
/D <1C60D8A8C9B6079F1E72628EE41DA8DA688B90558E5030E4DB406FC0434E
8736F6D1AEB93A1671AB2809052B210583B0B968E459BD7C0A7E7330513140D6
42CFF9FD0B8ADECE1D8966485E526A66F23B586CBAFF6CA5271515B9979D83EB
A70E5DC0FFBBA1A11EF8971DF6C2DBA680CE0E17C23D3DC080DA53EB60BFBE0C
3D50341E6653A25367225B1AD9C42E18023801FF6E5C8199C71CE355A3DE37B9
B9FA4C> |-
/E <1C60D8A8C9B64EDFFABA22AC9670453CAFF5F92F5E2AEE79C1A566D8EA0C
428BF866F5ACF37840A8AE51F43CEBB9E99B6CABE25A671BA8D3681A604AD3C9
A9DAA4102F6C1CCDD0D4167E9273E80F413D5688A244C8D19AA39AF416C83E8E
5483E5EB579329FC663371B28D74637D549B9D157C3E4C9FE49A32D0C8BE0371
D37091C3623EF185A59F90892D5E67D9337E5C9F27C8> |-
/I <1C60D8A8C9B7361F7E0A3182AF0840CF1C57BBC49124C1EC6790FD6C750A
84B54872ED5DCB6E653E4613CDBC21596754FD7C6BA90BB6D8B7A860C20B7641
99AB7357886C5D542D> |-
/L <1C60D8A8C9B64EDF8815C1AD7B5B26AB26BCBC091C6DF6670E570DB96CB8
78368025BC94B0A0316D6CAC89D66B873BF42FCC6DC1F4C21B641B2019AC8042
BD7BF7D80689B7AC6C5CCD65AA4002F886A15F591F633EC8908E1EA20FDB9ACC
98A247C9C84FA457C946> |-
/N <1C60D8A8C9B6079F1E72629B90E3BF572C953D8759DE52ED4DD974525AA8
C32EC86A268D745B9D96F5EC1D9BE242CD92E3F0B73A87037705BD73030DF5A1
C9B2592D4A41D5235E666C1FCD2B7EF6AF2103A544AC1261268AD5C9EDA2F3D0
FA8BABE8410EAA7AEABBA82697A3D6C98A5FC6C6EFCEF9FA> |-
/O <1C60D8A8C9B6FF867A6C34F63CFBA483F20348D2DAD0C454E2872F1EFB83
B828C0BBAF767F3EF27D6397A2DEF68C9F347FD90275688C783EA11450BD3115
A537ED51F320BE134232B37E819BD3E39A17B19174C37C49F8C74729C0F7F969
090CA0774FFE469E38> |-
/R <1C60D8A8C9B6079F1E72629B99242969D4642C44A229881B26D2A75EE081
1E8AA268F6F6CEA5FD57251479BD33194E41D0CEB95BC144A48621AF19F65A26
396B1416B7739BC90BED361C13BB0B05FD9313991E4C41211904C677CF9CC239
6B59923BFF4B5D45E31A7DED39E7A83D051CBEA33398D44D3FA24AE8AFF6B846
67F26954DA62A33CCD5FBB86D6754C9D7E71EFF5A074FE2111058DFA873BB6F1
E2EAB64DCD292A52FC6CABAABBF604EAE0876DC9F9D6906663AE4F9ED5> |-
/S <1C60D8A8C9B7EF32250B3B2C6824AE05A90F8105943800D24B00886F31C7
86673C7547F9513330FA2D791B8362592F2E1A3C22133DF803A1F5BCF5F7FD81
E96AD1914A3B442A908980EFE8F604E39309ED5B2BB9F709727E8E66149ABB29
DB5B95E7D4B89C1CC93D3D5931A97B5FDBEF8437F9886F501241F043CEA25D56
07BEA8DD4A96FD8BE1F131FD3004E40F7851595ECED29E6ACAF1EBDC86CEFD86
B20E72D7F6E8BD1DE1B5016EB02BDA773DA93F765F83E21C041BFBE6F724> |-
/T <1C60D8A8C9B64EDF881B97EC6C740C9E7C27B920CCBA50F1DA7D4E67D1AE
27EDDB3829EA2D3509E3D6DC43353717C70BAA27DA2848B72EF65091FB4CFA81
212B062D0E5D587BD9F343935655E98789F65E8F4977> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KEVNZA+NimbusRomNo9L-Medi /NQPBAA+NimbusRomNo9L-Medi findfont ct_VMDictPut
/KEVNZA+NimbusRomNo9L-Medi*1 
[65{/.notdef}rp /A /.notdef /C /D /E 3{/.notdef}rp /I 
2{/.notdef}rp /L /.notdef /N /O 2{/.notdef}rp /R /S 
/T 171{/.notdef}rp]
KEVNZA+NimbusRomNo9L-Medi nf
KEVNZA+NimbusRomNo9L-Medi*1 [16 0 0 -16 0 0 ]msf
190.903 -50.825 mo
(DOCTORALDISSERTATION)
[11.552 12.448 11.552 10.3841 12.448 11.552 11.552 14.6721 11.552 6.22412 8.896 8.896 
10.6721 10.912 9.23212 10.032 10.6721 6.22412 12.448 0 ]xsh
gsave
226.413 148.893 mo
368.861 148.893 li
368.861 7.17279 li
226.413 7.17279 li
cp
clp
gsave
226.413 148.893 mo
734.242 148.893 li
734.242 7.17241 li
226.413 7.17241 li
cp
clp
399.209 36.3668 mo
399.181 36.4091 399.153 36.4517 399.124 36.4939 cv
399.265 37.0668 399.645 37.4846 399.89 37.9402 cv
400.371 38.8374 400.54 40.4973 400.613 41.5566 cv
400.769 43.8154 399.121 46.8045 398.316 48.3626 cv
396.368 52.1348 393.808 55.0856 392.276 59.2957 cv
392.261 59.6644 392.247 60.033 392.233 60.4017 cv
392.116 62.3562 393.281 61.9082 393.849 62.954 cv
394.954 64.9881 394.968 67.3642 393.679 69.2927 cv
393.385 69.7313 393.118 70.315 392.701 70.6113 cv
391.815 71.241 390.834 70.6584 390.276 69.9733 cv
389.782 69.3675 389.107 68.6956 388.787 67.9313 cv
388.268 66.6913 387.988 65.4582 387.341 64.4003 cv
387.213 64.4003 li
387.199 64.4149 387.184 64.4291 387.17 64.4429 cv
387.173 65.4104 387.091 66.1724 386.958 66.9956 cv
386.798 67.9853 387.066 68.7018 386.958 69.6327 cv
386.802 70.9775 386.865 72.2116 386.873 73.4613 cv
386.879 74.4427 386.753 75.916 387.043 76.8648 cv
387.722 79.0897 392.599 78.9252 394.445 80.1832 cv
395.789 81.0992 395.751 83.2524 396.274 84.9046 cv
396.598 85.9286 397.31 87.9132 397.933 88.6907 cv
398.546 89.4561 399.331 90.767 400.273 91.1582 cv
401.673 91.7387 403.364 91.6906 405.293 91.6688 cv
407.192 91.7114 409.093 91.7536 410.993 91.7962 cv
411.675 91.6954 412.417 91.2361 412.992 90.9879 cv
413.998 90.5545 416.359 90.1709 416.864 89.3716 cv
417.757 87.9551 418.947 85.608 416.651 84.6921 cv
416.348 84.5716 415.823 84.2981 415.417 84.3521 cv
413.935 84.5474 411.744 85.086 410.142 85.4156 cv
408.201 85.8144 406.239 85.9137 404.57 86.1384 cv
402.899 86.3637 401.558 85.6482 401.209 84.437 cv
400.606 82.3499 403.601 80.6073 405.25 79.8848 cv
406.598 79.2943 407.982 79.2808 408.866 78.2689 cv
410.521 76.3722 408.818 73.7645 409.632 70.9945 cv
410.346 68.5602 411.211 66.1571 412.567 64.2726 cv
412.855 63.8731 413.301 63.6644 413.715 63.3795 cv
414.67 62.7235 416.316 60.7877 416.608 59.4657 cv
416.964 57.8553 414.065 55.9839 413.205 55.1694 cv
411.76 53.7996 410.249 52.4249 408.695 51.1708 cv
407.941 50.5608 406.728 49.9142 406.271 49.0439 cv
405.815 48.1757 406.213 46.6155 406.101 45.6826 cv
405.666 42.0755 405.703 36.9685 399.209 36.3668 cv
cp
529.212 35.5537 mo
529.17 35.6105 529.127 35.6672 529.084 35.724 cv
528.999 36.802 528.914 37.8796 528.829 38.9576 cv
528.739 39.6579 528.894 40.4845 528.787 40.9993 cv
528.432 42.6945 529.773 46.5047 527.595 47.6353 cv
525.777 48.5793 522.82 48.3623 520.917 48.8691 cv
520.358 49.0179 519.493 49.1543 519.257 49.6348 cv
518.923 50.6875 519.566 51.7831 519.257 52.9106 cv
518.786 54.6304 517.295 57.4029 518.152 59.1642 cv
518.584 60.0528 519.67 60.2027 520.321 60.8656 cv
520.342 62.5912 518.478 65.2581 517.556 66.3531 cv
516.736 67.3265 515.443 68.2729 515.982 70.2246 cv
516.452 71.9298 517.602 72.5038 519.47 72.8192 cv
521.257 72.8192 li
522.891 73.0199 524.713 71.8803 525.553 73.202 cv
526.805 75.169 526.195 77.9276 526.829 80.7741 cv
526.906 81.1165 526.809 82.0342 526.915 82.4756 cv
527.681 85.6856 527.514 89.1424 528.787 92.0897 cv
529.293 93.2632 529.237 94.7075 529.935 95.6629 cv
530.105 95.6629 li
530.781 94.822 530.572 93.5526 530.785 92.26 cv
531.139 90.1314 531.041 88.1925 531.509 86.0491 cv
531.978 83.9025 532.367 81.6551 533.211 79.8384 cv
533.673 78.8415 534.599 78.0602 534.912 76.9033 cv
535.061 76.3553 534.884 75.8693 534.954 75.4137 cv
535.059 74.7387 534.967 73.705 534.87 73.1165 cv
534.573 71.3299 534.653 69.7826 535.04 68.2674 cv
535.337 67.1029 536.015 65.7504 536.656 64.822 cv
537.673 63.3497 539.49 62.0401 538.996 59.3338 cv
538.496 56.5963 536.981 54.8938 536.018 52.7403 cv
535.374 51.2999 535.113 49.7989 534.529 48.2733 cv
533.853 46.5075 533.698 40.6469 533.678 38.5321 cv
533.523 38.1856 529.703 35.6288 529.212 35.5537 cv
cp
509.856 35.7669 mo
507.078 37.3053 503.896 42.8925 503.092 46.4868 cv
503.078 46.9406 503.064 47.3944 503.049 47.8479 cv
502.461 50.5085 502.68 53.7947 501.305 55.6755 cv
500.92 56.203 497.834 57.1311 497.052 57.505 cv
493.951 58.9852 489.927 61.6618 489.948 66.0554 cv
490.089 66.2253 490.231 66.3953 490.373 66.566 cv
492.665 66.622 494.094 64.9376 496.137 64.6589 cv
497.018 64.5384 498.299 64.9732 497.86 65.2474 cv
497.815 66.1956 497.018 67.0689 496.711 67.8845 cv
496.046 69.6559 495.408 71.2849 494.584 72.9469 cv
494.062 73.9986 493.194 75.242 492.925 76.4349 cv
492.463 78.4884 492.963 80.9801 493.776 82.4756 cv
495.406 82.7937 495.864 81.6617 496.669 81.0293 cv
498.105 79.8994 499.261 78.8359 500.795 77.8812 cv
501.204 77.6275 502.64 76.1708 503.135 76.4349 cv
504.527 76.9137 504.556 82.515 503.687 83.6671 cv
503.192 84.3251 502.344 84.2002 501.646 84.6024 cv
501.632 84.6312 501.617 84.6592 501.603 84.6879 cv
501.634 85.9636 504.1 88.3386 505.347 88.3892 cv
507.736 87.0945 508.494 83.7058 507.729 80.1784 cv
507.644 78.7324 507.559 77.2858 507.474 75.8391 cv
507.133 71.5432 li
507.342 70.6649 509.09 68.7918 509.643 68.0123 cv
510.787 66.4022 511.808 64.5301 512.749 62.7796 cv
513.531 61.3236 514.161 59.7094 514.621 57.9726 cv
514.762 57.4385 514.998 56.2179 514.663 55.8884 cv
513.676 56.2588 513.047 57.6781 512.494 58.5262 cv
511.982 59.3096 511.312 60.2061 510.792 60.993 cv
510.142 61.9761 509.794 63.0184 509.048 63.8856 cv
508.553 64.4602 506.367 65.4575 505.517 64.5236 cv
504.391 63.2884 505.758 60.3083 505.559 58.8235 cv
505.314 56.9888 504.752 55.1482 504.581 52.9532 cv
504.652 52.542 504.723 52.1304 504.794 51.7194 cv
504.767 51.0974 504.62 50.0627 504.879 49.4223 cv
505.144 48.7687 505.915 48.1484 506.367 47.6353 cv
507.962 45.8294 509.997 43.6364 511.09 41.4247 cv
511.947 39.689 512.936 35.7687 509.856 35.7669 cv
cp
726.683 34.312 mo
725.818 35.3148 725.825 37.1834 725.108 38.3106 cv
724.277 39.6184 723.526 41.0097 722.643 42.3092 cv
722.259 42.8748 721.639 43.401 721.279 43.9684 cv
720.878 44.6077 719.628 46.6062 720.092 47.5419 cv
720.94 47.5786 721.612 47.6959 722.384 47.4141 cv
723.381 47.0527 724.007 46.0734 725.195 45.7979 cv
727.912 45.1654 731.799 45.8851 733.364 43.671 cv
733.575 43.3681 734.337 41.9637 734.212 41.4586 cv
734.115 41.1893 734.015 40.9197 733.915 40.6503 cv
733.104 37.5833 731.917 36.8137 729.449 35.3754 cv
728.58 34.8721 728.026 34.2988 726.683 34.312 cv
cp
591.66 39.6378 mo
590.867 40.426 590.839 41.9942 590.639 43.2535 cv
590.368 44.9453 590.195 46.9437 589.915 48.5714 cv
589.711 49.7736 589.991 51.448 589.576 52.6548 cv
588.596 55.4989 582.69 55.6395 580.219 57.3769 cv
578.391 58.6608 577.567 60.7894 576.262 62.6096 cv
575.971 63.0132 574.94 63.1385 574.646 62.6518 cv
574.085 61.7175 575.809 59.1008 576.217 58.5262 cv
576.304 58.2845 576.39 58.044 576.473 57.8023 cv
577.581 55.4141 579.838 52.7978 579.153 49.3797 cv
579.153 47.4224 li
578.993 46.8021 578.571 45.9325 578.131 45.5507 cv
577.366 44.8812 574.877 44.4551 573.922 45.2533 cv
573.147 45.8986 571.518 51.2383 571.624 52.6981 cv
571.678 53.4323 571.182 55.9157 570.774 56.1857 cv
569.731 56.8774 564.646 56.2695 564.605 57.8449 cv
566.258 59.0693 567.816 59.9991 568.604 62.0993 cv
569.048 63.2819 569.196 65.0466 568.902 66.3105 cv
568.816 66.7075 568.732 67.1046 568.647 67.502 cv
568.682 68.4072 567.967 69.4361 567.668 70.1814 cv
566.339 73.4966 563.339 76.859 559.543 77.6261 cv
558.702 80.2043 560.05 83.0218 561.798 84.1773 cv
563.202 84.1804 564.354 83.5224 565.371 83.1568 cv
565.96 82.9439 566.545 82.3191 567.243 82.1782 cv
568.401 81.9435 569.763 84.1766 571.241 83.9219 cv
572.769 82.8397 573.205 80.4262 573.368 78.1792 cv
573.448 77.111 573.081 76.0268 573.41 74.946 cv
574.078 72.7658 575.383 71.3642 576.601 69.7563 cv
576.941 69.4444 577.283 69.1325 577.623 68.8206 cv
577.993 68.284 579.111 66.8678 579.665 66.6082 cv
579.665 66.6937 li
580.586 68.8327 578.547 71.1662 579.706 72.8192 cv
579.997 73.2308 580.371 73.1712 580.856 73.4149 cv
582.258 74.1204 586.536 76.5273 586.682 78.1363 cv
586.668 78.1792 586.654 78.2218 586.64 78.2644 cv
585.875 78.568 584.74 79.2361 583.663 79.0301 cv
580.343 78.3949 578.152 75.8897 578.131 71.8835 cv
577.962 71.727 577.792 71.5712 577.623 71.4151 cv
577.522 71.4016 577.425 71.3871 577.325 71.3729 cv
577.058 71.7035 576.653 71.9219 576.39 72.266 cv
575.438 73.4963 574.687 78.5005 574.943 80.3065 cv
575.078 81.2747 574.555 82.307 574.902 83.2416 cv
575.293 84.1922 578.125 84.2964 579.326 84.6457 cv
581.51 85.2806 585.965 85.1874 588.343 84.5602 cv
589.974 84.1302 592.459 83.0557 594.041 83.5819 cv
594.803 85.7566 595.378 87.235 596.977 88.5162 cv
598.154 89.4564 600.317 89.4481 601.872 89.5374 cv
606.483 89.8029 612.752 89.5526 616.418 87.7079 cv
616.418 87.4954 li
615.708 86.3855 614.206 86.703 612.845 86.219 cv
612.264 86.0117 611.63 85.7278 610.972 85.4107 cv
610.038 84.9597 609.114 84.0877 608.252 83.539 cv
607.94 83.3974 607.629 83.2558 607.317 83.1135 cv
606.344 82.4115 605.43 81.6524 604.381 81.0293 cv
603.319 80.3985 602.446 79.2392 601.446 78.5192 cv
601.01 78.2069 600.508 77.9141 600.127 77.5413 cv
598.607 76.0565 599.725 75.1994 600.21 73.67 cv
600.224 73.3862 600.238 73.103 600.255 72.8192 cv
600.383 72.4931 600.508 72.1666 600.636 71.8405 cv
600.65 71.2735 600.664 70.7061 600.677 70.1391 cv
600.851 68.8015 601.162 67.116 601.062 65.8428 cv
600.961 65.3319 600.864 64.822 600.764 64.311 cv
600.605 63.0343 600.795 61.3672 599.957 60.6527 cv
598.49 59.4072 595.533 61.6026 593.661 61.2485 cv
593.678 60.7451 593.411 60.0659 593.661 59.5041 cv
594.519 57.5687 598.711 57.0401 600.553 55.8884 cv
600.878 55.5765 601.204 55.2646 601.529 54.952 cv
601.924 54.5622 603.499 52.2577 603.232 51.5491 cv
603.731 50.0315 604.51 46.9548 603.232 45.8488 cv
602.921 45.8346 602.609 45.8204 602.297 45.8065 cv
601.664 45.9755 601.249 46.8904 600.851 47.3376 cv
599.874 48.426 598.992 49.5777 597.745 50.4009 cv
596.963 50.916 596.191 51.7676 595.063 51.0811 cv
594.211 50.5629 594.595 48.8964 594.426 47.8053 cv
594.031 45.2343 594.827 39.6212 591.66 39.6378 cv
cp
701.672 38.1828 mo
701.385 38.2396 701.105 38.2964 700.817 38.3532 cv
700.343 38.5155 699.689 39.24 699.412 39.6291 cv
699.059 40.1328 698.976 40.7691 698.816 41.4586 cv
698.692 41.9121 698.564 42.3663 698.439 42.8198 cv
698.193 43.6073 698.761 44.5236 698.948 44.9896 cv
699.741 46.9392 699.941 47.5841 701.627 48.6475 cv
701.942 48.8746 702.25 49.1017 702.562 49.3288 cv
702.784 49.5614 702.835 49.9169 703.116 50.0942 cv
703.86 50.5643 706.006 50.063 706.602 49.6262 cv
706.661 46.4542 705.594 39.6402 703.587 38.6083 cv
703.012 38.3172 702.344 38.2607 701.672 38.1828 cv
cp
460.162 86.633 mo
463.425 85.5225 464.418 82.7272 465.402 78.5663 cv
465.829 76.7748 465.067 74.7092 466.082 73.3339 cv
466.882 72.2504 468.622 72.0084 470.081 71.6325 cv
470.785 71.4508 471.551 71.6865 472.038 71.3774 cv
472.62 71.0077 473.105 70.0415 472.591 69.2076 cv
472.266 68.6793 471.551 68.5374 470.975 68.229 cv
470.341 67.8907 469.654 67.2008 469.017 66.9104 cv
467.273 66.5698 li
466.09 66.1758 464.522 65.839 463.317 65.5918 cv
462.821 65.606 462.325 65.6199 461.828 65.6341 cv
460.302 65.5918 458.454 65.4174 458 64.103 cv
457.472 62.575 458.677 59.9289 459.148 58.8277 cv
460.733 55.1251 464.32 48.4769 461.02 44.2366 cv
460.281 43.2875 458.756 42.448 457.489 42.0669 cv
456.741 41.8415 456.007 41.9253 455.32 41.5992 cv
454.888 41.8072 454.767 42.1849 454.427 42.4497 cv
453.187 43.4131 452.213 44.6251 451.151 45.7681 cv
451.165 45.8391 451.179 45.9097 451.193 45.9807 cv
451.964 47.4065 454.674 47.743 455.277 49.4694 cv
455.547 50.2413 455.085 51.8742 454.937 52.7874 cv
454.372 56.273 453.289 59.4525 452.682 62.6567 cv
452.348 64.4187 452.895 67.0575 451.576 67.9313 cv
450.826 68.4283 449.618 68.2656 448.683 68.1441 cv
448.145 68.1725 447.605 68.2009 447.067 68.229 cv
445.282 68.0261 442.182 68.0998 441.451 69.5056 cv
440.97 70.4327 442.047 71.7734 442.133 72.5682 cv
442.148 72.7119 443.716 74.6656 443.961 75.0353 cv
444.854 76.3799 445.198 78.1612 445.45 79.9703 cv
445.45 84.3944 li
445.508 84.7648 445.237 85.4024 445.535 85.6281 cv
446.658 86.2973 448.223 85.9532 449.619 86.3509 cv
453.759 87.2683 457.272 87.6169 460.162 86.633 cv
cp
711.365 39.3744 mo
709.949 40.2713 709.413 44.4094 710.728 45.7124 cv
711.213 46.1849 711.846 46.0454 712.559 46.0104 cv
714.134 46.0104 li
714.709 45.7719 715.228 45.1415 715.54 44.6064 cv
715.734 44.2609 716.215 43.68 716.177 43.1601 cv
716.066 41.7598 712.805 39.5038 711.365 39.3744 cv
cp
648.539 42.3133 mo
646.631 43.0666 645.454 44.4852 644.835 46.4822 cv
644.807 47.6592 644.779 48.8369 644.752 50.0132 cv
644.606 52.7867 644.734 56.2712 644.153 58.7342 cv
643.959 59.5806 644.08 60.4848 643.689 61.2014 cv
643.139 62.2122 642.799 63.1787 641.432 63.6266 cv
640.684 63.8714 639.94 63.7291 639.178 63.7114 cv
638.386 63.7395 637.589 63.7682 636.8 63.7963 cv
634.052 63.0866 632.269 63.798 631.095 65.9235 cv
630.905 66.271 630.275 68.0098 630.458 68.6032 cv
631.064 70.6075 633.83 71.2891 635.945 71.7512 cv
637.205 72.0268 639.293 71.9814 639.476 73.283 cv
639.649 74.5074 638.334 75.2586 637.686 75.7505 cv
636.066 76.9891 634.481 78.2976 635.01 80.9399 cv
635.177 81.7974 635.08 82.7636 635.731 83.2371 cv
636.506 83.7972 640.798 82.514 641.643 82.3437 cv
646.206 81.4235 650.436 77.6652 651.852 73.4533 cv
652.302 72.1251 652.461 70.6241 652.748 69.2844 cv
652.942 68.382 652.52 67.0641 653.046 66.306 cv
653.222 66.0498 654.233 65.453 654.489 65.2851 cv
656.847 63.772 660.115 63.42 662.957 62.4777 cv
664.206 62.0633 665.657 62.226 666.702 61.542 cv
667.474 61.0345 668.243 59.7558 667.98 58.3936 cv
667.509 58.1149 667.035 57.6711 666.488 57.4579 cv
664.878 56.8303 660.97 56.3567 659.253 57.1605 cv
657.792 57.8466 656.864 58.9959 655.556 59.7977 cv
655.161 60.0382 654.621 60.5772 653.939 60.2653 cv
653.991 59.0541 653.586 56.9483 653.814 55.8835 cv
653.939 55.2822 655.119 48.8144 654.704 47.716 cv
654.472 47.2937 653.807 46.9956 653.517 46.5677 cv
652.236 44.7234 651.682 42.2877 648.539 42.3133 cv
cp
405.675 52.4467 mo
407.559 52.4381 411.404 55.9725 410.61 58.5726 cv
410.153 60.067 409.215 61.2363 408.611 62.4864 cv
407.816 64.1303 406.382 65.6995 404.101 64.9538 cv
403.931 63.7911 403.761 62.6279 403.591 61.4652 cv
403.254 59.0998 403.617 56.3322 404.229 54.4036 cv
404.387 53.9069 404.405 53.2848 404.697 52.9148 cv
405.675 52.4467 li
cp
525.128 53.8463 mo
527.807 54.1949 527.169 57.7539 524.915 58.2704 cv
523.81 57.8023 li
523.117 57.362 522.481 55.7959 523.043 54.8672 cv
523.497 54.1188 524.377 54.314 525.128 53.8463 cv
cp
714.598 52.3062 mo
713.356 52.3775 712.106 52.4481 710.856 52.5191 cv
706.775 53.5084 702.572 54.5719 698.775 55.8371 cv
697.435 56.284 695.164 56.7257 694.396 57.6666 cv
693.693 58.5238 693.634 59.9261 693.205 61.0698 cv
692.741 62.3098 691.325 66.1897 692.225 67.5359 cv
692.741 68.303 694.701 69.5617 696.012 69.0245 cv
697.864 68.265 698.013 65.6237 699.671 64.7278 cv
700.679 64.1819 701.998 64.3809 703.157 63.9624 cv
705.484 63.1233 707.606 61.7134 709.835 60.6866 cv
711.216 60.051 715.034 58.3562 716.346 59.5806 cv
715.907 61.4458 713.314 62.0201 711.711 62.7712 cv
708.963 64.0552 706.848 64.9331 705.414 67.5782 cv
705.227 67.9188 704.871 68.4425 704.732 68.8119 cv
704.383 69.731 704.646 72.5097 705.196 73.1086 cv
706.46 74.4707 707.536 72.86 708.132 72.0877 cv
709.388 70.4784 711.846 66.0335 714.647 66.8124 cv
715.28 68.2168 715.225 69.6275 714.519 71.0243 cv
713.279 73.4651 708.724 77.876 705.84 78.4257 cv
703.86 78.803 701.264 78.0259 699.627 77.6174 cv
698.643 77.3727 697.83 76.6613 696.947 77.4049 cv
696.061 78.1491 696.019 80.0745 696.649 81.1483 cv
697.532 82.6459 699.104 83.6937 700.353 84.8496 cv
701.288 85.7171 702.077 87.2655 702.562 88.3805 cv
703.379 90.263 703.867 92.6602 705.878 93.3577 cv
706.664 93.6277 708.706 93.3051 709.413 93.3577 cv
710.489 93.3858 711.566 93.4138 712.646 93.4426 cv
713.03 93.5474 714.439 93.8084 714.813 93.6977 cv
716.198 93.2902 717.385 92.215 718.091 91.1031 cv
718.16 90.7912 718.233 90.4786 718.302 90.1667 cv
719.043 88.1226 718.863 84.5692 720.469 83.3607 cv
722.172 82.0813 724.661 82.5749 726.981 82.0415 cv
728.466 81.7012 730.245 81.6306 729.705 79.4895 cv
729.231 77.6181 726.278 75.2493 724.26 75.1077 cv
722.792 75.0052 720.791 76.1528 719.663 76.5966 cv
718.88 76.9043 718.205 77.0127 718.005 76.1289 cv
717.575 74.2277 719.029 71.2777 719.746 70.0457 cv
720.023 69.5714 720.497 69.0625 720.68 68.5142 cv
720.861 67.9991 720.649 67.6252 720.729 67.0679 cv
720.94 65.6192 720.861 64.3127 721.491 63.2389 cv
722.581 61.3883 725.562 60.3003 724.98 57.2834 cv
724.873 56.723 725.039 56.1331 724.769 55.7516 cv
724.18 54.9177 722.38 53.9934 721.411 53.4977 cv
719.909 52.733 717.987 52.8189 716.263 52.3488 cv
715.706 52.3346 715.156 52.3207 714.598 52.3062 cv
cp
582.216 59.8447 mo
582.614 60.0005 583.012 60.1563 583.407 60.3124 cv
583.649 60.5817 583.888 60.8511 584.131 61.1207 cv
584.726 61.4579 585.91 61.3603 586.131 62.0564 cv
586.104 62.2129 586.073 62.3687 586.045 62.5248 cv
586.086 62.7647 586.208 63.2431 586.045 63.6304 cv
585.619 64.6509 584.747 65.6697 583.324 65.2048 cv
582.954 65.0058 582.587 64.8074 582.216 64.6091 cv
581.583 64.3969 580.935 64.9234 580.558 64.3965 cv
580.368 63.7197 581.808 60.247 582.216 59.8447 cv
cp
525.766 66.4379 mo
525.019 66.9533 523.239 67.7232 522.278 66.9488 cv
521.074 65.9799 523.153 63.0326 523.681 62.3545 cv
527.364 61.7715 527.859 65.011 525.766 66.4379 cv
cp
502.242 67.629 mo
504.793 67.9354 502.363 71.7183 501.178 69.9688 cv
500.423 68.8154 501.752 68.1171 502.242 67.629 cv
cp
594.512 67.8419 mo
594.831 67.8357 595.031 67.8994 595.149 68.0971 cv
595.966 69.7102 593.83 73.3976 592.3 73.1165 cv
592.148 72.5633 592.255 72.626 591.705 72.7766 cv
590.684 70.3465 592.816 68.591 594.512 67.8419 cv
cp
403.973 70.1575 mo
403.523 70.325 403.073 70.3534 402.668 70.1883 cv
402.414 70.0851 402.301 69.9608 402.259 69.8033 cv
402.088 69.1615 402.448 69.1214 402.947 68.957 cv
403.821 68.6686 404.273 68.8147 403.973 70.1575 cv
cp
457.702 73.2062 mo
459.221 75.3192 457.359 79.0284 456.383 80.5232 cv
455.861 81.3228 454.912 82.0165 454.001 82.4378 cv
451.437 81.4381 449.337 79.7443 448.258 77.2903 cv
447.695 76.0112 447.677 73.9674 448.768 73.2062 cv
449.586 72.6357 451.299 72.6603 452.257 72.3979 cv
453.43 72.0766 457.057 72.3089 457.702 73.2062 cv
cp
403.974 73.6406 mo
404.095 73.8653 404.105 74.0017 403.859 74.1336 cv
403.483 74.335 403.448 74.199 403.322 73.9037 cv
403.217 73.6527 403.291 73.5759 403.453 73.4752 cv
403.766 73.2796 403.795 73.3066 403.974 73.6406 cv
cp
656.452 76.6859 mo
655.867 76.7004 655.286 76.7146 654.704 76.7284 cv
653.849 76.8676 652.918 77.1172 652.284 77.4942 cv
651.602 80.7534 654.472 80.5889 656.279 81.7912 cv
657.02 82.2834 657.553 83.3022 658.152 83.9603 cv
659.021 84.9202 660.651 85.6641 661.977 86.1297 cv
663.033 86.5008 666.74 86.4032 667.17 85.7043 cv
667.595 84.6485 666.896 82.8356 666.661 82.2163 cv
665.588 79.4452 663.635 77.9719 660.703 77.0691 cv
659.869 76.8115 658.709 76.8527 658.02 76.7284 cv
657.484 76.6305 656.823 76.8095 656.452 76.6859 cv
cp
710.219 82.5524 mo
713.234 82.4762 713.698 85.2612 711.836 86.6358 cv
710.264 87.7958 705.21 87.3725 705.581 84.8496 cv
706.796 83.4106 708.357 83.3389 710.219 82.5524 cv
/1 
[/DeviceCMYK] /CSA add_res
.701656 .63711 .639216 .644312 cmyk
f
297.257 30.0267 mo
270.809 30.0267 249.237 51.5976 249.237 78.0463 cv
249.237 104.494 270.809 126.066 297.257 126.066 cv
323.705 126.066 345.276 104.494 345.276 78.0463 cv
345.276 51.5976 323.705 30.0267 297.257 30.0267 cv
cp
297.257 7.18579 mo
336.285 7.18579 368.117 39.0175 368.117 78.0463 cv
368.117 117.075 336.285 148.907 297.257 148.907 cv
258.228 148.907 226.396 117.075 226.396 78.0463 cv
226.396 39.0175 258.228 7.18579 297.257 7.18579 cv
.961456 .679316 .0831311 .00936904 cmyk
f
229.504 76.4429 mo
229.516 76.4557 229.527 76.4688 229.538 76.482 cv
229.736 76.4872 229.905 76.401 230.074 76.3626 cv
230.407 76.2871 230.959 76.3799 231.308 76.4505 cv
232.052 76.6004 232.873 77.3997 233.305 77.7988 cv
234.352 78.7643 235.078 79.8544 236.304 80.725 cv
236.422 80.762 236.54 80.7994 236.658 80.8368 cv
237.28 81.048 237.238 80.6319 237.627 80.5408 cv
238.383 80.365 239.153 80.5713 239.662 81.1601 cv
239.778 81.2934 239.943 81.4322 240.002 81.5932 cv
240.127 81.9355 239.851 82.2011 239.58 82.3208 cv
239.339 82.4268 239.063 82.585 238.787 82.6213 cv
238.34 82.6788 237.915 82.659 237.516 82.775 cv
237.512 82.7888 237.508 82.8024 237.504 82.8162 cv
237.515 82.8335 li
237.828 82.9187 238.067 83.0132 238.321 83.1291 cv
238.628 83.269 238.883 83.2461 239.174 83.3638 cv
239.596 83.5338 240 83.6235 240.405 83.7318 cv
240.723 83.817 241.188 83.9887 241.521 83.9793 cv
242.301 83.9582 242.682 82.3655 243.252 81.8805 cv
243.668 81.5267 244.361 81.731 244.942 81.7091 cv
245.302 81.6946 246.007 81.6416 246.314 81.5091 cv
246.617 81.3782 247.11 81.2415 247.321 80.9718 cv
247.633 80.5706 247.768 80.0191 247.932 79.3936 cv
248.115 78.7826 248.298 78.172 248.48 77.5613 cv
248.508 77.3315 248.425 77.0504 248.397 76.8427 cv
248.346 76.4785 248.432 75.681 248.218 75.4466 cv
247.84 75.0315 247.186 74.4382 246.686 75.099 cv
246.62 75.1863 246.485 75.332 246.466 75.4684 cv
246.397 75.9648 246.377 76.7215 246.341 77.2692 cv
246.297 77.9324 246.155 78.5756 246.079 79.1357 cv
246.003 79.6958 245.653 80.0662 245.23 80.0714 cv
244.501 80.0804 244.204 78.9568 244.117 78.3593 cv
244.046 77.8708 244.164 77.4215 243.915 77.0462 cv
243.45 76.3421 242.455 76.661 241.631 76.1511 cv
240.907 75.7041 240.207 75.2102 239.718 74.6044 cv
239.615 74.4752 239.587 74.3125 239.531 74.1533 cv
239.404 73.7864 238.924 73.0819 238.523 72.8697 cv
238.033 72.6111 237.171 73.3827 236.831 73.5887 cv
236.259 73.9338 235.68 74.3004 235.136 74.6909 cv
234.872 74.8813 234.555 75.2157 234.233 75.286 cv
233.911 75.3566 233.442 75.089 233.13 75.0423 cv
231.925 74.8623 230.277 74.3963 229.504 76.4429 cv
cp
235.28 75.7813 mo
235.445 75.1714 236.93 74.2423 237.7 74.7304 cv
238.143 75.0108 238.438 75.4186 238.789 75.7253 cv
239.249 76.1282 239.629 76.7319 239.185 77.4028 cv
238.794 77.3543 238.403 77.3062 238.012 77.2574 cv
237.217 77.1563 236.354 76.7928 235.785 76.4235 cv
235.638 76.3283 235.438 76.267 235.345 76.1396 cv
235.323 76.0205 235.302 75.9011 235.28 75.7813 cv
cp
240.857 77.9072 mo
240.871 78.0678 240.841 78.2156 240.751 78.3319 cv
240.695 78.4046 240.645 78.4306 240.59 78.4299 cv
240.367 78.4282 240.386 78.3084 240.378 78.1318 cv
240.362 77.8241 240.449 77.6908 240.857 77.9072 cv
cp
241.984 78.2166 mo
242.067 78.1973 242.112 78.2066 242.133 78.2977 cv
242.165 78.4368 242.118 78.4368 242.011 78.4507 cv
241.92 78.4628 241.902 78.4316 241.884 78.3703 cv
241.849 78.2523 241.86 78.2447 241.984 78.2166 cv
cp
277.749 15.218 mo
277.744 15.2377 277.74 15.2578 277.735 15.2779 cv
277.839 15.5732 277.943 15.8677 278.047 16.1623 cv
278.106 16.3583 278.244 16.559 278.276 16.7076 cv
278.382 17.197 279.184 18.0472 278.741 18.6018 cv
278.371 19.0653 277.564 19.3554 277.12 19.7133 cv
276.99 19.8182 276.777 19.9556 276.772 20.1107 cv
276.807 20.4282 277.106 20.6421 277.157 20.9762 cv
277.234 21.4864 277.166 22.3951 277.599 22.7596 cv
277.818 22.9441 278.123 22.8559 278.373 22.9549 cv
278.581 23.4087 278.401 24.333 278.286 24.7307 cv
278.184 25.0845 277.954 25.4864 278.325 25.9392 cv
278.65 26.3349 279.021 26.3515 279.553 26.2147 cv
279.71 26.1452 279.867 26.0752 280.025 26.005 cv
280.48 25.8658 280.828 25.351 281.205 25.6017 cv
281.768 25.9748 281.931 26.7755 282.433 27.4533 cv
282.493 27.5354 282.576 27.7891 282.655 27.8937 cv
283.235 28.6521 283.598 29.5854 284.28 30.2154 cv
284.552 30.466 284.707 30.8544 285.004 31.0248 cv
285.019 31.0185 285.034 31.0116 285.049 31.0047 cv
285.128 30.7032 284.924 30.392 284.829 30.025 cv
284.672 29.4206 284.418 28.9197 284.29 28.2983 cv
284.162 27.6756 284.001 27.0359 284.01 26.4564 cv
284.015 26.1382 284.168 25.8229 284.115 25.4798 cv
284.09 25.3178 283.986 25.2098 283.952 25.0814 cv
283.899 24.8906 283.754 24.6282 283.659 24.4842 cv
283.37 24.0467 283.21 23.6278 283.134 23.1823 cv
283.076 22.8389 283.096 22.402 283.156 22.0808 cv
283.252 21.5726 283.579 21.0125 283.13 20.3555 cv
282.676 19.6901 282.076 19.418 281.568 18.9618 cv
281.229 18.6568 280.983 18.2902 280.649 17.9562 cv
280.263 17.5688 279.533 16.0367 279.28 15.48 cv
279.198 15.4073 277.887 15.1802 277.749 15.218 cv
cp
272.656 17.5491 mo
272.103 18.2819 271.918 20.1329 272.128 21.178 cv
272.177 21.2995 272.227 21.421 272.277 21.5425 cv
272.434 22.3155 272.878 23.1581 272.735 23.8175 cv
272.695 24.002 271.989 24.6096 271.826 24.8006 cv
271.18 25.5563 270.43 26.7371 270.952 27.8964 cv
271.01 27.9245 271.067 27.9532 271.125 27.9812 cv
271.737 27.7268 271.917 27.1137 272.424 26.7998 cv
272.644 26.6644 273.033 26.6288 272.949 26.7527 cv
273.049 27.0088 272.941 27.3335 272.955 27.5852 cv
272.987 28.1315 273.01 28.6369 272.988 29.1738 cv
272.974 29.5123 272.89 29.9437 272.959 30.2905 cv
273.079 30.8877 273.503 31.4879 273.894 31.7877 cv
274.363 31.6801 274.35 31.327 274.489 31.0656 cv
274.736 30.5976 274.917 30.1811 275.21 29.7481 cv
275.288 29.6328 275.497 29.0789 275.658 29.0907 cv
276.083 29.054 276.749 30.5311 276.655 30.9375 cv
276.601 31.1705 276.362 31.237 276.225 31.4249 cv
276.224 31.4346 276.224 31.4433 276.224 31.4526 cv
276.382 31.786 277.313 32.1245 277.648 31.9913 cv
278.128 31.3682 277.93 30.3833 277.313 29.5407 cv
277.121 29.1686 276.928 28.7958 276.736 28.4233 cv
276.538 28.0581 276.339 27.6929 276.141 27.3277 cv
276.093 27.0708 276.335 26.3702 276.389 26.0991 cv
276.503 25.539 276.552 24.9239 276.596 24.3506 cv
276.631 23.8736 276.608 23.373 276.526 22.86 cv
276.5 22.7018 276.419 22.3515 276.292 22.3041 cv
276.075 22.5176 276.075 22.9666 276.028 23.2564 cv
275.985 23.5233 275.913 23.8393 275.868 24.1083 cv
275.812 24.4444 275.843 24.7612 275.747 25.0783 cv
275.684 25.288 275.223 25.8083 274.888 25.6616 cv
274.446 25.4674 274.457 24.5185 274.23 24.1495 cv
273.949 23.6936 273.585 23.273 273.282 22.7125 cv
273.252 22.5952 273.222 22.4782 273.193 22.3612 cv
273.113 22.2002 272.952 21.9441 272.945 21.744 cv
272.939 21.5404 273.069 21.2853 273.129 21.0966 cv
273.338 20.4316 273.619 19.6129 273.647 18.8998 cv
273.67 18.3397 273.471 17.1873 272.656 17.5491 cv
cp
278.819 20.5341 mo
279.568 20.3112 279.818 21.3279 279.282 21.7291 cv
279.166 21.7308 279.05 21.7329 278.935 21.7353 cv
278.7 21.6996 278.348 21.3604 278.388 21.0489 cv
278.419 20.7979 278.675 20.7456 278.819 20.5341 cv
cp
280.467 23.7881 mo
280.33 24.0124 279.95 24.4247 279.605 24.333 cv
279.173 24.2184 279.376 23.1948 279.436 22.9535 cv
280.341 22.3664 280.853 23.165 280.467 23.7881 cv
cp
274.388 26.868 mo
275.098 26.6488 274.9 27.9349 274.381 27.6115 cv
274.046 27.3948 274.316 27.0542 274.388 26.868 cv
cp
366.853 79.8419 mo
366.486 79.6681 365.932 79.8218 365.54 79.7014 cv
365.085 79.5622 364.611 79.4521 364.154 79.2967 cv
363.955 79.2292 363.749 79.0886 363.551 79.0284 cv
363.329 78.9609 362.635 78.7529 362.396 78.9665 cv
362.454 79.2223 362.474 79.4296 362.621 79.6373 cv
362.809 79.9032 363.15 80.0084 363.328 80.3373 cv
363.737 81.0902 363.841 82.3001 364.625 82.5839 cv
364.731 82.6223 365.209 82.7331 365.349 82.6556 cv
365.421 82.604 365.492 82.5524 365.564 82.5015 cv
366.408 82.0124 366.538 81.5973 366.763 80.7482 cv
366.842 80.4508 366.966 80.2386 366.853 79.8419 cv
cp
363.667 72.7465 mo
363.628 72.6672 363.587 72.5876 363.547 72.5083 cv
363.461 72.3806 363.193 72.2466 363.055 72.1968 cv
362.877 72.1317 362.682 72.1601 362.464 72.1691 cv
362.319 72.168 362.175 72.1673 362.03 72.1663 cv
361.776 72.1576 361.552 72.4007 361.429 72.4948 cv
360.915 72.8881 360.741 73.0002 360.563 73.587 cv
360.521 73.6974 360.48 73.8089 360.438 73.9193 cv
360.387 74.0048 360.286 74.0477 360.256 74.1457 cv
360.178 74.405 360.501 75 360.679 75.1409 cv
361.623 74.8986 363.555 74.0276 363.698 73.3485 cv
363.738 73.1563 363.699 72.9521 363.667 72.7465 cv
cp
364.105 75.717 mo
363.723 75.3697 362.453 75.5473 362.175 76.0451 cv
362.074 76.2251 362.167 76.4027 362.236 76.6111 cv
362.279 76.7662 362.321 76.9223 362.364 77.0777 cv
362.482 77.2283 362.711 77.3315 362.894 77.3793 cv
363.013 77.4094 363.225 77.5046 363.375 77.4502 cv
363.781 77.3035 364.184 76.1528 364.105 75.717 cv
cp
360.537 77.7292 mo
360.169 76.6374 li
359.543 75.5086 358.885 74.3492 358.201 73.3284 cv
357.959 72.968 357.644 72.3304 357.302 72.1795 cv
356.99 72.0413 356.571 72.1369 356.197 72.1036 cv
355.791 72.0669 354.526 71.9631 354.201 72.3404 cv
354.016 72.5561 353.803 73.2394 354.068 73.5839 cv
354.445 74.0706 355.239 73.8992 355.639 74.3177 cv
355.884 74.5722 355.932 74.9789 356.151 75.2887 cv
356.589 75.9091 357.179 76.4228 357.665 77.0009 cv
357.967 77.3585 358.78 78.3503 358.524 78.8387 cv
357.936 78.8612 357.554 78.1398 357.201 77.7247 cv
356.596 77.0158 356.164 76.4609 355.263 76.2514 cv
355.147 76.2244 354.963 76.1621 354.842 76.1504 cv
354.541 76.1213 353.74 76.4269 353.607 76.6388 cv
353.306 77.1221 353.871 77.3107 354.149 77.4257 cv
354.727 77.6645 356.246 78.0328 356.242 78.9242 cv
355.878 79.2268 355.456 79.3254 354.984 79.2292 cv
354.16 79.0616 352.482 78.0709 352.084 77.2616 cv
351.811 76.706 351.829 75.8738 351.817 75.3556 cv
351.81 75.0447 351.954 74.7453 351.662 74.5441 cv
351.369 74.3423 350.795 74.4863 350.528 74.7608 cv
350.156 75.144 349.974 75.6958 349.733 76.159 cv
349.553 76.5066 349.158 76.8676 348.868 77.1023 cv
348.376 77.4983 347.706 77.8376 347.663 78.4915 cv
347.647 78.7446 347.909 79.3237 347.951 79.5369 cv
348.031 79.8585 348.11 80.1801 348.189 80.5017 cv
348.189 80.6249 348.228 81.0629 348.291 81.1657 cv
348.524 81.5423 348.939 81.8068 349.326 81.9248 cv
349.424 81.9203 349.523 81.9155 349.621 81.9117 cv
350.287 81.9636 351.325 81.6216 351.815 81.9992 cv
352.332 82.3994 352.388 83.1755 352.736 83.8204 cv
352.958 84.2324 353.123 84.7534 353.714 84.419 cv
354.23 84.1268 354.691 83.0592 354.568 82.4486 cv
354.479 82.0062 353.976 81.5073 353.753 81.2086 cv
353.597 81.0019 353.51 80.8094 353.756 80.6789 cv
354.284 80.3975 355.277 80.5882 355.701 80.7001 cv
355.864 80.7433 356.053 80.8423 356.231 80.8527 cv
356.397 80.8617 356.491 80.7683 356.663 80.7471 cv
357.109 80.6921 357.489 80.5626 357.859 80.6616 cv
358.496 80.8337 359.061 81.6278 359.908 81.2103 cv
360.065 81.1324 360.254 81.1335 360.345 81.0223 cv
360.543 80.7793 360.671 80.1715 360.739 79.8433 cv
360.843 79.3365 360.661 78.774 360.66 78.2243 cv
360.618 78.0591 360.578 77.894 360.537 77.7292 cv
cp
351.218 78.8962 mo
351.486 79.7824 350.699 80.1476 350.14 79.7079 cv
349.669 79.3368 349.381 77.804 350.16 77.7095 cv
350.685 77.9511 350.833 78.4088 351.218 78.8962 cv
cp
322.93 17.5255 mo
322.597 17.674 322.408 18.1483 322.202 18.5083 cv
321.924 18.9922 321.641 19.5801 321.368 20.0436 cv
321.167 20.3856 321.059 20.9273 320.794 21.2469 cv
320.168 21.9994 318.353 21.3611 317.4 21.6045 cv
316.697 21.7845 316.201 22.3373 315.593 22.7409 cv
315.459 22.8302 315.13 22.7499 315.097 22.5678 cv
315.033 22.2186 315.86 21.6211 316.051 21.4933 cv
316.105 21.4296 316.159 21.3659 316.212 21.3022 cv
316.825 20.7034 317.814 20.1675 318 19.0483 cv
318.075 18.8493 318.15 18.6509 318.225 18.4526 cv
318.248 18.2449 318.219 17.9323 318.131 17.7654 cv
317.974 17.4729 317.266 17.0561 316.883 17.1891 cv
316.573 17.2957 315.461 18.733 315.325 19.1892 cv
315.257 19.4191 314.819 20.118 314.664 20.153 cv
314.267 20.243 312.79 19.472 312.595 19.9466 cv
312.957 20.5102 313.324 20.9727 313.322 21.7024 cv
313.321 22.1137 313.162 22.6679 312.927 23.0182 cv
312.855 23.1297 312.783 23.2408 312.712 23.3512 cv
312.618 23.6309 312.282 23.8622 312.104 24.0543 cv
311.318 24.91 310.017 25.5871 308.773 25.3829 cv
308.22 26.0704 308.306 27.0833 308.704 27.6368 cv
309.131 27.7995 309.557 27.7323 309.909 27.7382 cv
310.113 27.7417 310.363 27.6188 310.592 27.6562 cv
310.971 27.7188 311.128 28.5552 311.608 28.6487 cv
312.198 28.495 312.608 27.8109 312.917 27.1459 cv
313.064 26.8295 313.078 26.4574 313.303 26.1666 cv
313.758 25.5802 314.317 25.304 314.872 24.9554 cv
315.012 24.8993 315.152 24.8436 315.291 24.7882 cv
315.466 24.6677 315.97 24.3655 316.168 24.3506 cv
316.165 24.3593 316.161 24.3679 316.158 24.3766 cv
316.192 25.1337 315.302 25.6089 315.465 26.2452 cv
315.505 26.4041 315.626 26.4294 315.745 26.5595 cv
316.09 26.9355 317.116 28.1619 316.975 28.6687 cv
316.965 28.6802 316.956 28.6909 316.947 28.7023 cv
316.678 28.7065 316.256 28.7788 315.952 28.5922 cv
315.015 28.0162 314.638 27.0009 315.094 25.7793 cv
314.992 25.5781 li
314.963 25.5619 314.935 25.5466 314.906 25.5304 cv
314.786 25.6003 314.639 25.6204 314.519 25.6944 cv
314.088 25.9593 313.281 27.3959 313.151 27.975 cv
313.081 28.2852 312.802 28.5389 312.8 28.8629 cv
312.81 29.1977 313.659 29.556 313.984 29.8007 cv
314.575 30.2459 315.943 30.7312 316.739 30.815 cv
317.284 30.8718 318.165 30.8316 318.586 31.1743 cv
318.567 31.9241 318.571 32.4402 318.911 33.0145 cv
319.159 33.4365 319.82 33.6837 320.281 33.8897 cv
321.654 34.5024 323.591 35.1497 324.92 35.0109 cv
324.929 34.9898 324.937 34.968 324.945 34.9462 cv
324.856 34.5266 324.363 34.4498 324.004 34.1458 cv
323.851 34.015 323.691 33.8564 323.528 33.6837 cv
323.295 33.4383 323.115 33.0661 322.916 32.8003 cv
322.837 32.721 322.758 32.6421 322.68 32.5628 cv
322.465 32.2367 322.274 31.9002 322.026 31.5901 cv
321.776 31.2754 321.644 30.8219 321.423 30.4875 cv
321.327 30.3425 321.207 30.1946 321.134 30.0375 cv
320.844 29.4106 321.282 29.2783 321.607 28.8692 cv
321.643 28.7843 321.681 28.7002 321.718 28.6151 cv
321.794 28.5306 321.871 28.4461 321.947 28.3617 cv
322.017 28.1907 322.087 28.0197 322.156 27.8487 cv
322.362 27.4613 322.652 26.9843 322.768 26.5851 cv
322.854 26.0849 li
322.953 25.6778 323.204 25.1928 323.03 24.8778 cv
322.728 24.3298 321.575 24.6573 321.046 24.3333 cv
321.109 24.182 321.106 23.9446 321.247 23.8026 cv
321.732 23.3124 323.068 23.6351 323.761 23.497 cv
323.896 23.4395 324.031 23.3824 324.166 23.3249 cv
324.331 23.2515 325.077 22.7316 325.077 22.4851 cv
325.404 22.0808 325.997 21.2347 325.734 20.7505 cv
325.641 20.7103 325.548 20.6701 325.455 20.6293 cv
325.243 20.6082 325.011 20.8387 324.838 20.9287 cv
324.416 21.1475 324.014 21.3964 323.539 21.5027 cv
323.242 21.5695 322.909 21.7398 322.645 21.4009 cv
322.446 21.1454 322.754 20.6816 322.829 20.3302 cv
323.005 19.5022 323.895 17.8855 322.93 17.5255 cv
cp
317.725 22.5862 mo
317.828 22.6797 317.93 22.7731 318.034 22.8655 cv
318.076 22.9756 318.118 23.0854 318.16 23.1954 cv
318.302 23.3668 318.674 23.4734 318.661 23.7109 cv
318.634 23.7549 318.607 23.7992 318.581 23.8438 cv
318.566 23.9214 318.547 24.0806 318.453 24.18 cv
318.206 24.4413 317.822 24.6511 317.443 24.3451 cv
317.353 24.2423 317.265 24.1391 317.175 24.0366 cv
317.007 23.8989 316.749 23.9844 316.695 23.7801 cv
316.715 23.5524 317.554 22.6617 317.725 22.5862 cv
cp
320.544 26.438 mo
320.643 26.4733 320.696 26.5159 320.708 26.5893 cv
320.771 27.1747 319.696 28.0501 319.263 27.7888 cv
319.28 27.6022 319.306 27.6337 319.12 27.616 cv
319.09 26.7589 319.941 26.4706 320.544 26.438 cv
cp
258.241 48.1089 mo
258.439 46.8842 257.718 46.0966 256.562 45.0806 cv
256.064 44.6427 255.279 44.5354 255.013 43.9812 cv
254.803 43.5436 255.02 42.9496 255.147 42.4224 cv
255.208 42.1676 255.412 41.9644 255.396 41.7574 cv
255.377 41.5095 255.152 41.1928 254.8 41.215 cv
254.577 41.2295 254.411 41.4323 254.216 41.5635 cv
254.001 41.7079 253.666 41.81 253.466 41.963 cv
253.332 42.1288 253.198 42.2943 253.063 42.4601 cv
252.738 42.7699 252.366 43.2113 252.084 43.553 cv
252.005 43.7129 251.926 43.8728 251.846 44.0335 cv
251.575 44.5115 251.208 45.0692 250.713 44.9917 cv
250.138 44.902 249.5 44.0715 249.23 43.7358 cv
248.321 42.6069 246.813 40.3443 244.907 40.6774 cv
244.481 40.7518 243.956 41.0952 243.621 41.4334 cv
243.424 41.6335 243.326 41.8806 243.106 42.044 cv
243.1 42.2164 243.199 42.3185 243.226 42.4715 cv
243.323 43.0282 243.543 43.5426 243.727 44.0736 cv
243.753 44.0809 243.777 44.0885 243.802 44.0958 cv
244.386 44.0913 244.951 43.2868 245.601 43.3868 cv
245.892 43.4311 246.333 43.8538 246.598 44.0549 cv
247.611 44.8234 248.439 45.7044 249.355 46.4383 cv
249.859 46.8419 250.791 47.1137 250.846 47.6804 cv
250.877 48.0033 250.621 48.3592 250.425 48.6361 cv
250.343 48.8123 250.261 48.9882 250.179 49.164 cv
249.813 49.6975 249.313 50.6955 249.636 51.1649 cv
249.85 51.4747 250.458 51.3587 250.725 51.4661 cv
250.773 51.4855 251.659 51.3169 251.818 51.3009 cv
252.397 51.2442 253.021 51.4356 253.639 51.661 cv
254.107 51.9098 254.576 52.1591 255.045 52.408 cv
255.173 52.452 255.33 52.6462 255.452 52.589 cv
255.854 52.3453 256.009 51.7894 256.371 51.4131 cv
257.362 50.2517 258.066 49.1935 258.241 48.1089 cv
cp
253.557 46.6242 mo
254.485 46.4978 255.35 47.7157 255.66 48.2785 cv
255.827 48.5794 255.887 48.9986 255.867 49.3593 cv
255.116 50.0052 254.223 50.387 253.261 50.3157 cv
252.759 50.2787 252.107 49.9391 252.049 49.4638 cv
252.006 49.1073 252.302 48.5669 252.381 48.2183 cv
252.477 47.7911 253.163 46.6772 253.557 46.6242 cv
cp
345.171 52.0282 mo
345.026 51.8766 344.882 51.724 344.737 51.5713 cv
344.492 51.3757 344.201 51.1884 343.944 51.1081 cv
342.907 51.716 343.647 52.4447 343.763 53.2201 cv
343.811 53.5382 343.667 53.9277 343.636 54.2468 cv
343.59 54.7124 343.786 55.33 343.983 55.7977 cv
344.139 56.1702 345.064 57.1387 345.355 57.084 cv
345.741 56.9432 346.057 56.3159 346.165 56.1023 cv
346.648 55.1448 346.568 54.2635 346.099 53.2599 cv
345.966 52.9736 345.674 52.6739 345.541 52.4603 cv
345.436 52.291 345.229 52.1577 345.171 52.0282 cv
cp
352.456 41.5795 mo
351.792 41.251 351.128 41.2804 350.443 41.5992 cv
350.121 41.8765 349.799 42.1541 349.477 42.4321 cv
348.7 43.0663 347.798 43.9438 346.998 44.3859 cv
346.723 44.5378 346.51 44.7895 346.224 44.8587 cv
345.82 44.9563 345.48 45.1007 345.029 44.8428 cv
344.781 44.7012 344.639 44.4679 344.459 44.2595 cv
343.859 43.6423 li
343.384 42.736 342.761 42.4303 341.908 42.6315 cv
341.769 42.6644 341.151 42.9181 341.036 43.1102 cv
340.647 43.7586 341.134 44.6638 341.523 45.3427 cv
341.755 45.7473 342.272 46.2943 341.969 46.6588 cv
341.683 47.0022 341.163 46.8315 340.875 46.7786 cv
340.15 46.6446 339.417 46.538 338.836 47.319 cv
338.648 47.5723 338.364 47.779 338.396 48.0691 cv
338.434 48.4122 339.819 49.2513 340.068 49.4361 cv
341.42 50.4341 343.451 50.656 344.923 50.0149 cv
345.387 49.8124 345.827 49.4912 346.256 49.2437 cv
346.544 49.0765 346.795 48.6448 347.125 48.6012 cv
347.237 48.587 347.641 48.7119 347.749 48.741 cv
348.725 49.0048 349.611 49.7941 350.553 50.3275 cv
350.967 50.5619 351.274 50.989 351.711 51.1029 cv
352.034 51.1874 352.563 51.0829 352.863 50.6816 cv
352.824 50.4892 352.828 50.2545 352.752 50.0561 cv
352.53 49.4725 351.71 48.3111 351.08 48.048 cv
350.541 47.8226 350.008 47.8514 349.476 47.6959 cv
349.317 47.6495 349.041 47.6354 348.959 47.3768 cv
349.296 47.0971 349.761 46.4771 350.101 46.2804 cv
350.294 46.1693 352.311 44.9172 352.505 44.5403 cv
352.561 44.3751 352.481 44.1262 352.523 43.9431 cv
352.708 43.1538 353.225 42.4144 352.456 41.5795 cv
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
268.028 72.015 mo
271.785 72.015 li
271.785 79.9298 li
271.785 82.8383 269.516 83.8246 265.452 83.8246 cv
261.278 83.8246 259.036 82.9017 259.036 79.9949 cv
259.036 72.015 li
262.794 72.015 li
262.794 79.3081 li
262.794 81.0729 263.944 81.3332 265.166 81.391 cv
266.551 81.4568 268.028 81.0947 268.028 79.3081 cv
268.028 72.015 li
.961456 .679316 .0831311 .00936904 cmyk
f
306.936 75.6231 mo
303.96 75.6231 li
302.249 72.6084 297.962 75.2638 300.871 76.2154 cv
301.267 76.3449 301.895 76.3857 302.508 76.5277 cv
305.685 77.2623 307.276 78.5095 307.276 80.2736 cv
307.186 82.9003 305.233 84.3141 301.419 84.2788 cv
297.03 84.2372 296.177 82.3897 295.77 79.9336 cv
299.316 79.9336 li
299.453 80.3636 300.138 81.1729 300.466 81.3734 cv
300.775 81.5624 301.169 81.6295 301.625 81.6295 cv
302.804 81.6295 303.394 81.3515 303.394 80.7918 cv
303.394 80.3179 302.601 79.9066 301.011 79.5622 cv
297.787 78.8318 296.178 77.5392 296.178 75.6868 cv
296.268 73.2308 298.06 71.9627 301.555 71.8745 cv
304.733 71.9184 306.526 73.1671 306.936 75.6231 cv
f
308.778 75.0561 mo
308.778 72.015 li
321.258 72.015 li
321.258 75.0561 li
316.683 75.0561 li
316.683 84.5505 li
313.354 84.5505 li
313.354 75.0561 li
308.778 75.0561 li
f
328.569 72.0406 mo
331.514 72.0406 334.028 73.9089 334.933 76.4944 cv
331.306 76.4944 li
330.665 75.7052 329.676 75.1977 328.569 75.1977 cv
326.644 75.1977 325.073 76.7319 325.073 78.6133 cv
325.073 80.4955 326.644 82.0297 328.569 82.0297 cv
329.755 82.0297 330.806 81.4471 331.438 80.5599 cv
334.991 80.5599 li
334.139 83.2347 331.58 85.1868 328.569 85.1868 cv
324.865 85.1868 321.844 82.2336 321.844 78.6133 cv
321.844 74.9938 324.865 72.0406 328.569 72.0406 cv
f
302.059 132.13 mo
299.335 136.116 li
299.335 136.116 300.764 135.385 301.76 135.784 cv
302.756 136.183 303.355 137.146 303.023 137.876 cv
302.69 138.607 301.727 139.272 300.731 138.973 cv
299.734 138.674 299.369 138.209 299.734 138.142 cv
300.099 138.076 300.033 138.342 300.332 138.541 cv
300.631 138.74 301.262 137.611 300.93 137.279 cv
300.597 136.947 299.801 136.116 298.87 136.814 cv
297.94 137.511 298.336 138.84 298.505 139.505 cv
298.674 140.168 301.161 141.664 303.156 140.202 cv
305.15 138.74 305.082 137.611 304.882 136.681 cv
304.683 135.751 303.621 134.754 302.989 134.821 cv
302.358 134.887 302.092 134.555 302.092 134.555 cv
302.79 133.525 li
305.315 133.625 li
305.115 134.721 li
306.211 134.954 li
306.211 134.954 306.543 133.691 307.174 133.359 cv
307.805 133.027 308.204 132.23 308.204 132.23 cv
308.204 132.23 301.993 132.164 302.059 132.13 cv
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
292.535 135.01 mo
292.452 135.095 292.358 135.181 292.253 135.247 cv
291.919 135.456 291.564 134.528 291.794 133.824 cv
292.061 133.006 294.271 132.319 294.826 133.762 cv
295.086 134.44 295.014 134.975 294.826 135.267 cv
294.638 135.56 294.637 135.435 294.198 134.953 cv
293.606 134.305 292.969 134.556 292.535 135.01 cv
cp
293.027 136.941 mo
293.041 136.941 292.821 137.256 292.497 137.621 cv
292.015 138.164 289.313 139.871 288.762 139.243 cv
288.667 139.136 288.803 138.687 288.719 138.509 cv
288.289 137.597 286.86 138.309 287.171 139.241 cv
287.833 141.226 291.638 140.367 292.91 139.564 cv
295.154 138.146 297.367 135.478 296.122 133.05 cv
295.769 132.36 294.122 130.847 291.772 131.984 cv
290.447 132.625 289.344 135.634 291.417 136.668 cv
292.003 137.086 293.027 136.941 293.027 136.941 cv
f
280.104 140.46 mo
282.64 140.433 li
288.514 131.809 li
288.514 131.809 288.327 131.461 287.633 131.569 cv
286.939 131.675 286.271 132.049 285.577 131.996 cv
284.883 131.942 284.509 131.835 284.349 131.702 cv
284.189 131.569 284.028 131.862 284.189 132.342 cv
284.349 132.823 284.616 133.17 284.909 133.224 cv
285.203 133.277 285.256 133.357 285.256 133.357 cv
280.104 140.46 li
f
312.308 137.237 mo
312.391 137.151 312.485 137.065 312.589 137 cv
312.924 136.791 313.279 137.719 313.049 138.422 cv
312.782 139.24 310.498 140.001 309.943 138.558 cv
309.683 137.88 309.755 137.346 309.943 137.053 cv
310.131 136.76 310.132 136.886 310.571 137.367 cv
311.163 138.015 311.874 137.69 312.308 137.237 cv
cp
311.447 135.478 mo
311.433 135.478 311.653 135.162 311.977 134.797 cv
312.46 134.254 315.162 132.547 315.714 133.175 cv
315.76 133.229 316.076 133.764 315.452 133.741 cv
315.069 133.728 314.874 134.383 314.906 134.476 cv
315.353 135.796 317.482 135.228 317.129 133.329 cv
316.747 131.273 313.6 131.855 311.957 132.811 cv
309.663 134.146 307.108 136.94 308.352 139.368 cv
308.706 140.058 310.275 141.395 312.703 140.434 cv
314.322 139.794 315.401 136.71 313.327 135.676 cv
312.741 135.259 311.447 135.478 311.447 135.478 cv
f
290.673 68.7988 mo
301.803 58.351 312.023 51.9064 319.435 50.8658 cv
327.233 49.7702 328.639 54.8949 326.347 62.8599 cv
325.835 64.6402 325.035 66.5507 324.006 68.5412 cv
327.418 68.5412 li
328.241 66.477 328.837 64.463 329.179 62.5269 cv
330.665 54.1032 327.53 48.6856 318.567 48.9889 cv
310.141 49.2741 299.515 55.0749 288.01 65.8812 cv
287.62 66.2489 287.235 66.6196 286.857 66.9928 cv
288.25 67.3528 289.54 67.9731 290.673 68.7988 cv
cp
274.534 83.9766 mo
272.31 88.5328 270.973 92.8894 270.558 96.5678 cv
269.681 104.346 273.014 108.509 281.12 107.865 cv
288.737 107.26 299.426 102.232 309.625 92.6786 cv
311.757 90.6815 313.765 88.6298 315.625 86.5507 cv
310.527 86.5507 li
301.098 96.4179 289.662 104.791 282.025 105.989 cv
270.009 107.877 270.741 99.4507 273.776 92.3833 cv
274.636 90.3814 275.583 88.4061 276.66 86.4382 cv
275.839 85.7251 275.122 84.896 274.534 83.9766 cv
.961456 .679316 .0831311 .00936904 cmyk
f
303.202 99.1865 mo
308.681 103.101 314.31 105.788 318.607 106.603 cv
328.451 108.965 328.009 99.2461 325.45 92.3833 cv
324.707 90.3911 323.826 88.4601 322.793 86.5507 cv
326.011 86.5507 li
327.417 90.1515 328.267 93.5699 328.597 96.5678 cv
329.455 104.345 325.379 109.122 317.451 108.478 cv
312.561 108.081 306.398 105.679 299.993 101.296 cv
301.058 100.625 302.128 99.9218 303.202 99.1865 cv
.0393988 .643366 .987365 .00375372 cmyk
f
308.676 68.5412 mo
305.989 65.7947 303.315 63.3071 300.699 61.1211 cv
301.739 60.3117 302.771 59.5349 303.789 58.7914 cv
306.528 60.9383 309.335 63.3926 312.181 66.126 cv
313.006 66.9184 313.798 67.7243 314.558 68.5412 cv
308.676 68.5412 li
f
288.269 87.1229 mo
288.276 87.1191 li
288.269 87.1229 li
.961456 .679316 .0831311 .00936904 cmyk
f
288.929 86.7625 mo
291.968 89.7025 295.186 92.5799 298.32 95.3219 cv
298.547 95.521 298.775 95.7176 299.004 95.9118 cv
297.954 96.7076 296.907 97.4765 295.865 98.2159 cv
293.861 96.5941 291.855 94.7819 289.878 92.7803 cv
288.323 91.207 286.845 89.6229 285.451 88.0343 cv
285.453 88.0343 285.454 88.0343 285.455 88.0337 cv
284.923 88.1219 284.378 88.168 283.821 88.168 cv
278.301 88.168 273.799 83.6657 273.799 78.146 cv
273.799 76.3546 274.274 74.6705 275.103 73.2124 cv
273.309 69.7227 271.942 66.4607 271.264 62.5269 cv
269.81 54.1032 273.284 48.2772 282.051 48.5804 cv
287.121 48.7562 293.098 51.267 299.568 55.6893 cv
298.572 56.3865 297.567 57.1145 296.554 57.8771 cv
290.63 53.5631 285.17 51.032 280.794 50.8658 cv
275.615 50.6681 272.093 56.4197 273.544 64.5741 cv
273.948 66.846 274.9 69.1944 276.26 71.5809 cv
276.26 71.5802 li
276.93 72.7659 277.632 73.8535 278.363 74.8578 cv
276.762 77.8639 277.47 81.8002 280.325 83.9547 cv
282.687 85.7375 286.029 85.1206 288.76 82.2606 cv
286.834 80.824 li
283.646 83.8322 279.964 82.2904 280.099 78.3541 cv
289.905 78.3541 li
289.91 78.2848 289.915 78.2156 289.918 78.146 cv
290.088 74.3652 288.221 71.2811 284.44 71.2811 cv
282.52 71.2811 280.689 72.0223 279.439 73.3547 cv
279.18 73.6299 278.949 73.9217 278.743 74.2257 cv
276.846 70.9616 li
278.653 69.2076 281.114 68.1241 283.821 68.1241 cv
289.341 68.1241 293.843 72.626 293.843 78.146 cv
293.843 81.8026 291.867 85.0123 288.929 86.7625 cv
.0393988 .643366 .987365 .00375372 cmyk
f
284.459 73.3173 mo
286.072 73.3173 287.381 74.6857 287.461 76.3633 cv
287.457 76.3851 287.454 76.4076 287.45 76.4294 cv
280.534 76.4294 li
280.537 76.4076 280.539 76.3851 280.543 76.3633 cv
280.794 74.6857 282.554 73.3173 284.459 73.3173 cv
f
387.144 108.555 mo
388.734 108.555 li
388.734 115.979 li
388.734 116.809 388.77 117.421 388.841 117.816 cv
388.913 118.21 389.078 118.523 389.334 118.754 cv
389.591 118.984 389.937 119.1 390.373 119.1 cv
390.786 119.1 391.107 119.005 391.337 118.815 cv
391.567 118.625 391.73 118.356 391.826 118.008 cv
391.922 117.661 391.97 116.973 391.97 115.944 cv
391.97 108.555 li
393.43 108.555 li
393.43 115.848 li
393.43 117.016 393.362 117.917 393.225 118.548 cv
393.088 119.179 392.772 119.702 392.276 120.117 cv
391.779 120.531 391.114 120.739 390.28 120.739 cv
389.633 120.739 389.07 120.609 388.593 120.349 cv
388.116 120.089 387.755 119.668 387.511 119.087 cv
387.266 118.505 387.144 117.469 387.144 115.979 cv
.701656 .63711 .639216 .644312 cmyk
f
395.866 111.667 mo
397.254 111.667 li
397.254 113.034 li
397.59 111.982 398.189 111.456 399.052 111.456 cv
399.541 111.456 399.936 111.599 400.235 111.886 cv
400.535 112.172 400.724 112.515 400.803 112.916 cv
400.882 113.316 400.922 113.949 400.922 114.813 cv
400.922 120.52 li
399.426 120.52 li
399.426 114.91 li
399.426 114.139 399.371 113.614 399.261 113.337 cv
399.15 113.059 398.915 112.92 398.556 112.92 cv
398.182 112.92 397.89 113.097 397.682 113.45 cv
397.473 113.804 397.369 114.507 397.369 115.559 cv
397.369 120.52 li
395.866 120.52 li
f
404.868 110.474 mo
403.3 110.474 li
403.3 108.537 li
404.868 108.537 li
cp
403.336 111.667 mo
404.832 111.667 li
404.832 120.52 li
403.336 120.52 li
f
406.333 111.667 mo
407.807 111.667 li
409.167 118.022 li
410.498 111.667 li
411.799 111.667 li
409.742 120.52 li
408.412 120.52 li
f
418.522 116.365 mo
414.415 116.365 li
414.415 117.563 414.548 118.362 414.814 118.762 cv
415.08 119.163 415.415 119.363 415.817 119.363 cv
416.489 119.363 416.913 118.811 417.09 117.706 cv
418.457 117.925 li
418.097 119.801 417.201 120.739 415.767 120.739 cv
414.89 120.739 414.189 120.356 413.667 119.591 cv
413.144 118.825 412.883 117.703 412.883 116.225 cv
412.883 114.705 413.147 113.531 413.674 112.701 cv
414.202 111.871 414.906 111.456 415.789 111.456 cv
416.407 111.456 416.927 111.664 417.35 112.079 cv
417.771 112.494 418.069 113.039 418.241 113.714 cv
418.414 114.388 418.507 115.272 418.522 116.365 cv
cp
416.99 115.129 mo
416.99 113.569 416.572 112.789 415.738 112.789 cv
414.957 112.789 414.528 113.569 414.451 115.129 cv
f
420.454 111.667 mo
421.777 111.667 li
421.777 113.648 li
422.18 112.204 422.784 111.482 423.59 111.482 cv
423.667 111.482 423.758 111.491 423.863 111.509 cv
423.863 113.411 li
423.739 113.393 423.638 113.385 423.561 113.385 cv
422.492 113.385 421.957 114.261 421.957 116.014 cv
421.957 120.52 li
420.454 120.52 li
f
429.535 113.735 mo
428.363 114.121 li
428.148 113.233 427.737 112.789 427.133 112.789 cv
426.855 112.789 426.631 112.894 426.461 113.104 cv
426.29 113.314 426.206 113.575 426.206 113.884 cv
426.206 114.235 426.292 114.492 426.465 114.656 cv
426.637 114.819 427.033 115.024 427.651 115.269 cv
428.414 115.579 428.963 115.928 429.298 116.317 cv
429.634 116.705 429.802 117.247 429.802 117.943 cv
429.802 118.726 429.562 119.388 429.083 119.928 cv
428.603 120.469 427.956 120.739 427.141 120.739 cv
425.601 120.739 424.729 119.88 424.523 118.162 cv
425.795 117.873 li
425.959 118.889 426.421 119.398 427.184 119.398 cv
427.572 119.398 427.861 119.281 428.05 119.047 cv
428.24 118.813 428.335 118.536 428.335 118.215 cv
428.335 117.992 428.27 117.772 428.14 117.553 cv
428.011 117.334 427.649 117.107 427.054 116.873 cv
426.484 116.651 426.053 116.444 425.763 116.251 cv
425.473 116.058 425.235 115.779 425.048 115.414 cv
424.861 115.049 424.767 114.635 424.767 114.174 cv
424.767 113.42 424.992 112.778 425.443 112.25 cv
425.894 111.721 426.476 111.456 427.191 111.456 cv
428.404 111.456 429.186 112.216 429.535 113.735 cv
f
433.158 110.474 mo
431.59 110.474 li
431.59 108.537 li
433.158 108.537 li
cp
431.626 111.667 mo
433.122 111.667 li
433.122 120.52 li
431.626 120.52 li
f
435.853 109.361 mo
437.205 109.203 li
437.205 111.667 li
438.593 111.667 li
438.593 113.139 li
437.205 113.139 li
437.205 117.049 li
437.205 117.738 437.219 118.195 437.248 118.421 cv
437.277 118.646 437.363 118.83 437.507 118.973 cv
437.651 119.116 437.891 119.187 438.226 119.187 cv
438.404 119.187 438.605 119.167 438.83 119.126 cv
438.83 120.581 li
438.428 120.686 438.054 120.739 437.709 120.739 cv
437.147 120.739 436.718 120.606 436.421 120.34 cv
436.124 120.074 435.934 119.713 435.853 119.258 cv
435.771 118.802 435.73 118.106 435.73 117.171 cv
435.73 113.139 li
434.788 113.139 li
434.788 111.667 li
435.774 111.667 li
f
439.404 111.667 mo
440.907 111.667 li
442.173 117.75 li
443.474 111.667 li
444.826 111.667 li
442.467 121.081 li
442.295 121.765 442.137 122.27 441.993 122.597 cv
441.849 122.924 441.645 123.189 441.381 123.391 cv
441.118 123.592 440.777 123.693 440.36 123.693 cv
440.111 123.693 439.854 123.652 439.591 123.57 cv
439.591 122.115 li
439.782 122.156 439.957 122.177 440.116 122.177 cv
440.504 122.177 440.78 122.061 440.943 121.83 cv
441.106 121.599 441.281 121.063 441.468 120.222 cv
f
455.042 116.006 mo
455.042 119.161 454.083 120.739 452.165 120.739 cv
451.283 120.739 450.589 120.358 450.083 119.595 cv
449.577 118.833 449.324 117.665 449.324 116.093 cv
449.324 113.002 450.283 111.456 452.201 111.456 cv
453.074 111.456 453.765 111.833 454.276 112.587 cv
454.787 113.341 455.042 114.48 455.042 116.006 cv
cp
453.453 116.093 mo
453.453 114.849 453.339 113.994 453.111 113.529 cv
452.883 113.065 452.575 112.833 452.187 112.833 cv
451.343 112.833 450.921 113.92 450.921 116.093 cv
450.921 117.203 451.019 118.025 451.216 118.556 cv
451.412 119.088 451.736 119.354 452.187 119.354 cv
452.633 119.354 452.955 119.084 453.154 118.543 cv
453.353 118.003 453.453 117.186 453.453 116.093 cv
f
458.83 111.667 mo
460.132 111.667 li
460.132 113.139 li
458.83 113.139 li
458.83 120.52 li
457.363 120.52 li
457.363 113.139 li
456.413 113.139 li
456.413 111.667 li
457.363 111.667 li
457.377 110.615 457.452 109.889 457.586 109.489 cv
457.72 109.088 457.939 108.774 458.244 108.546 cv
458.548 108.318 458.962 108.204 459.485 108.204 cv
459.787 108.204 460.081 108.239 460.369 108.309 cv
460.369 109.764 li
460.163 109.724 459.973 109.703 459.801 109.703 cv
459.504 109.703 459.284 109.77 459.143 109.905 cv
459.001 110.039 458.914 110.21 458.881 110.418 cv
458.847 110.625 458.83 111.041 458.83 111.667 cv
f
465.104 108.555 mo
470.729 108.555 li
470.729 110.141 li
466.73 110.141 li
466.73 113.56 li
469.866 113.56 li
469.866 115.155 li
466.73 115.155 li
466.73 118.898 li
470.793 118.898 li
470.793 120.52 li
465.104 120.52 li
f
472.517 120.52 mo
474.021 120.52 li
474.021 108.555 li
472.517 108.555 li
cp
f
481.757 116.365 mo
477.65 116.365 li
477.65 117.563 477.783 118.362 478.049 118.762 cv
478.315 119.163 478.65 119.363 479.053 119.363 cv
479.724 119.363 480.148 118.811 480.326 117.706 cv
481.692 117.925 li
481.332 119.801 480.436 120.739 479.002 120.739 cv
478.125 120.739 477.425 120.356 476.902 119.591 cv
476.379 118.825 476.118 117.703 476.118 116.225 cv
476.118 114.705 476.382 113.531 476.909 112.701 cv
477.437 111.871 478.141 111.456 479.024 111.456 cv
479.642 111.456 480.162 111.664 480.584 112.079 cv
481.006 112.494 481.304 113.039 481.476 113.714 cv
481.649 114.388 481.743 115.272 481.757 116.365 cv
cp
480.225 115.129 mo
480.225 113.569 479.808 112.789 478.973 112.789 cv
478.192 112.789 477.763 113.569 477.686 115.129 cv
f
488.724 114.647 mo
487.278 114.84 li
487.206 114.068 487.084 113.553 486.911 113.293 cv
486.739 113.033 486.494 112.902 486.178 112.902 cv
485.732 112.902 485.408 113.152 485.207 113.652 cv
485.005 114.152 484.905 115.03 484.905 116.286 cv
484.905 118.25 485.329 119.231 486.178 119.231 cv
486.83 119.231 487.197 118.591 487.278 117.312 cv
488.724 117.469 li
488.527 119.649 487.642 120.739 486.07 120.739 cv
485.14 120.739 484.45 120.33 484.002 119.512 cv
483.554 118.694 483.329 117.563 483.329 116.12 cv
483.329 114.6 483.572 113.443 484.056 112.648 cv
484.54 111.854 485.245 111.456 486.171 111.456 cv
487.662 111.456 488.513 112.52 488.724 114.647 cv
f
490.649 109.361 mo
492.001 109.203 li
492.001 111.667 li
493.389 111.667 li
493.389 113.139 li
492.001 113.139 li
492.001 117.049 li
492.001 117.738 492.016 118.195 492.044 118.421 cv
492.073 118.646 492.159 118.83 492.303 118.973 cv
492.447 119.116 492.687 119.187 493.023 119.187 cv
493.2 119.187 493.401 119.167 493.627 119.126 cv
493.627 120.581 li
493.224 120.686 492.85 120.739 492.505 120.739 cv
491.944 120.739 491.514 120.606 491.217 120.34 cv
490.92 120.074 490.731 119.713 490.649 119.258 cv
490.568 118.802 490.527 118.106 490.527 117.171 cv
490.527 113.139 li
489.584 113.139 li
489.584 111.667 li
490.57 111.667 li
f
495.092 111.667 mo
496.415 111.667 li
496.415 113.648 li
496.818 112.204 497.422 111.482 498.227 111.482 cv
498.304 111.482 498.395 111.491 498.501 111.509 cv
498.501 113.411 li
498.376 113.393 498.275 113.385 498.199 113.385 cv
497.129 113.385 496.595 114.261 496.595 116.014 cv
496.595 120.52 li
495.092 120.52 li
f
505.158 116.006 mo
505.158 119.161 504.199 120.739 502.282 120.739 cv
501.399 120.739 500.705 120.358 500.199 119.595 cv
499.693 118.833 499.441 117.665 499.441 116.093 cv
499.441 113.002 500.399 111.456 502.317 111.456 cv
503.19 111.456 503.882 111.833 504.393 112.587 cv
504.903 113.341 505.158 114.48 505.158 116.006 cv
cp
503.569 116.093 mo
503.569 114.849 503.455 113.994 503.227 113.529 cv
503 113.065 502.691 112.833 502.303 112.833 cv
501.459 112.833 501.037 113.92 501.037 116.093 cv
501.037 117.203 501.135 118.025 501.332 118.556 cv
501.529 119.088 501.852 119.354 502.303 119.354 cv
502.749 119.354 503.072 119.084 503.27 118.543 cv
503.469 118.003 503.569 117.186 503.569 116.093 cv
f
507.271 111.667 mo
508.659 111.667 li
508.659 113.034 li
508.994 111.982 509.594 111.456 510.457 111.456 cv
510.946 111.456 511.34 111.599 511.64 111.886 cv
511.94 112.172 512.129 112.515 512.208 112.916 cv
512.287 113.316 512.327 113.949 512.327 114.813 cv
512.327 120.52 li
510.831 120.52 li
510.831 114.91 li
510.831 114.139 510.776 113.614 510.665 113.337 cv
510.555 113.059 510.32 112.92 509.96 112.92 cv
509.586 112.92 509.295 113.097 509.087 113.45 cv
508.878 113.804 508.774 114.507 508.774 115.559 cv
508.774 120.52 li
507.271 120.52 li
f
516.273 110.474 mo
514.705 110.474 li
514.705 108.537 li
516.273 108.537 li
cp
514.741 111.667 mo
516.237 111.667 li
516.237 120.52 li
514.741 120.52 li
f
523.786 114.647 mo
522.34 114.84 li
522.268 114.068 522.146 113.553 521.974 113.293 cv
521.801 113.033 521.557 112.902 521.24 112.902 cv
520.794 112.902 520.47 113.152 520.269 113.652 cv
520.068 114.152 519.967 115.03 519.967 116.286 cv
519.967 118.25 520.391 119.231 521.24 119.231 cv
521.892 119.231 522.259 118.591 522.34 117.312 cv
523.786 117.469 li
523.589 119.649 522.705 120.739 521.132 120.739 cv
520.202 120.739 519.513 120.33 519.065 119.512 cv
518.616 118.694 518.392 117.563 518.392 116.12 cv
518.392 114.6 518.634 113.443 519.118 112.648 cv
519.602 111.854 520.307 111.456 521.233 111.456 cv
522.724 111.456 523.575 112.52 523.786 114.647 cv
f
534.793 111.228 mo
533.405 111.816 li
533.242 111.184 533.027 110.718 532.761 110.418 cv
532.495 110.116 532.132 109.966 531.671 109.966 cv
531.245 109.966 530.915 110.12 530.682 110.426 cv
530.45 110.733 530.334 111.085 530.334 111.482 cv
530.334 111.921 530.464 112.27 530.726 112.53 cv
530.987 112.79 531.508 113.101 532.29 113.464 cv
532.956 113.773 533.469 114.068 533.829 114.349 cv
534.189 114.629 534.48 115.005 534.703 115.475 cv
534.926 115.946 535.037 116.491 535.037 117.11 cv
535.037 118.115 534.746 118.971 534.163 119.678 cv
533.581 120.385 532.765 120.739 531.715 120.739 cv
529.902 120.739 528.78 119.623 528.348 117.391 cv
529.801 116.891 li
530.055 118.364 530.717 119.1 531.786 119.1 cv
532.309 119.1 532.706 118.935 532.977 118.605 cv
533.247 118.274 533.383 117.867 533.383 117.382 cv
533.383 117.025 533.29 116.695 533.103 116.391 cv
532.916 116.087 532.451 115.763 531.707 115.418 cv
530.921 115.056 530.354 114.749 530.006 114.498 cv
529.659 114.247 529.362 113.876 529.118 113.385 cv
528.874 112.894 528.751 112.336 528.751 111.711 cv
528.751 110.758 529.023 109.957 529.568 109.309 cv
530.112 108.66 530.835 108.336 531.736 108.336 cv
533.333 108.336 534.352 109.3 534.793 111.228 cv
f
542.141 114.647 mo
540.695 114.84 li
540.624 114.068 540.501 113.553 540.329 113.293 cv
540.156 113.033 539.911 112.902 539.595 112.902 cv
539.149 112.902 538.825 113.152 538.624 113.652 cv
538.423 114.152 538.322 115.03 538.322 116.286 cv
538.322 118.25 538.746 119.231 539.595 119.231 cv
540.247 119.231 540.614 118.591 540.695 117.312 cv
542.141 117.469 li
541.945 119.649 541.06 120.739 539.487 120.739 cv
538.557 120.739 537.867 120.33 537.419 119.512 cv
536.971 118.694 536.747 117.563 536.747 116.12 cv
536.747 114.6 536.989 113.443 537.473 112.648 cv
537.957 111.854 538.662 111.456 539.588 111.456 cv
541.079 111.456 541.93 112.52 542.141 114.647 cv
f
545.332 110.474 mo
543.764 110.474 li
543.764 108.537 li
545.332 108.537 li
cp
543.8 111.667 mo
545.296 111.667 li
545.296 120.52 li
543.8 120.52 li
f
553.04 116.365 mo
548.933 116.365 li
548.933 117.563 549.066 118.362 549.332 118.762 cv
549.598 119.163 549.933 119.363 550.335 119.363 cv
551.007 119.363 551.431 118.811 551.609 117.706 cv
552.975 117.925 li
552.615 119.801 551.719 120.739 550.285 120.739 cv
549.408 120.739 548.708 120.356 548.185 119.591 cv
547.662 118.825 547.401 117.703 547.401 116.225 cv
547.401 114.705 547.665 113.531 548.192 112.701 cv
548.719 111.871 549.424 111.456 550.307 111.456 cv
550.925 111.456 551.446 111.664 551.868 112.079 cv
552.29 112.494 552.587 113.039 552.759 113.714 cv
552.932 114.388 553.026 115.272 553.04 116.365 cv
cp
551.508 115.129 mo
551.508 113.569 551.091 112.789 550.256 112.789 cv
549.475 112.789 549.046 113.569 548.969 115.129 cv
f
554.972 111.667 mo
556.36 111.667 li
556.36 113.034 li
556.696 111.982 557.295 111.456 558.158 111.456 cv
558.647 111.456 559.042 111.599 559.341 111.886 cv
559.641 112.172 559.831 112.515 559.91 112.916 cv
559.989 113.316 560.028 113.949 560.028 114.813 cv
560.028 120.52 li
558.532 120.52 li
558.532 114.91 li
558.532 114.139 558.477 113.614 558.367 113.337 cv
558.256 113.059 558.022 112.92 557.662 112.92 cv
557.288 112.92 556.997 113.097 556.788 113.45 cv
556.58 113.804 556.475 114.507 556.475 115.559 cv
556.475 120.52 li
554.972 120.52 li
f
567.477 114.647 mo
566.031 114.84 li
565.959 114.068 565.837 113.553 565.665 113.293 cv
565.492 113.033 565.248 112.902 564.931 112.902 cv
564.485 112.902 564.161 113.152 563.96 113.652 cv
563.759 114.152 563.658 115.03 563.658 116.286 cv
563.658 118.25 564.082 119.231 564.931 119.231 cv
565.583 119.231 565.95 118.591 566.031 117.312 cv
567.477 117.469 li
567.281 119.649 566.396 120.739 564.823 120.739 cv
563.893 120.739 563.204 120.33 562.756 119.512 cv
562.307 118.694 562.083 117.563 562.083 116.12 cv
562.083 114.6 562.325 113.443 562.809 112.648 cv
563.294 111.854 563.999 111.456 564.924 111.456 cv
566.415 111.456 567.266 112.52 567.477 114.647 cv
f
574.417 116.365 mo
570.309 116.365 li
570.309 117.563 570.442 118.362 570.708 118.762 cv
570.974 119.163 571.308 119.363 571.711 119.363 cv
572.382 119.363 572.807 118.811 572.984 117.706 cv
574.351 117.925 li
573.991 119.801 573.095 120.739 571.661 120.739 cv
570.783 120.739 570.083 120.356 569.561 119.591 cv
569.038 118.825 568.777 117.703 568.777 116.225 cv
568.777 114.705 569.04 113.531 569.568 112.701 cv
570.095 111.871 570.8 111.456 571.682 111.456 cv
572.301 111.456 572.821 111.664 573.244 112.079 cv
573.666 112.494 573.964 113.039 574.137 113.714 cv
574.306 114.388 574.4 115.272 574.417 116.365 cv
cp
572.883 115.129 mo
572.883 113.569 572.466 112.789 571.632 112.789 cv
570.85 112.789 570.421 113.569 570.345 115.129 cv
f
581.136 114.174 mo
579.689 113.954 li
579.786 113.166 580.084 112.552 580.586 112.114 cv
581.088 111.675 581.7 111.456 582.431 111.456 cv
583.082 111.456 583.604 111.615 583.996 111.934 cv
584.387 112.252 584.632 112.631 584.733 113.069 cv
584.833 113.508 584.882 114.171 584.882 115.059 cv
584.882 118.074 li
584.882 119.296 584.927 120.111 585.013 120.52 cv
583.594 120.52 li
583.532 120.198 583.5 119.708 583.5 119.047 cv
583.047 120.175 582.365 120.739 581.458 120.739 cv
580.845 120.739 580.354 120.51 579.98 120.051 cv
579.61 119.592 579.423 118.968 579.423 118.179 cv
579.423 117.215 579.696 116.453 580.24 115.892 cv
580.783 115.331 581.728 115.05 583.071 115.05 cv
583.137 115.05 583.244 115.053 583.386 115.059 cv
583.386 114.699 li
583.386 114.068 583.31 113.592 583.154 113.271 cv
582.999 112.95 582.718 112.789 582.317 112.789 cv
581.659 112.789 581.264 113.25 581.136 114.174 cv
cp
583.386 116.207 mo
583.196 116.184 583.047 116.172 582.947 116.172 cv
581.645 116.172 580.991 116.794 580.991 118.039 cv
580.991 118.945 581.316 119.398 581.964 119.398 cv
582.341 119.398 582.673 119.152 582.96 118.662 cv
583.244 118.171 583.386 117.496 583.386 116.637 cv
f
587.26 111.667 mo
588.648 111.667 li
588.648 113.034 li
588.984 111.982 589.583 111.456 590.448 111.456 cv
590.936 111.456 591.331 111.599 591.632 111.886 cv
591.93 112.172 592.12 112.515 592.2 112.916 cv
592.276 113.316 592.317 113.949 592.317 114.813 cv
592.317 120.52 li
590.822 120.52 li
590.822 114.91 li
590.822 114.139 590.767 113.614 590.656 113.337 cv
590.545 113.059 590.31 112.92 589.95 112.92 cv
589.576 112.92 589.285 113.097 589.077 113.45 cv
588.87 113.804 588.766 114.507 588.766 115.559 cv
588.766 120.52 li
587.26 120.52 li
f
598.514 108.555 mo
600.002 108.555 li
600.002 120.52 li
598.628 120.52 li
598.628 119.179 li
598.278 120.178 597.676 120.678 596.825 120.678 cv
596.004 120.678 595.388 120.26 594.979 119.424 cv
594.571 118.588 594.363 117.493 594.363 116.137 cv
594.363 114.682 594.592 113.548 595.045 112.736 cv
595.499 111.924 596.101 111.518 596.852 111.518 cv
597.645 111.518 598.199 111.909 598.514 112.692 cv
cp
598.514 115.313 mo
598.514 114.402 598.372 113.763 598.092 113.398 cv
597.808 113.033 597.513 112.85 597.212 112.85 cv
596.378 112.85 595.963 113.89 595.963 115.971 cv
595.963 118.191 596.385 119.301 597.226 119.301 cv
597.552 119.301 597.849 119.117 598.116 118.749 cv
598.382 118.381 598.514 117.741 598.514 116.829 cv
f
604.759 108.555 mo
610.751 108.555 li
610.751 110.238 li
608.556 110.238 li
608.556 120.52 li
606.933 120.52 li
606.933 110.238 li
604.759 110.238 li
f
617.359 116.365 mo
613.25 116.365 li
613.25 117.563 613.385 118.362 613.652 118.762 cv
613.918 119.163 614.251 119.363 614.656 119.363 cv
615.324 119.363 615.75 118.811 615.926 117.706 cv
617.294 117.925 li
616.934 119.801 616.037 120.739 614.604 120.739 cv
613.728 120.739 613.025 120.356 612.503 119.591 cv
611.98 118.825 611.72 117.703 611.72 116.225 cv
611.72 114.705 611.983 113.531 612.51 112.701 cv
613.039 111.871 613.742 111.456 614.625 111.456 cv
615.244 111.456 615.763 111.664 616.186 112.079 cv
616.608 112.494 616.906 113.039 617.079 113.714 cv
617.252 114.388 617.345 115.272 617.359 116.365 cv
cp
615.826 115.129 mo
615.826 113.569 615.41 112.789 614.576 112.789 cv
613.794 112.789 613.365 113.569 613.288 115.129 cv
f
624.324 114.647 mo
622.881 114.84 li
622.808 114.068 622.687 113.553 622.514 113.293 cv
622.341 113.033 622.095 112.902 621.78 112.902 cv
621.333 112.902 621.011 113.152 620.807 113.652 cv
620.606 114.152 620.506 115.03 620.506 116.286 cv
620.506 118.25 620.932 119.231 621.78 119.231 cv
622.431 119.231 622.798 118.591 622.881 117.312 cv
624.324 117.469 li
624.13 119.649 623.244 120.739 621.673 120.739 cv
620.741 120.739 620.053 120.33 619.603 119.512 cv
619.156 118.694 618.931 117.563 618.931 116.12 cv
618.931 114.6 619.173 113.443 619.658 112.648 cv
620.143 111.854 620.845 111.456 621.773 111.456 cv
623.265 111.456 624.113 112.52 624.324 114.647 cv
f
625.979 108.555 mo
627.481 108.555 li
627.481 112.841 li
627.821 111.918 628.399 111.456 629.212 111.456 cv
629.631 111.456 629.981 111.573 630.268 111.807 cv
630.552 112.041 630.753 112.352 630.863 112.74 cv
630.978 113.129 631.033 113.864 631.033 114.945 cv
631.033 120.52 li
629.538 120.52 li
629.538 114.945 li
629.538 114.022 629.451 113.453 629.278 113.24 cv
629.105 113.027 628.894 112.92 628.638 112.92 cv
627.866 112.92 627.481 113.764 627.481 115.453 cv
627.481 120.52 li
625.979 120.52 li
f
633.456 111.667 mo
634.844 111.667 li
634.844 113.034 li
635.18 111.982 635.779 111.456 636.641 111.456 cv
637.129 111.456 637.524 111.599 637.825 111.886 cv
638.123 112.172 638.313 112.515 638.393 112.916 cv
638.472 113.316 638.51 113.949 638.51 114.813 cv
638.51 120.52 li
637.015 120.52 li
637.015 114.91 li
637.015 114.139 636.959 113.614 636.849 113.337 cv
636.738 113.059 636.506 112.92 636.146 112.92 cv
635.772 112.92 635.478 113.097 635.27 113.45 cv
635.062 113.804 634.959 114.507 634.959 115.559 cv
634.959 120.52 li
633.456 120.52 li
f
646.285 116.006 mo
646.285 119.161 645.326 120.739 643.405 120.739 cv
642.526 120.739 641.83 120.358 641.325 119.595 cv
640.819 118.833 640.567 117.665 640.567 116.093 cv
640.567 113.002 641.525 111.456 643.443 111.456 cv
644.316 111.456 645.008 111.833 645.517 112.587 cv
646.029 113.341 646.285 114.48 646.285 116.006 cv
cp
644.693 116.093 mo
644.693 114.849 644.579 113.994 644.354 113.529 cv
644.125 113.065 643.817 112.833 643.429 112.833 cv
642.585 112.833 642.162 113.92 642.162 116.093 cv
642.162 117.203 642.259 118.025 642.457 118.556 cv
642.654 119.088 642.979 119.354 643.429 119.354 cv
643.876 119.354 644.198 119.084 644.395 118.543 cv
644.596 118.003 644.693 117.186 644.693 116.093 cv
f
648.397 120.52 mo
649.9 120.52 li
649.9 108.555 li
648.397 108.555 li
cp
f
657.716 116.006 mo
657.716 119.161 656.757 120.739 654.839 120.739 cv
653.956 120.739 653.261 120.358 652.755 119.595 cv
652.25 118.833 651.997 117.665 651.997 116.093 cv
651.997 113.002 652.956 111.456 654.874 111.456 cv
655.746 111.456 656.438 111.833 656.947 112.587 cv
657.46 113.341 657.716 114.48 657.716 116.006 cv
cp
656.127 116.093 mo
656.127 114.849 656.013 113.994 655.784 113.529 cv
655.556 113.065 655.248 112.833 654.86 112.833 cv
654.015 112.833 653.593 113.92 653.593 116.093 cv
653.593 117.203 653.693 118.025 653.887 118.556 cv
654.084 119.088 654.41 119.354 654.86 119.354 cv
655.306 119.354 655.628 119.084 655.826 118.543 cv
656.026 118.003 656.127 117.186 656.127 116.093 cv
f
665.473 110.255 mo
665.473 111.596 li
665.335 111.561 665.217 111.544 665.127 111.544 cv
664.688 111.544 664.424 111.868 664.345 112.517 cv
664.708 113.078 664.892 113.712 664.892 114.419 cv
664.892 115.22 664.663 115.895 664.206 116.444 cv
663.753 116.993 663.137 117.268 662.365 117.268 cv
662.074 117.268 661.766 117.215 661.444 117.11 cv
661.081 117.279 660.897 117.537 660.897 117.881 cv
660.897 118.179 660.994 118.372 661.191 118.46 cv
661.385 118.548 661.897 118.618 662.732 118.67 cv
663.452 118.717 663.995 118.799 664.359 118.916 cv
664.722 119.033 665.013 119.271 665.231 119.63 cv
665.449 119.989 665.56 120.461 665.56 121.046 cv
665.56 121.946 665.273 122.628 664.705 123.093 cv
664.134 123.557 663.32 123.789 662.264 123.789 cv
661.25 123.789 660.506 123.586 660.039 123.18 cv
659.571 122.774 659.339 122.235 659.339 121.563 cv
659.339 120.71 659.689 120.14 660.395 119.854 cv
659.869 119.497 659.602 119.015 659.602 118.407 cv
659.602 117.636 659.962 117.043 660.675 116.628 cv
660.052 116.125 659.741 115.369 659.741 114.358 cv
659.741 113.493 659.976 112.793 660.454 112.258 cv
660.928 111.724 661.537 111.456 662.285 111.456 cv
662.777 111.456 663.234 111.585 663.659 111.842 cv
663.736 111.228 663.881 110.803 664.096 110.567 cv
664.31 110.33 664.618 110.212 665.027 110.212 cv
665.148 110.212 665.297 110.226 665.473 110.255 cv
cp
663.344 114.393 mo
663.344 113.236 663.016 112.657 662.358 112.657 cv
661.645 112.657 661.288 113.241 661.288 114.41 cv
661.288 115.544 661.631 116.111 662.323 116.111 cv
663.002 116.111 663.344 115.538 663.344 114.393 cv
cp
661.323 120.152 mo
660.904 120.403 660.696 120.78 660.696 121.282 cv
660.696 121.703 660.831 122.013 661.101 122.212 cv
661.368 122.41 661.814 122.51 662.438 122.51 cv
663.587 122.51 664.165 122.103 664.165 121.291 cv
664.165 120.894 664.054 120.621 663.836 120.472 cv
663.618 120.323 663.189 120.236 662.545 120.213 cv
662.005 120.19 661.596 120.169 661.323 120.152 cv
f
666.145 111.667 mo
667.651 111.667 li
668.914 117.75 li
670.216 111.667 li
671.569 111.667 li
669.212 121.081 li
669.039 121.765 668.88 122.27 668.734 122.597 cv
668.592 122.924 668.388 123.189 668.125 123.391 cv
667.862 123.592 667.519 123.693 667.104 123.693 cv
666.855 123.693 666.598 123.652 666.332 123.57 cv
666.332 122.115 li
666.526 122.156 666.699 122.177 666.858 122.177 cv
667.246 122.177 667.523 122.061 667.685 121.83 cv
667.848 121.599 668.025 121.063 668.212 120.222 cv
f
681.785 116.006 mo
681.785 119.161 680.826 120.739 678.908 120.739 cv
678.026 120.739 677.333 120.358 676.824 119.595 cv
676.319 118.833 676.066 117.665 676.066 116.093 cv
676.066 113.002 677.025 111.456 678.943 111.456 cv
679.815 111.456 680.508 111.833 681.02 112.587 cv
681.529 113.341 681.785 114.48 681.785 116.006 cv
cp
680.196 116.093 mo
680.196 114.849 680.082 113.994 679.853 113.529 cv
679.625 113.065 679.317 112.833 678.929 112.833 cv
678.084 112.833 677.665 113.92 677.665 116.093 cv
677.665 117.203 677.762 118.025 677.96 118.556 cv
678.157 119.088 678.479 119.354 678.929 119.354 cv
679.376 119.354 679.698 119.084 679.898 118.543 cv
680.096 118.003 680.196 117.186 680.196 116.093 cv
f
685.572 111.667 mo
686.874 111.667 li
686.874 113.139 li
685.572 113.139 li
685.572 120.52 li
684.104 120.52 li
684.104 113.139 li
683.156 113.139 li
683.156 111.667 li
684.104 111.667 li
684.122 110.615 684.194 109.889 684.329 109.489 cv
684.464 109.088 684.682 108.774 684.987 108.546 cv
685.292 108.318 685.704 108.204 686.226 108.204 cv
686.531 108.204 686.825 108.239 687.112 108.309 cv
687.112 109.764 li
686.905 109.724 686.718 109.703 686.545 109.703 cv
686.247 109.703 686.029 109.77 685.887 109.905 cv
685.745 110.039 685.659 110.21 685.624 110.418 cv
685.589 110.625 685.572 111.041 685.572 111.667 cv
f
696.781 116.496 mo
698.276 116.751 li
697.972 119.41 696.899 120.739 695.061 120.739 cv
693.87 120.739 692.98 120.181 692.395 119.065 cv
691.81 117.949 691.516 116.456 691.516 114.586 cv
691.516 112.569 691.824 111.024 692.443 109.949 cv
693.063 108.873 693.956 108.336 695.119 108.336 cv
696.923 108.336 697.979 109.697 698.29 112.42 cv
696.781 112.692 li
696.618 110.88 696.068 109.975 695.126 109.975 cv
693.87 109.975 693.243 111.55 693.243 114.699 cv
693.243 117.633 693.87 119.1 695.126 119.1 cv
695.632 119.1 696.006 118.876 696.251 118.429 cv
696.501 117.982 696.677 117.338 696.781 116.496 cv
f
700.232 108.555 mo
701.735 108.555 li
701.735 112.841 li
702.074 111.918 702.652 111.456 703.469 111.456 cv
703.884 111.456 704.237 111.573 704.521 111.807 cv
704.805 112.041 705.006 112.352 705.117 112.74 cv
705.231 113.129 705.286 113.864 705.286 114.945 cv
705.286 120.52 li
703.791 120.52 li
703.791 114.945 li
703.791 114.022 703.704 113.453 703.531 113.24 cv
703.358 113.027 703.147 112.92 702.891 112.92 cv
702.119 112.92 701.735 113.764 701.735 115.453 cv
701.735 120.52 li
700.232 120.52 li
f
709.24 110.474 mo
707.671 110.474 li
707.671 108.537 li
709.24 108.537 li
cp
707.71 111.667 mo
709.205 111.667 li
709.205 120.52 li
707.71 120.52 li
f
711.67 111.667 mo
713.058 111.667 li
713.058 113.034 li
713.394 111.982 713.992 111.456 714.854 111.456 cv
715.346 111.456 715.737 111.599 716.038 111.886 cv
716.339 112.172 716.526 112.515 716.606 112.916 cv
716.686 113.316 716.724 113.949 716.724 114.813 cv
716.724 120.52 li
715.228 120.52 li
715.228 114.91 li
715.228 114.139 715.173 113.614 715.066 113.337 cv
714.955 113.059 714.719 112.92 714.359 112.92 cv
713.986 112.92 713.695 113.097 713.484 113.45 cv
713.276 113.804 713.172 114.507 713.172 115.559 cv
713.172 120.52 li
711.67 120.52 li
f
720.483 114.174 mo
719.04 113.954 li
719.137 113.166 719.434 112.552 719.933 112.114 cv
720.435 111.675 721.051 111.456 721.778 111.456 cv
722.432 111.456 722.951 111.615 723.343 111.934 cv
723.734 112.252 723.979 112.631 724.08 113.069 cv
724.18 113.508 724.232 114.171 724.232 115.059 cv
724.232 118.074 li
724.232 119.296 724.274 120.111 724.36 120.52 cv
722.944 120.52 li
722.882 120.198 722.851 119.708 722.851 119.047 cv
722.394 120.175 721.716 120.739 720.809 120.739 cv
720.196 120.739 719.701 120.51 719.33 120.051 cv
718.96 119.592 718.773 118.968 718.773 118.179 cv
718.773 117.215 719.047 116.453 719.59 115.892 cv
720.134 115.331 721.075 115.05 722.418 115.05 cv
722.488 115.05 722.591 115.053 722.737 115.059 cv
722.737 114.699 li
722.737 114.068 722.657 113.592 722.501 113.271 cv
722.346 112.95 722.069 112.789 721.664 112.789 cv
721.006 112.789 720.615 113.25 720.483 114.174 cv
cp
722.737 116.207 mo
722.543 116.184 722.398 116.172 722.297 116.172 cv
720.992 116.172 720.341 116.794 720.341 118.039 cv
720.341 118.945 720.663 119.398 721.311 119.398 cv
721.691 119.398 722.024 119.152 722.307 118.662 cv
722.595 118.171 722.737 117.496 722.737 116.637 cv
f
grestore
grestore
KEVNYY+SimSun*1 [18.003 0 0 -18.003 0 0 ]msf
86.053 225.61 mo
(\272)sh
KEVNYZ+SimSun*1 [18.003 0 0 -18.003 0 0 ]msf
104.056 225.61 mo
(\207)sh
%ADOBeginSubsetFont: LLIBAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /LLIBAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966ae8c95a600000dd800000b0468656164e34ba941000003f40000
003668686561020000ea0000042c00000024686d74780c00007f00000450
000000346c6f63610ceb0fde000004840000001c6d61787001c93f570000
04a0000000206e616d65d18dc19c000004c0000008627072657005dc4fcc
00000d24000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
15894e6f5f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe0000010000010000000000000000000000000000000d010000000000
0000010000100100000a0100000e0100000b0100000e0100000c0100000a
0100000b0100000a010000090100000a000000000000004900aa010c0181
01f0027302f90385041e04c8058200010000000d016c0031000000000001
0000002f0029000001613dbb000000000000001e016e0001000000000000
002700000001000000000001000d00270001000000000002000700340001
000000000003000d003b0001000000000004000d00480001000000000005
000c00550001000000000006000d00610001000000000007002c006e0003
000104090000004e009a0003000104090001001a00e80003000104090002
000e01020003000104090003001a01100003000104090004001a012a0003
000104090005001801440003000104090006001a015c0003000104090007
00580176000300010409000d02aa01ce000300010409000e005204780003
000108040000008204ca00030001080400010012054c0003000108040002
0004055e0003000108040003001205620003000108040004001205740003
0001080400050018058600030001080400060012059e0003000108040007
005805b00003000108040008003e06080003000108040009003e06460003
00010804000b00380684000300010804000c003806bca920436f70797269
676874205a484f4e47594920456c656374726f6e696320436f2e20323030
314e5a4c414b452b53696d53756e526567756c61724e5a4c414b452b5369
6d53756e4e5a4c414b452b53696d53756e56657273696f6e20352e30344e
5a4c414b452b53696d53756e54726164656d61726b206f66205a484f4e47
594920456c656374726f6e696320436f2e2c204265696a696e6700a90020
0043006f00700079007200690067006800740020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e00200032003000300031004e005a004c0041004b0045002b0053
0069006d00530075006e0052006500670075006c00610072004e005a004c
0041004b0045002b00530069006d00530075006e004e005a004c0041004b
0045002b00530069006d00530075006e00560065007200730069006f006e
00200035002e00300034004e005a004c0041004b0045002b00530069006d
00530075006e00540072006100640065006d00610072006b0020006f0066
0020005a0048004f004e00470059004900200045006c0065006300740072
006f006e0069006300200043006f002e002c0020004200650069006a0069
006e00670059006f00750020006d00610079002000750073006500200074
00680069007300200066006f006e007400200074006f0020006400690073
0070006c0061007900200061006e00640020007000720069006e00740020
0063006f006e00740065006e00740020006100730020007000650072006d
0069007400740065006400200062007900200074006800650020006c0069
00630065006e007300650020007400650072006d007300200066006f0072
0020007400680065002000700072006f006400750063007400200069006e
0020007700680069006300680020007400680069007300200066006f006e
007400200069007300200069006e0063006c0075006400650064002e0020
0059006f00750020006d006100790020006f006e006c0079002000280069
002900200065006d0062006500640020007400680069007300200066006f
006e007400200069006e00200063006f006e00740065006e007400200061
00730020007000650072006d006900740074006500640020006200790020
00740068006500200065006d00620065006400640069006e006700200072
00650073007400720069006300740069006f006e007300200069006e0063
006c007500640065006400200069006e0020007400680069007300200066
006f006e0074003b00200061006e00640020002800690069002900200074
0065006d0070006f0072006100720069006c007900200064006f0077006e
006c006f006100640020007400680069007300200066006f006e00740020
0074006f002000610020007000720069006e0074006500720020006f0072
0020006f00740068006500720020006f0075007400700075007400200064
0065007600690063006500200074006f002000680065006c007000200070
00720069006e007400200063006f006e00740065006e0074002e00680074
00740070003a002f002f007700770077002e006d006900630072006f0073
006f00660074002e0063006f006d002f007400790070006f006700720061
007000680079002f0066006f006e0074007300a900200043006f00700079
007200690067006800740020005a0048004f004e00470059004900200045
006c0065006300740072006f006e0069006300200043006f002e00200032
003000300031000d000a5b574f536570636e753153174eac4e2d66134e2d
680775355b504fe1606f6280672f67099650516c53f863d04f9b3002004e
005a004c0041004b0045002b5b8b4f535e3889c4004e005a004c0041004b
0045002b5b8b4f53004e005a004c0041004b0045002b5b8b4f5300560065
007200730069006f006e00200035002e00300034004e005a004c0041004b
0045002b5b8b4f5300540072006100640065006d00610072006b0020006f
00660020005a0048004f004e00470059004900200045006c006500630074
0072006f006e0069006300200043006f002e002c0020004200650069006a
0069006e0067004200650069006a0069006e00670020005a0068006f006e
00670059006900200045006c0065006300740072006f006e006900630073
00200043006f002e004200650069006a0069006e00670020005a0068006f
006e00670059006900200045006c0065006300740072006f006e00690063
007300200043006f002e0068007400740070003a002f002f007700770077
002e007a0068006f006e006700790069006300740073002e0063006f006d
002e0063006e0068007400740070003a002f002f007700770077002e007a
0068006f006e006700790069006300740073002e0063006f006d002e0063
006e0000411a01110110003200280110010e00280028010f010e00280028
010c010d00460028010d010e00280028010e010d00180028010c010db346
285001b801ff858d001db0324b5258b0801d59b801064568b801062344b8
01044568b801042344b801054568b801044560b801052344b801024568b8
01044560b801022344b801034568b801024560b801032344b801004568b8
01044560b801002344b801014568b801004560b801012344012b2b2b2b2b
2b2b000000>
[2821 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1802 10 <0007000affe900f300cb000300070016003a005700620068000037153335
071533353714170735231507363427173337170716173523220727333717
231533371723151e0137150615062e01270607273e013717063714170735
23150736342717333637232207273337172306073337170f011707140e01
07273e0217371e010626362f2f2f0d010e2f0e01010e2d070f4d0b11150d
0b09580c1031130b0f2d1461291355331e100c11030c0d011408b0010e3a
0e01010e0d04010c0d0b09570c1035040d26070f073316080a1d1c021e17
030b022709080fba1d1d231c1c212e1707090605173215080a0c980e0b4c
03090c12230b1127090105040709010a11162413021539160a0322081707
585308153d17080f0e03090c120617090b060d0b072a211c0a0310223131
03120f151d00>LLIBAA+SimSun AddT42Char 

1 0 0 <> LLIBAA+SimSun AddT42Char 
LLIBAA+SimSun /CharStrings get begin
/g10 10 def
end
LLIBAA+SimSun /Encoding get
dup 152 /g10 put
pop
end
%ADOEndSubsetFont
/KEVNZB+SimSun /LLIBAA+SimSun findfont ct_VMDictPut
/KEVNZB+SimSun*1 
[152{/.notdef}rp /g10 103{/.notdef}rp]
KEVNZB+SimSun nf
KEVNZB+SimSun*1 [18.003 0 0 -18.003 0 0 ]msf
122.059 225.61 mo
(\230)sh
%ADOBeginSubsetFont: FXYAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /FXYAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966ae8da91f00000dc8000004de68656164e34ba941000003f40000
003668686561020000e70000042c00000024686d7478090000c700000450
000000286c6f636105d004b200000478000000166d61787001c63f570000
0490000000206e616d65ca73b668000004b0000008627072657005dc4fcc
00000d14000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
443793b55f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe0000010000010000000000000000000000000000000a010000000000
00000100002f010000130100001f0100000b0100000a0100003b0100000c
0100000a000000000000002e006700c3012801a601d2021b026f00000001
0000000a016c00310000000000010000002f0029000001613dbb00000000
0000001e016e0001000000000000002700000001000000000001000d0027
0001000000000002000700340001000000000003000d003b000100000000
0004000d00480001000000000005000c00550001000000000006000d0061
0001000000000007002c006e0003000104090000004e009a000300010409
0001001a00e80003000104090002000e01020003000104090003001a0110
0003000104090004001a012a000300010409000500180144000300010409
0006001a015c000300010409000700580176000300010409000d02aa01ce
000300010409000e005204780003000108040000008204ca000300010804
00010012054c00030001080400020004055e000300010804000300120562
000300010804000400120574000300010804000500180586000300010804
00060012059e0003000108040007005805b00003000108040008003e0608
0003000108040009003e0646000300010804000b00380684000300010804
000c003806bca920436f70797269676874205a484f4e47594920456c6563
74726f6e696320436f2e2032303031514744474d4d2b53696d53756e5265
67756c6172514744474d4d2b53696d53756e514744474d4d2b53696d5375
6e56657273696f6e20352e3034514744474d4d2b53696d53756e54726164
656d61726b206f66205a484f4e47594920456c656374726f6e696320436f
2e2c204265696a696e6700a900200043006f007000790072006900670068
00740020005a0048004f004e00470059004900200045006c006500630074
0072006f006e0069006300200043006f002e002000320030003000310051
004700440047004d004d002b00530069006d00530075006e005200650067
0075006c006100720051004700440047004d004d002b00530069006d0053
0075006e0051004700440047004d004d002b00530069006d00530075006e
00560065007200730069006f006e00200035002e00300034005100470044
0047004d004d002b00530069006d00530075006e00540072006100640065
006d00610072006b0020006f00660020005a0048004f004e004700590049
00200045006c0065006300740072006f006e0069006300200043006f002e
002c0020004200650069006a0069006e00670059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
00200074006f00200064006900730070006c0061007900200061006e0064
0020007000720069006e007400200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
00200074006800650020006c006900630065006e00730065002000740065
0072006d007300200066006f00720020007400680065002000700072006f
006400750063007400200069006e00200077006800690063006800200074
00680069007300200066006f006e007400200069007300200069006e0063
006c0075006400650064002e00200059006f00750020006d006100790020
006f006e006c0079002000280069002900200065006d0062006500640020
007400680069007300200066006f006e007400200069006e00200063006f
006e00740065006e00740020006100730020007000650072006d00690074
007400650064002000620079002000740068006500200065006d00620065
006400640069006e00670020007200650073007400720069006300740069
006f006e007300200069006e0063006c007500640065006400200069006e
0020007400680069007300200066006f006e0074003b00200061006e0064
00200028006900690029002000740065006d0070006f0072006100720069
006c007900200064006f0077006e006c006f006100640020007400680069
007300200066006f006e007400200074006f002000610020007000720069
006e0074006500720020006f00720020006f00740068006500720020006f
00750074007000750074002000640065007600690063006500200074006f
002000680065006c00700020007000720069006e007400200063006f006e
00740065006e0074002e0068007400740070003a002f002f007700770077
002e006d006900630072006f0073006f00660074002e0063006f006d002f
007400790070006f006700720061007000680079002f0066006f006e0074
007300a900200043006f00700079007200690067006800740020005a0048
004f004e00470059004900200045006c0065006300740072006f006e0069
006300200043006f002e00200032003000300031000d000a5b574f536570
636e753153174eac4e2d66134e2d680775355b504fe1606f6280672f6709
9650516c53f863d04f9b30020051004700440047004d004d002b5b8b4f53
5e3889c40051004700440047004d004d002b5b8b4f530051004700440047
004d004d002b5b8b4f5300560065007200730069006f006e00200035002e
003000340051004700440047004d004d002b5b8b4f530054007200610064
0065006d00610072006b0020006f00660020005a0048004f004e00470059
004900200045006c0065006300740072006f006e0069006300200043006f
002e002c0020004200650069006a0069006e0067004200650069006a0069
006e00670020005a0068006f006e00670059006900200045006c00650063
00740072006f006e00690063007300200043006f002e004200650069006a
0069006e00670020005a0068006f006e00670059006900200045006c0065
006300740072006f006e00690063007300200043006f002e006800740074
0070003a002f002f007700770077002e007a0068006f006e006700790069
006300740073002e0063006f006d002e0063006e0068007400740070003a
002f002f007700770077002e007a0068006f006e00670079006900630074
0073002e0063006f006d002e0063006e0000411a01110110003200280110
010e00280028010f010e00280028010c010d00460028010d010e00280028
010e010d00180028010c010db346285001b801ff858d001db0324b5258b0
801d59b801064568b801062344b801044568b801042344b801054568b801
044560b801052344b801024568b801044560b801022344b801034568b801
024560b801032344b801004568b801044560b801002344b801014568b801
004560b801012344012b2b2b2b2b2b2b000000>
[1247 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 844 7 <0004003bffea00cf00c6000300130017001b000037153335073634271733
3717071514170735231535153335071533354b6b7b0101106908130a0110
6b6b6b6b4437375a248b2d0b0b0e07941e0c081c14c2333339323200>FXYAAA+SimSun AddT42Char 

1 0 0 <> FXYAAA+SimSun AddT42Char 
FXYAAA+SimSun /CharStrings get begin
/g7 7 def
end
FXYAAA+SimSun /Encoding get
dup 238 /g7 put
pop
end
%ADOEndSubsetFont
/KEVNZC+SimSun /FXYAAA+SimSun findfont ct_VMDictPut
/KEVNZC+SimSun*1 
[238{/.notdef}rp /g7 17{/.notdef}rp]
KEVNZC+SimSun nf
KEVNZC+SimSun*1 [18.003 0 0 -18.003 0 0 ]msf
140.062 225.61 mo
(\356)sh
.797 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
166.824 229.074 mo
183.304 229.074 li
@
%ADOBeginSubsetFont: DTOAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /DTOAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966d8f46b0b00000dec00000b6068656164e34ba941000003f40000
003668686561020000ed0000042c00000024686d74780f0000ab00000450
000000406c6f636115f4133000000490000000226d61787001cc3f570000
04b4000000206e616d65dc0fe717000004d4000008627072657005dc4fcc
00000d38000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
70f363a15f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000010010000000000
00000100001f010000090100000a010000090100000b0100000a0100000a
010000090100000b0100000b010000120100000b0100000b0100000a0000
00000000006900bc012c019601f9024e02b70311037303ca043b04c9053d
05b00000000100000010016c00310000000000010000002f002900000161
3dbb000000000000001e016e000100000000000000270000000100000000
0001000d00270001000000000002000700340001000000000003000d003b
0001000000000004000d00480001000000000005000c0055000100000000
0006000d00610001000000000007002c006e0003000104090000004e009a
0003000104090001001a00e80003000104090002000e0102000300010409
0003001a01100003000104090004001a012a000300010409000500180144
0003000104090006001a015c000300010409000700580176000300010409
000d02aa01ce000300010409000e005204780003000108040000008204ca
00030001080400010012054c00030001080400020004055e000300010804
000300120562000300010804000400120574000300010804000500180586
00030001080400060012059e0003000108040007005805b0000300010804
0008003e06080003000108040009003e0646000300010804000b00380684
000300010804000c003806bca920436f70797269676874205a484f4e4759
4920456c656374726f6e696320436f2e20323030315255494358532b5369
6d53756e526567756c61725255494358532b53696d53756e525549435853
2b53696d53756e56657273696f6e20352e30345255494358532b53696d53
756e54726164656d61726b206f66205a484f4e47594920456c656374726f
6e696320436f2e2c204265696a696e6700a900200043006f007000790072
00690067006800740020005a0048004f004e00470059004900200045006c
0065006300740072006f006e0069006300200043006f002e002000320030
00300031005200550049004300580053002b00530069006d00530075006e
0052006500670075006c00610072005200550049004300580053002b0053
0069006d00530075006e005200550049004300580053002b00530069006d
00530075006e00560065007200730069006f006e00200035002e00300034
005200550049004300580053002b00530069006d00530075006e00540072
006100640065006d00610072006b0020006f00660020005a0048004f004e
00470059004900200045006c0065006300740072006f006e006900630020
0043006f002e002c0020004200650069006a0069006e00670059006f0075
0020006d0061007900200075007300650020007400680069007300200066
006f006e007400200074006f00200064006900730070006c006100790020
0061006e00640020007000720069006e007400200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
00200062007900200074006800650020006c006900630065006e00730065
0020007400650072006d007300200066006f007200200074006800650020
00700072006f006400750063007400200069006e00200077006800690063
00680020007400680069007300200066006f006e00740020006900730020
0069006e0063006c0075006400650064002e00200059006f00750020006d
006100790020006f006e006c0079002000280069002900200065006d0062
006500640020007400680069007300200066006f006e007400200069006e
00200063006f006e00740065006e00740020006100730020007000650072
006d00690074007400650064002000620079002000740068006500200065
006d00620065006400640069006e00670020007200650073007400720069
006300740069006f006e007300200069006e0063006c0075006400650064
00200069006e0020007400680069007300200066006f006e0074003b0020
0061006e006400200028006900690029002000740065006d0070006f0072
006100720069006c007900200064006f0077006e006c006f006100640020
007400680069007300200066006f006e007400200074006f002000610020
007000720069006e0074006500720020006f00720020006f007400680065
00720020006f007500740070007500740020006400650076006900630065
00200074006f002000680065006c00700020007000720069006e00740020
0063006f006e00740065006e0074002e0068007400740070003a002f002f
007700770077002e006d006900630072006f0073006f00660074002e0063
006f006d002f007400790070006f006700720061007000680079002f0066
006f006e0074007300a900200043006f0070007900720069006700680074
0020005a0048004f004e00470059004900200045006c0065006300740072
006f006e0069006300200043006f002e00200032003000300031000d000a
5b574f536570636e753153174eac4e2d66134e2d680775355b504fe1606f
6280672f67099650516c53f863d04f9b3002005200550049004300580053
002b5b8b4f535e3889c4005200550049004300580053002b5b8b4f530052
00550049004300580053002b5b8b4f5300560065007200730069006f006e
00200035002e00300034005200550049004300580053002b5b8b4f530054
0072006100640065006d00610072006b0020006f00660020005a0048004f
004e00470059004900200045006c0065006300740072006f006e00690063
00200043006f002e002c0020004200650069006a0069006e006700420065
0069006a0069006e00670020005a0068006f006e00670059006900200045
006c0065006300740072006f006e00690063007300200043006f002e0042
00650069006a0069006e00670020005a0068006f006e0067005900690020
0045006c0065006300740072006f006e00690063007300200043006f002e
0068007400740070003a002f002f007700770077002e007a0068006f006e
006700790069006300740073002e0063006f006d002e0063006e00680074
00740070003a002f002f007700770077002e007a0068006f006e00670079
0069006300740073002e0063006f006d002e0063006e0000411a01110110
003200280110010e00280028010f010e00280028010c010d00460028010d
010e00280028010e010d00180028010c010db346285001b801ff858d001d
b0324b5258b0801d59b801064568b801062344b801044568b801042344b8
01054568b801044560b801052344b801024568b801044560b801022344b8
01034568b801024560b801032344b801004568b801044560b801002344b8
01014568b801004560b801012344012b2b2b2b2b2b2b000000>
[2913 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2682 15 <0005000affef00f500d1001600450049004d005100003734271707153337
172315333717232207273335230727373427170715333717231533371723
1e01171506072e0127230e0107273e013723220727333523072733342717
071d0233350715333507153335750117091b0c12393f0f15ad0d0b095e22
0b0864011708170d133718111752112e1610021a2609360f301a011e2307
250d0b093f200b08330117084b4b4b4b4b2319130b061b0c12250f150309
2502088d120f0a07100d1351111714120204030a0a1d12182108040e210e
030951020810100b070e0617171d17171d171700>DTOAAA+SimSun AddT42Char 

1 0 0 <> DTOAAA+SimSun AddT42Char 
DTOAAA+SimSun /CharStrings get begin
/g15 15 def
end
DTOAAA+SimSun /Encoding get
dup 250 /g15 put
pop
end
%ADOEndSubsetFont
/KEVNZD+SimSun /DTOAAA+SimSun findfont ct_VMDictPut
/KEVNZD+SimSun*1 
[250{/.notdef}rp /g15 5{/.notdef}rp]
KEVNZD+SimSun nf
KEVNZD+SimSun*1 [16 0 0 -16 0 0 ]msf
167.064 225.61 mo
(\372)sh
182.824 229.074 mo
183.304 229.074 li
@
182.824 229.074 mo
199.304 229.074 li
@
%ADOBeginSubsetFont: XSAAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /XSAAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966a11a4f8900000f340000253068656164e34ba941000003f40000
003668686561020001240000042c00000024686d7478460003c900000450
0000011c6c6f636126b230120000056c000000906d61787002033f570000
05fc000000206e616d651429e2f90000061c000008627072657005dc4fcc
00000e80000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
87e746315f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000047010000000000
00000100000e0100000e01000009010000100100000a0100000c01000012
0100000e0100000f0100000b0100000a0100000a01000009010000130100
000b0100000b0100000a0100002201000021010000180100000d0100000c
0100000a0100000a0100000d0100000f0100000d0100000c0100000d0100
000a010000100100000f0100001b0100000f010000140100002101000012
0100000f0100000a0100000e0100000e010000110100000e0100000e0100
000c0100000e0100000f0100000a0100000b01000010010000090100000c
0100000a0100000c010000080100000a0100000a0100000d0100000a0100
000a010000090100000b010000270100000a010000090100000b01000009
0100000a0100000c0000000000000010002f0061009600ba00d900fb012e
016901ba01e70231026702bb03160355038603bc0415047404bf04f30552
05bb05ef06220657068c06d0074c078a07da080e085f08b208db091d097a
09f60a100a3b0a740aa70ada0b140b710bc70c070c680cbf0d2f0d550d94
0dca0e230e650ea50ee80f3c0fa00ff51043108610da112e118a11d3123c
1298000100000047016c00310000000000010000002f0029000001613dbb
000000000000001e016e0001000000000000002700000001000000000001
000d00270001000000000002000700340001000000000003000d003b0001
000000000004000d00480001000000000005000c00550001000000000006
000d00610001000000000007002c006e0003000104090000004e009a0003
000104090001001a00e80003000104090002000e01020003000104090003
001a01100003000104090004001a012a0003000104090005001801440003
000104090006001a015c000300010409000700580176000300010409000d
02aa01ce000300010409000e005204780003000108040000008204ca0003
0001080400010012054c00030001080400020004055e0003000108040003
001205620003000108040004001205740003000108040005001805860003
0001080400060012059e0003000108040007005805b00003000108040008
003e06080003000108040009003e0646000300010804000b003806840003
00010804000c003806bca920436f70797269676874205a484f4e47594920
456c656374726f6e696320436f2e20323030314656565643572b53696d53
756e526567756c61724656565643572b53696d53756e4656565643572b53
696d53756e56657273696f6e20352e30344656565643572b53696d53756e
54726164656d61726b206f66205a484f4e47594920456c656374726f6e69
6320436f2e2c204265696a696e6700a900200043006f0070007900720069
0067006800740020005a0048004f004e00470059004900200045006c0065
006300740072006f006e0069006300200043006f002e0020003200300030
0031004600560056005600430057002b00530069006d00530075006e0052
006500670075006c00610072004600560056005600430057002b00530069
006d00530075006e004600560056005600430057002b00530069006d0053
0075006e00560065007200730069006f006e00200035002e003000340046
00560056005600430057002b00530069006d00530075006e005400720061
00640065006d00610072006b0020006f00660020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e002c0020004200650069006a0069006e00670059006f00750020
006d0061007900200075007300650020007400680069007300200066006f
006e007400200074006f00200064006900730070006c0061007900200061
006e00640020007000720069006e007400200063006f006e00740065006e
00740020006100730020007000650072006d006900740074006500640020
0062007900200074006800650020006c006900630065006e007300650020
007400650072006d007300200066006f0072002000740068006500200070
0072006f006400750063007400200069006e002000770068006900630068
0020007400680069007300200066006f006e007400200069007300200069
006e0063006c0075006400650064002e00200059006f00750020006d0061
00790020006f006e006c0079002000280069002900200065006d00620065
00640020007400680069007300200066006f006e007400200069006e0020
0063006f006e00740065006e00740020006100730020007000650072006d
00690074007400650064002000620079002000740068006500200065006d
00620065006400640069006e006700200072006500730074007200690063
00740069006f006e007300200069006e0063006c00750064006500640020
0069006e0020007400680069007300200066006f006e0074003b00200061
006e006400200028006900690029002000740065006d0070006f00720061
00720069006c007900200064006f0077006e006c006f0061006400200074
00680069007300200066006f006e007400200074006f0020006100200070
00720069006e0074006500720020006f00720020006f0074006800650072
0020006f0075007400700075007400200064006500760069006300650020
0074006f002000680065006c00700020007000720069006e007400200063
006f006e00740065006e0074002e0068007400740070003a002f002f0077
00770077002e006d006900630072006f0073006f00660074002e0063006f
006d002f007400790070006f006700720061007000680079002f0066006f
006e0074007300a900200043006f00700079007200690067006800740020
005a0048004f004e00470059004900200045006c0065006300740072006f
006e0069006300200043006f002e00200032003000300031000d000a5b57
4f536570636e753153174eac4e2d66134e2d680775355b504fe1606f6280
672f67099650516c53f863d04f9b3002004600560056005600430057002b
5b8b4f535e3889c4004600560056005600430057002b5b8b4f5300460056
0056005600430057002b5b8b4f5300560065007200730069006f006e0020
0035002e00300034004600560056005600430057002b5b8b4f5300540072
006100640065006d00610072006b0020006f00660020005a0048004f004e
00470059004900200045006c0065006300740072006f006e006900630020
0043006f002e002c0020004200650069006a0069006e0067004200650069
006a0069006e00670020005a0068006f006e00670059006900200045006c
0065006300740072006f006e00690063007300200043006f002e00420065
0069006a0069006e00670020005a0068006f006e00670059006900200045
006c0065006300740072006f006e00690063007300200043006f002e0068
007400740070003a002f002f007700770077002e007a0068006f006e0067
00790069006300740073002e0063006f006d002e0063006e006800740074
0070003a002f002f007700770077002e007a0068006f006e006700790069
006300740073002e0063006f006d002e0063006e0000411a011101100032
00280110010e00280028010f010e00280028010c010d00460028010d010e
00280028010e010d00180028010c010db346285001b801ff858d001db032
4b5258b0801d59b801064568b801062344b801044568b801042344b80105
4568b801044560b801052344b801024568b801044560b801022344b80103
4568b801024560b801032344b801004568b801044560b801002344b80101
4568b801004560b801012344012b2b2b2b2b2b2b000000>
[9521 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 5152 42 <0001000effeb00f100c9001c00003716323d012322072733352322072733
371723153337172315160734274d1714490d0b096a2a0d0b09860e144e44
10166a01192208040d5803094603090e144610166016080f0900>XSAAAA+SimSun AddT42Char 

1 0 0 <> XSAAAA+SimSun AddT42Char 
XSAAAA+SimSun /CharStrings get begin
/g42 42 def
end
XSAAAA+SimSun /Encoding get
dup 142 /g42 put
pop
end
%ADOEndSubsetFont
/KEVNZE+SimSun /XSAAAA+SimSun findfont ct_VMDictPut
/KEVNZE+SimSun*1 
[142{/.notdef}rp /g42 113{/.notdef}rp]
KEVNZE+SimSun nf
KEVNZE+SimSun*1 [16 0 0 -16 0 0 ]msf
183.064 225.61 mo
(\216)sh
198.824 229.074 mo
199.304 229.074 li
@
198.824 229.074 mo
215.304 229.074 li
@
%ADOBeginSubsetFont: XSAAAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XSAAAA+SimSun gcheck setglobal} if
1 1230 15 <00030013ffe600ed00d200290030003600003716323d012307273e013723
220727333637170607333717230607333427170715333717231516072627
37170e01072736371e010626275817113c090e091713280d0b094b0f0114
080c540e147816153b0117082d0d134d011701200314092d23022f613911
0c162b02040754090d051d230309200a0c06180e14291a1e0e0b071a0d13
5911090d0b5010022b160423262218162924>XSAAAA+SimSun AddT42Char 
XSAAAA+SimSun /CharStrings get begin
/g15 15 def
end
XSAAAA+SimSun /Encoding get
dup 28 /g15 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNZE+SimSun*1 
[28{/.notdef}rp /g15 113{/.notdef}rp /g42 113{/.notdef}rp]
KEVNZE+SimSun nf
KEVNZE+SimSun*1 [16 0 0 -16 0 0 ]msf
199.064 225.61 mo
(\034)sh
214.824 229.074 mo
215.304 229.074 li
@
214.824 229.074 mo
231.304 229.074 li
@
%ADOBeginSubsetFont: GFNBAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GFNBAA+SimSun gcheck setglobal} if
1 6354 33 <0004000affe600f600d10027002b0032005300003715141707363d01230e
0107273e01372307273335230727333e0137170e01073337172315333717
27153335271e010e01262707342717071533371723153717071514073427
3516363735060727363735230727c80110012c011f1902121902170a0829
08090849071002160a140b180d13260e0d13682c421808040b060e410118
090a0b11262102231619150b011c010d0a20180a084c440a10081f0b3c28
2e0f030e2f2502083d02080c230d0f031c0e0d133d0d13433d3d3f100f0c
0a1f143726150b08280b112c1104175712080b090403010c471306120211
32020800>GFNBAA+SimSun AddT42Char 
GFNBAA+SimSun /CharStrings get begin
/g33 33 def
end
GFNBAA+SimSun /Encoding get
dup 252 /g33 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNYS+SimSun*1 
[128{/.notdef}rp /g20 123{/.notdef}rp /g33 3{/.notdef}rp]
KEVNYS+SimSun nf
KEVNYS+SimSun*1 [16 0 0 -16 0 0 ]msf
215.064 225.61 mo
(\374)sh
230.824 229.074 mo
231.304 229.074 li
@
230.824 229.074 mo
247.304 229.074 li
@
%ADOBeginSubsetFont: FLEAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /FLEAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966999333e600000dcc0000080e68656164e34ba941000003f40000
003668686561020000e80000042c00000024686d74780a00006b00000450
0000002c6c6f636107fc0a410000047c000000186d61787001c73f570000
0494000000206e616d65002ce71e000004b4000008627072657005dc4fcc
00000d18000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
e6201c615f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe0000010000010000000000000000000000000000000b010000000000
0000010000100100000b0100000e0100000a0100000b010000090100000d
0100000e01000009000000000000004e00c4010d017b01f6026d02e90350
040700010000000b016c00310000000000010000002f0029000001613dbb
000000000000001e016e0001000000000000002700000001000000000001
000d00270001000000000002000700340001000000000003000d003b0001
000000000004000d00480001000000000005000c00550001000000000006
000d00610001000000000007002c006e0003000104090000004e009a0003
000104090001001a00e80003000104090002000e01020003000104090003
001a01100003000104090004001a012a0003000104090005001801440003
000104090006001a015c000300010409000700580176000300010409000d
02aa01ce000300010409000e005204780003000108040000008204ca0003
0001080400010012054c00030001080400020004055e0003000108040003
001205620003000108040004001205740003000108040005001805860003
0001080400060012059e0003000108040007005805b00003000108040008
003e06080003000108040009003e0646000300010804000b003806840003
00010804000c003806bca920436f70797269676874205a484f4e47594920
456c656374726f6e696320436f2e20323030315055544d46582b53696d53
756e526567756c61725055544d46582b53696d53756e5055544d46582b53
696d53756e56657273696f6e20352e30345055544d46582b53696d53756e
54726164656d61726b206f66205a484f4e47594920456c656374726f6e69
6320436f2e2c204265696a696e6700a900200043006f0070007900720069
0067006800740020005a0048004f004e00470059004900200045006c0065
006300740072006f006e0069006300200043006f002e0020003200300030
0031005000550054004d00460058002b00530069006d00530075006e0052
006500670075006c00610072005000550054004d00460058002b00530069
006d00530075006e005000550054004d00460058002b00530069006d0053
0075006e00560065007200730069006f006e00200035002e003000340050
00550054004d00460058002b00530069006d00530075006e005400720061
00640065006d00610072006b0020006f00660020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e002c0020004200650069006a0069006e00670059006f00750020
006d0061007900200075007300650020007400680069007300200066006f
006e007400200074006f00200064006900730070006c0061007900200061
006e00640020007000720069006e007400200063006f006e00740065006e
00740020006100730020007000650072006d006900740074006500640020
0062007900200074006800650020006c006900630065006e007300650020
007400650072006d007300200066006f0072002000740068006500200070
0072006f006400750063007400200069006e002000770068006900630068
0020007400680069007300200066006f006e007400200069007300200069
006e0063006c0075006400650064002e00200059006f00750020006d0061
00790020006f006e006c0079002000280069002900200065006d00620065
00640020007400680069007300200066006f006e007400200069006e0020
0063006f006e00740065006e00740020006100730020007000650072006d
00690074007400650064002000620079002000740068006500200065006d
00620065006400640069006e006700200072006500730074007200690063
00740069006f006e007300200069006e0063006c00750064006500640020
0069006e0020007400680069007300200066006f006e0074003b00200061
006e006400200028006900690029002000740065006d0070006f00720061
00720069006c007900200064006f0077006e006c006f0061006400200074
00680069007300200066006f006e007400200074006f0020006100200070
00720069006e0074006500720020006f00720020006f0074006800650072
0020006f0075007400700075007400200064006500760069006300650020
0074006f002000680065006c00700020007000720069006e007400200063
006f006e00740065006e0074002e0068007400740070003a002f002f0077
00770077002e006d006900630072006f0073006f00660074002e0063006f
006d002f007400790070006f006700720061007000680079002f0066006f
006e0074007300a900200043006f00700079007200690067006800740020
005a0048004f004e00470059004900200045006c0065006300740072006f
006e0069006300200043006f002e00200032003000300031000d000a5b57
4f536570636e753153174eac4e2d66134e2d680775355b504fe1606f6280
672f67099650516c53f863d04f9b3002005000550054004d00460058002b
5b8b4f535e3889c4005000550054004d00460058002b5b8b4f5300500055
0054004d00460058002b5b8b4f5300560065007200730069006f006e0020
0035002e00300034005000550054004d00460058002b5b8b4f5300540072
006100640065006d00610072006b0020006f00660020005a0048004f004e
00470059004900200045006c0065006300740072006f006e006900630020
0043006f002e002c0020004200650069006a0069006e0067004200650069
006a0069006e00670020005a0068006f006e00670059006900200045006c
0065006300740072006f006e00690063007300200043006f002e00420065
0069006a0069006e00670020005a0068006f006e00670059006900200045
006c0065006300740072006f006e00690063007300200043006f002e0068
007400740070003a002f002f007700770077002e007a0068006f006e0067
00790069006300740073002e0063006f006d002e0063006e006800740074
0070003a002f002f007700770077002e007a0068006f006e006700790069
006300740073002e0063006f006d002e0063006e0000411a011101100032
00280110010e00280028010f010e00280028010c010d00460028010d010e
00280028010e010d00180028010c010db346285001b801ff858d001db032
4b5258b0801d59b801064568b801062344b801044568b801042344b80105
4568b801044560b801052344b801024568b801044560b801022344b80103
4568b801024560b801032344b801004568b801044560b801002344b80101
4568b801004560b801012344012b2b2b2b2b2b2b000000>
[2063 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 0 2 <00030010ffeb00ec00c70019001d00370000370714170735231507363427
1733352322072733371723153337271533351715143a01361e01062b0122
373523140607273e013723153335e308010e9b0e01010e2d34080b09ba0f
134c2c0766260d0c0c0906030808151301261b18021512012d9b83087313
07141007157814082f03090e142f0b242f2f353c0904050a0110412b2b10
03132b257676>FLEAAA+SimSun AddT42Char 

1 0 0 <> FLEAAA+SimSun AddT42Char 
FLEAAA+SimSun /CharStrings get begin
/g2 2 def
end
FLEAAA+SimSun /Encoding get
dup 127 /g2 put
pop
end
%ADOEndSubsetFont
/KEVNZF+SimSun /FLEAAA+SimSun findfont ct_VMDictPut
/KEVNZF+SimSun*1 
[127{/.notdef}rp /g2 128{/.notdef}rp]
KEVNZF+SimSun nf
KEVNZF+SimSun*1 [16 0 0 -16 0 0 ]msf
231.064 225.61 mo
(\177)sh
246.824 229.074 mo
247.304 229.074 li
@
246.824 229.074 mo
263.304 229.074 li
@
%ADOBeginSubsetFont: IRRAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /IRRAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c79665e578ab800000e640000175a68656164e34ba941000003f40000
003668686561020001010000042c00000024686d7478230001f700000450
000000906c6f636162105c37000004e00000004a6d61787001e03f570000
052c000000206e616d65fc41db310000054c000008627072657005dc4fcc
00000db0000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
dbbb45955f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000024010000000000
0000010000130100000c0100000d0100000f0100000c0100001001000009
0100000a010000120100000c010000090100000e0100000b0100000f0100
000f0100000e010000290100000a0100000c0100000d010000110100000e
0100000a0100000b010000120100000c0100000c0100000a0100000c0100
000f0100000e01000020010000090100001b0000000000000045008000d9
012a017801e002070250029402c70312036203b503ff046304f00537059b
05ef0636068b06e9074a079c0802086808d609710a110a430ab60aff0b42
0bad0000000100000024016c00310000000000010000002f002900000161
3dbb000000000000001e016e000100000000000000270000000100000000
0001000d00270001000000000002000700340001000000000003000d003b
0001000000000004000d00480001000000000005000c0055000100000000
0006000d00610001000000000007002c006e0003000104090000004e009a
0003000104090001001a00e80003000104090002000e0102000300010409
0003001a01100003000104090004001a012a000300010409000500180144
0003000104090006001a015c000300010409000700580176000300010409
000d02aa01ce000300010409000e005204780003000108040000008204ca
00030001080400010012054c00030001080400020004055e000300010804
000300120562000300010804000400120574000300010804000500180586
00030001080400060012059e0003000108040007005805b0000300010804
0008003e06080003000108040009003e0646000300010804000b00380684
000300010804000c003806bca920436f70797269676874205a484f4e4759
4920456c656374726f6e696320436f2e2032303031544c515550502b5369
6d53756e526567756c6172544c515550502b53696d53756e544c51555050
2b53696d53756e56657273696f6e20352e3034544c515550502b53696d53
756e54726164656d61726b206f66205a484f4e47594920456c656374726f
6e696320436f2e2c204265696a696e6700a900200043006f007000790072
00690067006800740020005a0048004f004e00470059004900200045006c
0065006300740072006f006e0069006300200043006f002e002000320030
003000310054004c0051005500500050002b00530069006d00530075006e
0052006500670075006c006100720054004c0051005500500050002b0053
0069006d00530075006e0054004c0051005500500050002b00530069006d
00530075006e00560065007200730069006f006e00200035002e00300034
0054004c0051005500500050002b00530069006d00530075006e00540072
006100640065006d00610072006b0020006f00660020005a0048004f004e
00470059004900200045006c0065006300740072006f006e006900630020
0043006f002e002c0020004200650069006a0069006e00670059006f0075
0020006d0061007900200075007300650020007400680069007300200066
006f006e007400200074006f00200064006900730070006c006100790020
0061006e00640020007000720069006e007400200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
00200062007900200074006800650020006c006900630065006e00730065
0020007400650072006d007300200066006f007200200074006800650020
00700072006f006400750063007400200069006e00200077006800690063
00680020007400680069007300200066006f006e00740020006900730020
0069006e0063006c0075006400650064002e00200059006f00750020006d
006100790020006f006e006c0079002000280069002900200065006d0062
006500640020007400680069007300200066006f006e007400200069006e
00200063006f006e00740065006e00740020006100730020007000650072
006d00690074007400650064002000620079002000740068006500200065
006d00620065006400640069006e00670020007200650073007400720069
006300740069006f006e007300200069006e0063006c0075006400650064
00200069006e0020007400680069007300200066006f006e0074003b0020
0061006e006400200028006900690029002000740065006d0070006f0072
006100720069006c007900200064006f0077006e006c006f006100640020
007400680069007300200066006f006e007400200074006f002000610020
007000720069006e0074006500720020006f00720020006f007400680065
00720020006f007500740070007500740020006400650076006900630065
00200074006f002000680065006c00700020007000720069006e00740020
0063006f006e00740065006e0074002e0068007400740070003a002f002f
007700770077002e006d006900630072006f0073006f00660074002e0063
006f006d002f007400790070006f006700720061007000680079002f0066
006f006e0074007300a900200043006f0070007900720069006700680074
0020005a0048004f004e00470059004900200045006c0065006300740072
006f006e0069006300200043006f002e00200032003000300031000d000a
5b574f536570636e753153174eac4e2d66134e2d680775355b504fe1606f
6280672f67099650516c53f863d04f9b30020054004c0051005500500050
002b5b8b4f535e3889c40054004c0051005500500050002b5b8b4f530054
004c0051005500500050002b5b8b4f5300560065007200730069006f006e
00200035002e003000340054004c0051005500500050002b5b8b4f530054
0072006100640065006d00610072006b0020006f00660020005a0048004f
004e00470059004900200045006c0065006300740072006f006e00690063
00200043006f002e002c0020004200650069006a0069006e006700420065
0069006a0069006e00670020005a0068006f006e00670059006900200045
006c0065006300740072006f006e00690063007300200043006f002e0042
00650069006a0069006e00670020005a0068006f006e0067005900690020
0045006c0065006300740072006f006e00690063007300200043006f002e
0068007400740070003a002f002f007700770077002e007a0068006f006e
006700790069006300740073002e0063006f006d002e0063006e00680074
00740070003a002f002f007700770077002e007a0068006f006e00670079
0069006300740073002e0063006f006d002e0063006e0000411a01110110
003200280110010e00280028010f010e00280028010c010d00460028010d
010e00280028010e010d00180028010c010db346285001b801ff858d001d
b0324b5258b0801d59b801064568b801062344b801044568b801042344b8
01054568b801044560b801052344b801024568b801044560b801022344b8
01034568b801024560b801032344b801004568b801044560b801002344b8
01014568b801004560b801012344012b2b2b2b2b2b2b000000>
[5979 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 4834 30 <0005000cffe500f200cf0035003b00480062006a00003736372307273336
35170607333717230607333717230607333717231e01171506072e012723
0e0107273e013723072733363723072f01371e0106261706141622263e01
2737163637170607333717230e0107353e01372307273336372307273337
1707371e02062e01800202210c0836021607032d0c124c02022b0b114903
05470c12440d2b150e040d260d1e0a281702142009170d082e0503120d08
420222010d092a21030f09080115010a11224d0102270c1246072a1f1922
072a0d084002010c0c08330a101f01201b060711138d0b0c0208190c0a04
170c120b0c0b110c0a0c1212130103030a041a18121e0a030b1d0f020809
0d0208340214140b1e115b1d2b0c1b1c06040201595b0e0f0c12181b0804
0a191402080e0f02080a1031040a0e0f0b130f00>IRRAAA+SimSun AddT42Char 

1 0 0 <> IRRAAA+SimSun AddT42Char 
IRRAAA+SimSun /CharStrings get begin
/g30 30 def
end
IRRAAA+SimSun /Encoding get
dup 209 /g30 put
pop
end
%ADOEndSubsetFont
/KEVNZG+SimSun /IRRAAA+SimSun findfont ct_VMDictPut
/KEVNZG+SimSun*1 
[209{/.notdef}rp /g30 46{/.notdef}rp]
KEVNZG+SimSun nf
KEVNZG+SimSun*1 [16 0 0 -16 0 0 ]msf
247.064 225.61 mo
(\321)sh
262.824 229.074 mo
263.304 229.074 li
@
262.824 229.074 mo
279.304 229.074 li
@
%ADOBeginSubsetFont: FXYAAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal FXYAAA+SimSun gcheck setglobal} if
1 206 4 <0005001fffea00ec00d100030007001c0035003b00003715333507153335
37141707352315073634271733363717060733371737170607333717070e
020726273516323637230607273e01071e010626272d3434340d010e340e
01010f0a0a01160a11210a0f27160811360b0f0902070d0e051c19160502
3a12140315140d180b10070e974040464646407524081511082f5d2e0922
120c05230a0f380d05240b0f07751f0c051008050522701d140220324912
18142813>FXYAAA+SimSun AddT42Char 
FXYAAA+SimSun /CharStrings get begin
/g4 4 def
end
FXYAAA+SimSun /Encoding get
dup 132 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNZC+SimSun*1 
[132{/.notdef}rp /g4 105{/.notdef}rp /g7 17{/.notdef}rp]
KEVNZC+SimSun nf
KEVNZC+SimSun*1 [16 0 0 -16 0 0 ]msf
263.064 225.61 mo
(\204)sh
278.824 229.074 mo
279.304 229.074 li
@
278.824 229.074 mo
295.304 229.074 li
@
KEVNYP+SimSun*1 [16 0 0 -16 0 0 ]msf
279.064 225.61 mo
(5)sh
294.824 229.074 mo
295.304 229.074 li
@
294.824 229.074 mo
311.304 229.074 li
@
KEVNYQ+SimSun*1 [16 0 0 -16 0 0 ]msf
295.064 225.61 mo
(P)sh
310.824 229.074 mo
311.304 229.074 li
@
310.824 229.074 mo
327.304 229.074 li
@
KEVNYR+SimSun*1 [16 0 0 -16 0 0 ]msf
311.064 225.61 mo
(\321)sh
326.824 229.074 mo
327.304 229.074 li
@
326.824 229.074 mo
343.304 229.074 li
@
KEVNYS+SimSun*1 [16 0 0 -16 0 0 ]msf
327.064 225.61 mo
(\200)sh
342.824 229.074 mo
343.304 229.074 li
@
342.824 229.074 mo
359.304 229.074 li
@
KEVNYT+SimSun*1 [16 0 0 -16 0 0 ]msf
343.064 225.61 mo
(')sh
358.824 229.074 mo
359.304 229.074 li
@
358.824 229.074 mo
375.304 229.074 li
@
KEVNYQ+SimSun*1 [16 0 0 -16 0 0 ]msf
359.064 225.61 mo
(f)sh
374.824 229.074 mo
375.304 229.074 li
@
374.824 229.074 mo
391.304 229.074 li
@
%ADOBeginSubsetFont: RDHAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /RDHAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966468fb8d900000dec00000ae068656164e34ba941000003f40000
003668686561020000ed0000042c00000024686d74780f0000bd00000450
000000406c6f63611546129c00000490000000226d61787001cc3f570000
04b4000000206e616d65f3bccd6f000004d4000008627072657005dc4fcc
00000d38000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
7fd8fb2d5f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000010010000000000
000001000011010000090100000b0100000b0100000f0100000b0100000d
0100000a0100000b0100000a0100000a010000260100000f010000080000
00000000006000e60178019e01ca0219026702e8037503cf043b048204e3
05700000000100000010016c00310000000000010000002f002900000161
3dbb000000000000001e016e000100000000000000270000000100000000
0001000d00270001000000000002000700340001000000000003000d003b
0001000000000004000d00480001000000000005000c0055000100000000
0006000d00610001000000000007002c006e0003000104090000004e009a
0003000104090001001a00e80003000104090002000e0102000300010409
0003001a01100003000104090004001a012a000300010409000500180144
0003000104090006001a015c000300010409000700580176000300010409
000d02aa01ce000300010409000e005204780003000108040000008204ca
00030001080400010012054c00030001080400020004055e000300010804
000300120562000300010804000400120574000300010804000500180586
00030001080400060012059e0003000108040007005805b0000300010804
0008003e06080003000108040009003e0646000300010804000b00380684
000300010804000c003806bca920436f70797269676874205a484f4e4759
4920456c656374726f6e696320436f2e2032303031414945554e572b5369
6d53756e526567756c6172414945554e572b53696d53756e414945554e57
2b53696d53756e56657273696f6e20352e3034414945554e572b53696d53
756e54726164656d61726b206f66205a484f4e47594920456c656374726f
6e696320436f2e2c204265696a696e6700a900200043006f007000790072
00690067006800740020005a0048004f004e00470059004900200045006c
0065006300740072006f006e0069006300200043006f002e002000320030
003000310041004900450055004e0057002b00530069006d00530075006e
0052006500670075006c006100720041004900450055004e0057002b0053
0069006d00530075006e0041004900450055004e0057002b00530069006d
00530075006e00560065007200730069006f006e00200035002e00300034
0041004900450055004e0057002b00530069006d00530075006e00540072
006100640065006d00610072006b0020006f00660020005a0048004f004e
00470059004900200045006c0065006300740072006f006e006900630020
0043006f002e002c0020004200650069006a0069006e00670059006f0075
0020006d0061007900200075007300650020007400680069007300200066
006f006e007400200074006f00200064006900730070006c006100790020
0061006e00640020007000720069006e007400200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
00200062007900200074006800650020006c006900630065006e00730065
0020007400650072006d007300200066006f007200200074006800650020
00700072006f006400750063007400200069006e00200077006800690063
00680020007400680069007300200066006f006e00740020006900730020
0069006e0063006c0075006400650064002e00200059006f00750020006d
006100790020006f006e006c0079002000280069002900200065006d0062
006500640020007400680069007300200066006f006e007400200069006e
00200063006f006e00740065006e00740020006100730020007000650072
006d00690074007400650064002000620079002000740068006500200065
006d00620065006400640069006e00670020007200650073007400720069
006300740069006f006e007300200069006e0063006c0075006400650064
00200069006e0020007400680069007300200066006f006e0074003b0020
0061006e006400200028006900690029002000740065006d0070006f0072
006100720069006c007900200064006f0077006e006c006f006100640020
007400680069007300200066006f006e007400200074006f002000610020
007000720069006e0074006500720020006f00720020006f007400680065
00720020006f007500740070007500740020006400650076006900630065
00200074006f002000680065006c00700020007000720069006e00740020
0063006f006e00740065006e0074002e0068007400740070003a002f002f
007700770077002e006d006900630072006f0073006f00660074002e0063
006f006d002f007400790070006f006700720061007000680079002f0066
006f006e0074007300a900200043006f0070007900720069006700680074
0020005a0048004f004e00470059004900200045006c0065006300740072
006f006e0069006300200043006f002e00200032003000300031000d000a
5b574f536570636e753153174eac4e2d66134e2d680775355b504fe1606f
6280672f67099650516c53f863d04f9b30020041004900450055004e0057
002b5b8b4f535e3889c40041004900450055004e0057002b5b8b4f530041
004900450055004e0057002b5b8b4f5300560065007200730069006f006e
00200035002e003000340041004900450055004e0057002b5b8b4f530054
0072006100640065006d00610072006b0020006f00660020005a0048004f
004e00470059004900200045006c0065006300740072006f006e00690063
00200043006f002e002c0020004200650069006a0069006e006700420065
0069006a0069006e00670020005a0068006f006e00670059006900200045
006c0065006300740072006f006e00690063007300200043006f002e0042
00650069006a0069006e00670020005a0068006f006e0067005900690020
0045006c0065006300740072006f006e00690063007300200043006f002e
0068007400740070003a002f002f007700770077002e007a0068006f006e
006700790069006300740073002e0063006f006d002e0063006e00680074
00740070003a002f002f007700770077002e007a0068006f006e00670079
0069006300740073002e0063006f006d002e0063006e0000411a01110110
003200280110010e00280028010f010e00280028010c010d00460028010d
010e00280028010e010d00180028010c010db346285001b801ff858d001d
b0324b5258b0801d59b801064568b801062344b801044568b801042344b8
01054568b801044560b801052344b801024568b801044560b801022344b8
01034568b801024560b801032344b801004568b801044560b801002344b8
01014568b801004560b801012344012b2b2b2b2b2b2b000000>
[2785 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2308 14 <0003000fffe600f300d10011002f004200003f0117060727363d01342717
0715333717233734271707153e0137170e010715143b01323637331e0117
0e012b010635171417073635232207273334271707153337173c39023a07
0c04011708270b11434a011708131812110e1f210e290806010401040905
0d0a351501011001490d0b096a0118094610166311031a0a100308332313
0a08220b111511130b0828090f101002100c200b1016101202090501113a
2f100916320309170e0b07131016>RDHAAA+SimSun AddT42Char 

1 0 0 <> RDHAAA+SimSun AddT42Char 
RDHAAA+SimSun /CharStrings get begin
/g14 14 def
end
RDHAAA+SimSun /Encoding get
dup 213 /g14 put
pop
end
%ADOEndSubsetFont
/KEVNZH+SimSun /RDHAAA+SimSun findfont ct_VMDictPut
/KEVNZH+SimSun*1 
[213{/.notdef}rp /g14 42{/.notdef}rp]
KEVNZH+SimSun nf
KEVNZH+SimSun*1 [16 0 0 -16 0 0 ]msf
375.064 225.61 mo
(\325)sh
390.824 229.074 mo
391.304 229.074 li
@
390.824 229.074 mo
407.304 229.074 li
@
%ADOBeginSubsetFont: XSAAAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XSAAAA+SimSun gcheck setglobal} if
1 1122 14 <00020009fff700f700cc000500210000371e010626273734271707153335
34271707153637170706071533371723220727331a2e0612071e46011809
2901190a260e180b241d2f1016cd0d0b0954953f1f15323f1410150c08b8
a60e180c079039361105441d211016030900>XSAAAA+SimSun AddT42Char 
XSAAAA+SimSun /CharStrings get begin
/g14 14 def
end
XSAAAA+SimSun /Encoding get
dup 26 /g14 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNZE+SimSun*1 
[26{/.notdef}rp /g14 /.notdef /g15 113{/.notdef}rp /g42 113{/.notdef}rp]
KEVNZE+SimSun nf
KEVNZE+SimSun*1 [16 0 0 -16 0 0 ]msf
391.064 225.61 mo
(\032)sh
406.824 229.074 mo
407.304 229.074 li
@
406.824 229.074 mo
423.304 229.074 li
@
KEVNYY+SimSun*1 [16 0 0 -16 0 0 ]msf
407.064 225.61 mo
(\272)sh
422.824 229.074 mo
423.304 229.074 li
@
422.824 229.074 mo
493.463 229.074 li
@
KEVNYZ+SimSun*1 [16 0 0 -16 0 0 ]msf
423.064 225.61 mo
(\207)sh
%ADOBeginSubsetFont: UGXAAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
KEVNYU+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/X <1C60D8A8C9B6079F1E4952393F2A7772A1A265738C7CD6C02D42E3CC5029
87DFD803B1940234C883CE5BE3A359D490D56090EA7403B9E516EF7F35DBF7E0
92F463833B48DD63520852EA3ACCC22BA3E2433B2BAC9FFAEB3E194B42E9C096
1A074BCE1D0C84EE546FA95BF76747EF12BBD077DB40FC0576D8EE8008EF5ED2
A3E18730573682AEDE07C961C30BA6568AF8AD867C1636931B66C853E3947D9C
6E0458ACAB08BC8517B3E5245C03620C8D07DDD46E4E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KEVNYU+NimbusRomNo9L-Regu /Encoding get
dup 88 /X put
pop
%ADOEndSubsetFont
/KEVNYU+NimbusRomNo9L-Regu*1 
[65{/.notdef}rp /A /.notdef /C /D /E /F /G 
/H /I 2{/.notdef}rp /L /.notdef /N /O 2{/.notdef}rp 
/R /S /T /U /V /.notdef /X /Y 
166{/.notdef}rp]
KEVNYU+NimbusRomNo9L-Regu nf
KEVNYU+NimbusRomNo9L-Regu*1 [16 0 0 -16 0 0 ]msf
439.064 225.61 mo
(L)sh
KEVNYU+NimbusRomNo9L-Regu*1 [13.997 0 0 -13.997 0 0 ]msf
443.08 224.273 mo
(A)sh
KEVNYU+NimbusRomNo9L-Regu*1 [16 0 0 -16 0 0 ]msf
450.786 225.61 mo
(T)sh
457.895 229.21 mo
(E)sh
465.671 225.61 mo
(X)sh
%ADOBeginSubsetFont: CBIAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /CBIAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966f948a9c700000da40000029268656164e34ba941000003f40000
003668686561020000e10000042c00000024686d74780300001200000450
000000106c6f636101490099000004600000000a6d61787001c03f570000
046c000000206e616d65f7cbc8b50000048c000008627072657005dc4fcc
00000cf0000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
7d2fc59d5f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000004010000000000
00000100000901000009000000000000009901490000000100000004016c
00310000000000010000002f0029000001613dbb000000000000001e016e
0001000000000000002700000001000000000001000d0027000100000000
0002000700340001000000000003000d003b0001000000000004000d0048
0001000000000005000c00550001000000000006000d0061000100000000
0007002c006e0003000104090000004e009a0003000104090001001a00e8
0003000104090002000e01020003000104090003001a0110000300010409
0004001a012a0003000104090005001801440003000104090006001a015c
000300010409000700580176000300010409000d02aa01ce000300010409
000e005204780003000108040000008204ca00030001080400010012054c
00030001080400020004055e000300010804000300120562000300010804
00040012057400030001080400050018058600030001080400060012059e
0003000108040007005805b00003000108040008003e0608000300010804
0009003e0646000300010804000b00380684000300010804000c003806bc
a920436f70797269676874205a484f4e47594920456c656374726f6e6963
20436f2e20323030314b52534f41502b53696d53756e526567756c61724b
52534f41502b53696d53756e4b52534f41502b53696d53756e5665727369
6f6e20352e30344b52534f41502b53696d53756e54726164656d61726b20
6f66205a484f4e47594920456c656374726f6e696320436f2e2c20426569
6a696e6700a900200043006f00700079007200690067006800740020005a
0048004f004e00470059004900200045006c0065006300740072006f006e
0069006300200043006f002e00200032003000300031004b00520053004f
00410050002b00530069006d00530075006e0052006500670075006c0061
0072004b00520053004f00410050002b00530069006d00530075006e004b
00520053004f00410050002b00530069006d00530075006e005600650072
00730069006f006e00200035002e00300034004b00520053004f00410050
002b00530069006d00530075006e00540072006100640065006d00610072
006b0020006f00660020005a0048004f004e00470059004900200045006c
0065006300740072006f006e0069006300200043006f002e002c00200042
00650069006a0069006e00670059006f00750020006d0061007900200075
007300650020007400680069007300200066006f006e007400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
00650020006c006900630065006e007300650020007400650072006d0073
00200066006f00720020007400680065002000700072006f006400750063
007400200069006e00200077006800690063006800200074006800690073
00200066006f006e007400200069007300200069006e0063006c00750064
00650064002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e0074007300a90020
0043006f00700079007200690067006800740020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e00200032003000300031000d000a5b574f536570636e75315317
4eac4e2d66134e2d680775355b504fe1606f6280672f67099650516c53f8
63d04f9b3002004b00520053004f00410050002b5b8b4f535e3889c4004b
00520053004f00410050002b5b8b4f53004b00520053004f00410050002b
5b8b4f5300560065007200730069006f006e00200035002e00300034004b
00520053004f00410050002b5b8b4f5300540072006100640065006d0061
0072006b0020006f00660020005a0048004f004e00470059004900200045
006c0065006300740072006f006e0069006300200043006f002e002c0020
004200650069006a0069006e0067004200650069006a0069006e00670020
005a0068006f006e00670059006900200045006c0065006300740072006f
006e00690063007300200043006f002e004200650069006a0069006e0067
0020005a0068006f006e00670059006900200045006c0065006300740072
006f006e00690063007300200043006f002e0068007400740070003a002f
002f007700770077002e007a0068006f006e006700790069006300740073
002e0063006f006d002e0063006e0068007400740070003a002f002f0077
00770077002e007a0068006f006e006700790069006300740073002e0063
006f006d002e0063006e0000411a01110110003200280110010e00280028
010f010e00280028010c010d00460028010d010e00280028010e010d0018
0028010c010db346285001b801ff858d001db0324b5258b0801d59b80106
4568b801062344b801044568b801042344b801054568b801044560b80105
2344b801024568b801044560b801022344b801034568b801024560b80103
2344b801004568b801044560b801002344b801014568b801004560b80101
2344012b2b2b2b2b2b2b000000>
[659 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 0 2 <00050009ffe600f500d3001c003800640068006c00001736350607273637
23072733342717071533371723151e010626271417373427170715333717
231417073523150736352307273334271707150736342717333717071417
0735230607333717231e01171506072627230607273e0137232207273336
372315351533350715333533010e1b021f0a1709082a01180a0b0c122917
0e0b0d0d0171011709140c1232010e220e011909082a0116082001010e49
080e08010e230102320d134a0b231b0d06271404104701212207220d0b09
440201194a4a4a19225e241e02313902082d0e0a072a0c12190b1117210c
681dc311120b07110c120b08051813070c0e02080e140a0612741b241808
090c06330b060c0d100d1311190204020b0f2e38090308211503090a1308
4317171d1818>CBIAAA+SimSun AddT42Char 

1 0 0 <> CBIAAA+SimSun AddT42Char 
CBIAAA+SimSun /CharStrings get begin
/g2 2 def
end
CBIAAA+SimSun /Encoding get
dup 33 /g2 put
pop
end
%ADOEndSubsetFont
/KEVNZI+SimSun /CBIAAA+SimSun findfont ct_VMDictPut
/KEVNZI+SimSun*1 
[33{/.notdef}rp /g2 222{/.notdef}rp]
KEVNZI+SimSun nf
KEVNZI+SimSun*1 [16 0 0 -16 0 0 ]msf
477.223 225.61 mo
(!)sh
492.983 229.074 mo
493.463 229.074 li
@
492.983 229.074 mo
509.463 229.074 li
@
%ADOBeginSubsetFont: VXVBAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /VXVBAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c796694c92b2500000e4c0000163668656164e34ba941000003f40000
003668686561020000fd0000042c00000024686d74781f00017300000450
000000806c6f6361584b52cc000004d0000000426d61787001dc3f570000
0514000000206e616d65e9e9d9d000000534000008627072657005dc4fcc
00000d98000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
98e213df5f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000020010000000000
00000100000d010000100100000b010000090100000a0100001f0100000d
0100000d0100000e0100000b0100000c0100000b010000090100000c0100
00090100000c0100000a0100000b0100000c0100000b0100000b0100000d
0100000d0100000c0100000b0100000c0100000f0100000b0100000a0100
000d000000000000008500ba0104016401dd024f02c80349038703c50401
044a04a20512056a05c9061d067106e1073307a20816088a08dd09340997
09ed0a620abf0b1b0000000100000020016c00310000000000010000002f
0029000001613dbb000000000000001e016e000100000000000000270000
0001000000000001000d0027000100000000000200070034000100000000
0003000d003b0001000000000004000d00480001000000000005000c0055
0001000000000006000d00610001000000000007002c006e000300010409
0000004e009a0003000104090001001a00e80003000104090002000e0102
0003000104090003001a01100003000104090004001a012a000300010409
0005001801440003000104090006001a015c000300010409000700580176
000300010409000d02aa01ce000300010409000e00520478000300010804
0000008204ca00030001080400010012054c00030001080400020004055e
000300010804000300120562000300010804000400120574000300010804
00050018058600030001080400060012059e0003000108040007005805b0
0003000108040008003e06080003000108040009003e0646000300010804
000b00380684000300010804000c003806bca920436f7079726967687420
5a484f4e47594920456c656374726f6e696320436f2e20323030314b564a
4b504f2b53696d53756e526567756c61724b564a4b504f2b53696d53756e
4b564a4b504f2b53696d53756e56657273696f6e20352e30344b564a4b50
4f2b53696d53756e54726164656d61726b206f66205a484f4e4759492045
6c656374726f6e696320436f2e2c204265696a696e6700a900200043006f
00700079007200690067006800740020005a0048004f004e004700590049
00200045006c0065006300740072006f006e0069006300200043006f002e
00200032003000300031004b0056004a004b0050004f002b00530069006d
00530075006e0052006500670075006c00610072004b0056004a004b0050
004f002b00530069006d00530075006e004b0056004a004b0050004f002b
00530069006d00530075006e00560065007200730069006f006e00200035
002e00300034004b0056004a004b0050004f002b00530069006d00530075
006e00540072006100640065006d00610072006b0020006f00660020005a
0048004f004e00470059004900200045006c0065006300740072006f006e
0069006300200043006f002e002c0020004200650069006a0069006e0067
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e007400200074006f00200064006900730070006c
0061007900200061006e00640020007000720069006e007400200063006f
006e00740065006e00740020006100730020007000650072006d00690074
00740065006400200062007900200074006800650020006c006900630065
006e007300650020007400650072006d007300200066006f007200200074
00680065002000700072006f006400750063007400200069006e00200077
00680069006300680020007400680069007300200066006f006e00740020
0069007300200069006e0063006c0075006400650064002e00200059006f
00750020006d006100790020006f006e006c007900200028006900290020
0065006d0062006500640020007400680069007300200066006f006e0074
00200069006e00200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
006500200065006d00620065006400640069006e00670020007200650073
007400720069006300740069006f006e007300200069006e0063006c0075
00640065006400200069006e0020007400680069007300200066006f006e
0074003b00200061006e006400200028006900690029002000740065006d
0070006f0072006100720069006c007900200064006f0077006e006c006f
006100640020007400680069007300200066006f006e007400200074006f
002000610020007000720069006e0074006500720020006f00720020006f
00740068006500720020006f007500740070007500740020006400650076
00690063006500200074006f002000680065006c00700020007000720069
006e007400200063006f006e00740065006e0074002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f0066006f006e0074007300a900200043006f0070007900720069
0067006800740020005a0048004f004e00470059004900200045006c0065
006300740072006f006e0069006300200043006f002e0020003200300030
0031000d000a5b574f536570636e753153174eac4e2d66134e2d68077535
5b504fe1606f6280672f67099650516c53f863d04f9b3002004b0056004a
004b0050004f002b5b8b4f535e3889c4004b0056004a004b0050004f002b
5b8b4f53004b0056004a004b0050004f002b5b8b4f530056006500720073
0069006f006e00200035002e00300034004b0056004a004b0050004f002b
5b8b4f5300540072006100640065006d00610072006b0020006f00660020
005a0048004f004e00470059004900200045006c0065006300740072006f
006e0069006300200043006f002e002c0020004200650069006a0069006e
0067004200650069006a0069006e00670020005a0068006f006e00670059
006900200045006c0065006300740072006f006e00690063007300200043
006f002e004200650069006a0069006e00670020005a0068006f006e0067
0059006900200045006c0065006300740072006f006e0069006300730020
0043006f002e0068007400740070003a002f002f007700770077002e007a
0068006f006e006700790069006300740073002e0063006f006d002e0063
006e0068007400740070003a002f002f007700770077002e007a0068006f
006e006700790069006300740073002e0063006f006d002e0063006e0000
411a01110110003200280110010e00280028010f010e00280028010c010d
00460028010d010e00280028010e010d00180028010c010db346285001b8
01ff858d001db0324b5258b0801d59b801064568b801062344b801044568
b801042344b801054568b801044560b801052344b801024568b801044560
b801022344b801034568b801024560b801032344b801004568b801044560
b801002344b801014568b801004560b801012344012b2b2b2b2b2b2b0000
00>
[5687 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 3686 22 <0003000bffe500f400d00026002b00480000370607161715060726270607
273637262723140e0107273e013427173e01371722060715333717071617
3637071417073635060727363723072733342717071533371723151e0106
26d611131c2612031c19213002301c13060b06141c031d0e010f2e190a0f
0c272d480a0f510913120a850110010e18031b0c170808290117080c0b11
28170d0a0b78371a240904010b0e25230f031623253119382e16031d4347
25080c0b06130807270a0f012b201e2d0f6d15072d51281d02303e020824
180c07290b111a0d0f191e00>VXVBAA+SimSun AddT42Char 

1 0 0 <> VXVBAA+SimSun AddT42Char 
VXVBAA+SimSun /CharStrings get begin
/g22 22 def
end
VXVBAA+SimSun /Encoding get
dup 127 /g22 put
pop
end
%ADOEndSubsetFont
/KEVNZJ+SimSun /VXVBAA+SimSun findfont ct_VMDictPut
/KEVNZJ+SimSun*1 
[127{/.notdef}rp /g22 128{/.notdef}rp]
KEVNZJ+SimSun nf
KEVNZJ+SimSun*1 [16 0 0 -16 0 0 ]msf
493.223 225.61 mo
(\177)sh
265.398 249.099 mo
281.878 249.099 li
@
%ADOBeginSubsetFont: PBAAAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+SimSun gcheck setglobal} if
1 0 2 <0001000cfff400f400d20028000037170607333427170715333717231533
37172315333717232207273335232207273335230607273e013f170a0e3b
011808390f135b2d10124f481014c70d0b096d260d0b09473d1712031118
c10d05202e150a07320f153e0f1548101603094803093e2b12021a3e>PBAAAA+SimSun AddT42Char 
PBAAAA+SimSun /CharStrings get begin
/g2 2 def
end
PBAAAA+SimSun /Encoding get
dup 31 /g2 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNYP+SimSun*1 
[31{/.notdef}rp /g2 21{/.notdef}rp /g7 202{/.notdef}rp]
KEVNYP+SimSun nf
KEVNYP+SimSun*1 [16 0 0 -16 0 0 ]msf
265.638 245.635 mo
(\037)sh
281.398 249.099 mo
281.878 249.099 li
@
281.398 249.099 mo
297.878 249.099 li
@
%ADOBeginSubsetFont: GFNBAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GFNBAA+SimSun gcheck setglobal} if
1 0 2 <0002000cffe800f700ce000600420000371e010e01262717371706141626
27060727363726272307333717070e01072627351e013637230607273e01
2717332627170714173337172316173e01371707060716ad150e030c0611
370c04040a34191f2501281514064f012e090f09030a0e0318130f04022f
0327021a0402124d03021a0702370e1459060f0810081509111215cb0c0d
0d081615c42b011f1412131f2010041a1d2547300a0e073c13060e090403
0213315321032571200921150a0810140e14421b0c26181005291a19>GFNBAA+SimSun AddT42Char 
GFNBAA+SimSun /CharStrings get begin
/g2 2 def
end
GFNBAA+SimSun /Encoding get
dup 16 /g2 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNYS+SimSun*1 
[16{/.notdef}rp /g2 111{/.notdef}rp /g20 123{/.notdef}rp /g33 3{/.notdef}rp]
KEVNYS+SimSun nf
KEVNYS+SimSun*1 [16 0 0 -16 0 0 ]msf
281.638 245.635 mo
(\020)sh
297.398 249.099 mo
297.878 249.099 li
@
297.398 249.099 mo
313.878 249.099 li
@
%ADOBeginSubsetFont: SPVAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /SPVAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c79666fad0cb900000de400000bde68656164e34ba941000003f40000
003668686561020000ec0000042c00000024686d74780e00008b00000450
0000003c6c6f6361126615cf0000048c000000206d61787001cb3f570000
04ac000000206e616d65d0169712000004cc000008627072657005dc4fcc
00000d30000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
61208e655f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe0000010000010000000000000000000000000000000f010000000000
00000100000b0100000a0100000b010000090100000d0100000a0100000a
010000090100000c0100000b0100000d0100000a0100000a000000000000
006400c3014101b2022b02990317037e0406047004f3056a05ef00010000
000f016c00310000000000010000002f0029000001613dbb000000000000
001e016e0001000000000000002700000001000000000001000d00270001
000000000002000700340001000000000003000d003b0001000000000004
000d00480001000000000005000c00550001000000000006000d00610001
000000000007002c006e0003000104090000004e009a0003000104090001
001a00e80003000104090002000e01020003000104090003001a01100003
000104090004001a012a0003000104090005001801440003000104090006
001a015c000300010409000700580176000300010409000d02aa01ce0003
00010409000e005204780003000108040000008204ca0003000108040001
0012054c00030001080400020004055e0003000108040003001205620003
000108040004001205740003000108040005001805860003000108040006
0012059e0003000108040007005805b00003000108040008003e06080003
000108040009003e0646000300010804000b00380684000300010804000c
003806bca920436f70797269676874205a484f4e47594920456c65637472
6f6e696320436f2e2032303031464b4d4842442b53696d53756e52656775
6c6172464b4d4842442b53696d53756e464b4d4842442b53696d53756e56
657273696f6e20352e3034464b4d4842442b53696d53756e54726164656d
61726b206f66205a484f4e47594920456c656374726f6e696320436f2e2c
204265696a696e6700a900200043006f0070007900720069006700680074
0020005a0048004f004e00470059004900200045006c0065006300740072
006f006e0069006300200043006f002e002000320030003000310046004b
004d004800420044002b00530069006d00530075006e0052006500670075
006c006100720046004b004d004800420044002b00530069006d00530075
006e0046004b004d004800420044002b00530069006d00530075006e0056
0065007200730069006f006e00200035002e003000340046004b004d0048
00420044002b00530069006d00530075006e00540072006100640065006d
00610072006b0020006f00660020005a0048004f004e0047005900490020
0045006c0065006300740072006f006e0069006300200043006f002e002c
0020004200650069006a0069006e00670059006f00750020006d00610079
00200075007300650020007400680069007300200066006f006e00740020
0074006f00200064006900730070006c0061007900200061006e00640020
007000720069006e007400200063006f006e00740065006e007400200061
00730020007000650072006d006900740074006500640020006200790020
0074006800650020006c006900630065006e007300650020007400650072
006d007300200066006f00720020007400680065002000700072006f0064
00750063007400200069006e002000770068006900630068002000740068
0069007300200066006f006e007400200069007300200069006e0063006c
0075006400650064002e00200059006f00750020006d006100790020006f
006e006c0079002000280069002900200065006d00620065006400200074
00680069007300200066006f006e007400200069006e00200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
00650064002000620079002000740068006500200065006d006200650064
00640069006e00670020007200650073007400720069006300740069006f
006e007300200069006e0063006c007500640065006400200069006e0020
007400680069007300200066006f006e0074003b00200061006e00640020
0028006900690029002000740065006d0070006f0072006100720069006c
007900200064006f0077006e006c006f0061006400200074006800690073
00200066006f006e007400200074006f002000610020007000720069006e
0074006500720020006f00720020006f00740068006500720020006f0075
0074007000750074002000640065007600690063006500200074006f0020
00680065006c00700020007000720069006e007400200063006f006e0074
0065006e0074002e0068007400740070003a002f002f007700770077002e
006d006900630072006f0073006f00660074002e0063006f006d002f0074
00790070006f006700720061007000680079002f0066006f006e00740073
00a900200043006f00700079007200690067006800740020005a0048004f
004e00470059004900200045006c0065006300740072006f006e00690063
00200043006f002e00200032003000300031000d000a5b574f536570636e
753153174eac4e2d66134e2d680775355b504fe1606f6280672f67099650
516c53f863d04f9b30020046004b004d004800420044002b5b8b4f535e38
89c40046004b004d004800420044002b5b8b4f530046004b004d00480042
0044002b5b8b4f5300560065007200730069006f006e00200035002e0030
00340046004b004d004800420044002b5b8b4f5300540072006100640065
006d00610072006b0020006f00660020005a0048004f004e004700590049
00200045006c0065006300740072006f006e0069006300200043006f002e
002c0020004200650069006a0069006e0067004200650069006a0069006e
00670020005a0068006f006e00670059006900200045006c006500630074
0072006f006e00690063007300200043006f002e004200650069006a0069
006e00670020005a0068006f006e00670059006900200045006c00650063
00740072006f006e00690063007300200043006f002e0068007400740070
003a002f002f007700770077002e007a0068006f006e0067007900690063
00740073002e0063006f006d002e0063006e0068007400740070003a002f
002f007700770077002e007a0068006f006e006700790069006300740073
002e0063006f006d002e0063006e0000411a01110110003200280110010e
00280028010f010e00280028010c010d00460028010d010e00280028010e
010d00180028010c010db346285001b801ff858d001db0324b5258b0801d
59b801064568b801062344b801044568b801042344b801054568b8010445
60b801052344b801024568b801044560b801022344b801034568b8010245
60b801032344b801004568b801044560b801002344b801014568b8010045
60b801012344012b2b2b2b2b2b2b000000>
[3039 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 642 5 <00030009ffe600f300d20005002f004e00003f011e010626171417073635
23220727333523220727333523220727333637170e010733371723153337
172315333717071417073635060727363723220727333427170715333717
23151e0106262770021f080d0a29011001220d0b0943110d0b0932120d0b
09411206150a14091d0c12411c0c123a280d13b10110011117031c0f070d
0b09280117080d0b112913110a0e0cc9031111131c7e321606242a03092a
0309250309221a0e051c0d0c12250c122a0d13170e24063b3e281a022c45
030919230c07290b111b090e1a1e0d00>SPVAAA+SimSun AddT42Char 

1 0 0 <> SPVAAA+SimSun AddT42Char 
SPVAAA+SimSun /CharStrings get begin
/g5 5 def
end
SPVAAA+SimSun /Encoding get
dup 55 /g5 put
pop
end
%ADOEndSubsetFont
/KEVNZK+SimSun /SPVAAA+SimSun findfont ct_VMDictPut
/KEVNZK+SimSun*1 
[55{/.notdef}rp /g5 200{/.notdef}rp]
KEVNZK+SimSun nf
KEVNZK+SimSun*1 [16 0 0 -16 0 0 ]msf
297.638 245.635 mo
(7)sh
313.398 249.099 mo
313.878 249.099 li
@
313.398 249.099 mo
329.878 249.099 li
@
%ADOBeginSubsetFont: AXNBAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+SimSun gcheck setglobal} if
1 3290 20 <0004000affe800eb00d00023002e003c004f0000370e0207273e02372306
071e010626270607273e013723072733371723060733371f01141707363d
0134271707373427170715160726273716363507363d010607273e013717
07060717071514179c0b1a221402181c13082206060f0b0d0609090f0311
15020e0b09470b1131030a1f081117010f01011608190116080115011e01
190caa01140c03161605160810050e0801782e30200a0311262e230e0b0a
10111b0c10100317411102080b110b1e0a0d2e0a1f07210b38110e0a080d
111e0b06bd10070d060504030a21210e671f0d02253e190c05260c06076b
1115>AXNBAA+SimSun AddT42Char 
AXNBAA+SimSun /CharStrings get begin
/g20 20 def
end
AXNBAA+SimSun /Encoding get
dup 139 /g20 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNYX+SimSun*1 
[77{/.notdef}rp /g12 61{/.notdef}rp /g20 116{/.notdef}rp]
KEVNYX+SimSun nf
KEVNYX+SimSun*1 [16 0 0 -16 0 0 ]msf
313.638 245.635 mo
(\213)sh
KEVNYQ+SimSun*1 [16 0 0 -16 0 0 ]msf
143.588 316.365 mo
(f)sh
KEVNYR+SimSun*1 [16 0 0 -16 0 0 ]msf
159.588 316.365 mo
(\321)sh
%ADOBeginSubsetFont: XSAAAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XSAAAA+SimSun gcheck setglobal} if
1 722 11 <0001000bffe400f200d20034000037363723220727333637170706073337
172306073337172306073337170e01071e01062e01273716173637230727
3e0137232207275f0404220d0b09440303150703023b10115d0404611013
8505055309130d1c1516030511241f0122170f1954070d050506320d0b09
73111a0309131b0c050e0f0d1317140e14170f0a13031a1609120c12180f
040a0a1222080d04091a0309>XSAAAA+SimSun AddT42Char 
XSAAAA+SimSun /CharStrings get begin
/g11 11 def
end
XSAAAA+SimSun /Encoding get
dup 19 /g11 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNZE+SimSun*1 
[19{/.notdef}rp /g11 6{/.notdef}rp /g14 /.notdef /g15 113{/.notdef}rp /g42 
113{/.notdef}rp]
KEVNZE+SimSun nf
KEVNZE+SimSun*1 [16 0 0 -16 0 0 ]msf
175.588 316.365 mo
(\023\032)
[16 0 ]xsh
.398 lw
211.348 320.028 mo
299.878 320.028 li
@
299.398 320.028 mo
315.878 320.028 li
@
%ADOBeginSubsetFont: CUFAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /CUFAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c79663b2500c700000e1c000014ea68656164e34ba941000003f40000
003668686561020000f50000042c00000024686d7478170000e000000450
000000606c6f6361414f3bec000004b0000000326d61787001d43f570000
04e4000000206e616d65df8ec25000000504000008627072657005dc4fcc
00000d68000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
3a3737df5f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000018010000000000
00000100000c0100000b0100000d0100000b0100000a0100000c0100000a
010000090100000b01000009010000090100000b010000090100000a0100
0009010000090100000b010000080100000a0100000b010000090100000a
000000000000004400cd014601e40279031303a0044d050e057305d50639
069e070b076707cf083d08b1091c09920a080a750000000100000018016c
00310000000000010000002f0029000001613dbb000000000000001e016e
0001000000000000002700000001000000000001000d0027000100000000
0002000700340001000000000003000d003b0001000000000004000d0048
0001000000000005000c00550001000000000006000d0061000100000000
0007002c006e0003000104090000004e009a0003000104090001001a00e8
0003000104090002000e01020003000104090003001a0110000300010409
0004001a012a0003000104090005001801440003000104090006001a015c
000300010409000700580176000300010409000d02aa01ce000300010409
000e005204780003000108040000008204ca00030001080400010012054c
00030001080400020004055e000300010804000300120562000300010804
00040012057400030001080400050018058600030001080400060012059e
0003000108040007005805b00003000108040008003e0608000300010804
0009003e0646000300010804000b00380684000300010804000c003806bc
a920436f70797269676874205a484f4e47594920456c656374726f6e6963
20436f2e20323030315245415043552b53696d53756e526567756c617252
45415043552b53696d53756e5245415043552b53696d53756e5665727369
6f6e20352e30345245415043552b53696d53756e54726164656d61726b20
6f66205a484f4e47594920456c656374726f6e696320436f2e2c20426569
6a696e6700a900200043006f00700079007200690067006800740020005a
0048004f004e00470059004900200045006c0065006300740072006f006e
0069006300200043006f002e002000320030003000310052004500410050
00430055002b00530069006d00530075006e0052006500670075006c0061
0072005200450041005000430055002b00530069006d00530075006e0052
00450041005000430055002b00530069006d00530075006e005600650072
00730069006f006e00200035002e00300034005200450041005000430055
002b00530069006d00530075006e00540072006100640065006d00610072
006b0020006f00660020005a0048004f004e00470059004900200045006c
0065006300740072006f006e0069006300200043006f002e002c00200042
00650069006a0069006e00670059006f00750020006d0061007900200075
007300650020007400680069007300200066006f006e007400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
00650020006c006900630065006e007300650020007400650072006d0073
00200066006f00720020007400680065002000700072006f006400750063
007400200069006e00200077006800690063006800200074006800690073
00200066006f006e007400200069007300200069006e0063006c00750064
00650064002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e0074007300a90020
0043006f00700079007200690067006800740020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e00200032003000300031000d000a5b574f536570636e75315317
4eac4e2d66134e2d680775355b504fe1606f6280672f67099650516c53f8
63d04f9b3002005200450041005000430055002b5b8b4f535e3889c40052
00450041005000430055002b5b8b4f53005200450041005000430055002b
5b8b4f5300560065007200730069006f006e00200035002e003000340052
00450041005000430055002b5b8b4f5300540072006100640065006d0061
0072006b0020006f00660020005a0048004f004e00470059004900200045
006c0065006300740072006f006e0069006300200043006f002e002c0020
004200650069006a0069006e0067004200650069006a0069006e00670020
005a0068006f006e00670059006900200045006c0065006300740072006f
006e00690063007300200043006f002e004200650069006a0069006e0067
0020005a0068006f006e00670059006900200045006c0065006300740072
006f006e00690063007300200043006f002e0068007400740070003a002f
002f007700770077002e007a0068006f006e006700790069006300740073
002e0063006f006d002e0063006e0068007400740070003a002f002f0077
00770077002e007a0068006f006e006700790069006300740073002e0063
006f006d002e0063006e0000411a01110110003200280110010e00280028
010f010e00280028010c010d00460028010d010e00280028010e010d0018
0028010c010db346285001b801ff858d001db0324b5258b0801d59b80106
4568b801062344b801044568b801042344b801054568b801044560b80105
2344b801024568b801044560b801022344b801034568b801024560b80103
2344b801004568b801044560b801002344b801014568b801004560b80101
2344012b2b2b2b2b2b2b000000>
[5355 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 410 4 <0003000dffe700f400d100100021005000003f0123060727363717070607
3337170607271707161715260726270e0107273e02271707060733371723
07333427170715333717231537170714170736350607273637352307273e
0137232207273336c90e400f0e031c0a160908093d091211142d1a080c37
1008290602272502211c0561170a0305240c1042141c011608120b102d28
0129010f012a030b0e2a1b080d080c060a080b092808721f180f022d350d
0510150b13011e130d06641304010a2951333b11021734316c0d0509130c
123e111e0b071d0c12220b0410261a07241e0f0814020b26071002241503
0922>CUFAAA+SimSun AddT42Char 

1 0 0 <> CUFAAA+SimSun AddT42Char 
CUFAAA+SimSun /CharStrings get begin
/g4 4 def
end
CUFAAA+SimSun /Encoding get
dup 111 /g4 put
pop
end
%ADOEndSubsetFont
/KEVNZL+SimSun /CUFAAA+SimSun findfont ct_VMDictPut
/KEVNZL+SimSun*1 
[111{/.notdef}rp /g4 144{/.notdef}rp]
KEVNZL+SimSun nf
KEVNZL+SimSun*1 [16 0 0 -16 0 0 ]msf
299.638 316.365 mo
(o)sh
315.398 320.028 mo
315.878 320.028 li
@
315.398 320.028 mo
331.878 320.028 li
@
%ADOBeginSubsetFont: XSAAAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XSAAAA+SimSun gcheck setglobal} if
1 8628 66 <00020009ffe600f500d20024003800003734271707153337172315333717
231417073635232207273335230607273e01371707060f01363d01060727
3e02371707060717071514179f0118091f0c123d2a0c12480110012c0d0b
094d2b0c0f030b0d041508040542011a0f0308151a0a150813060d08018e
261e0b07320c123a0c124c0f07313103093a1c1402172e1b0b060b10a81f
116a270f030b2238200e06220b0907681218>XSAAAA+SimSun AddT42Char 
XSAAAA+SimSun /CharStrings get begin
/g66 66 def
end
XSAAAA+SimSun /Encoding get
dup 246 /g66 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNZE+SimSun*1 
[19{/.notdef}rp /g11 6{/.notdef}rp /g14 /.notdef /g15 113{/.notdef}rp /g42 
103{/.notdef}rp /g66 9{/.notdef}rp]
KEVNZE+SimSun nf
KEVNZE+SimSun*1 [16 0 0 -16 0 0 ]msf
315.638 316.365 mo
(\366)sh
331.398 320.028 mo
331.878 320.028 li
@
331.398 320.028 mo
347.878 320.028 li
@
%ADOBeginSubsetFont: XFAAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /XFAAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c79660aa7784200000dd40000054268656164e34ba941000003f40000
003668686561020000e90000042c00000024686d74780b0000c900000450
000000306c6f63610873074b000004800000001a6d61787001c83f570000
049c000000206e616d65d53fa053000004bc000008627072657005dc4fcc
00000d20000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
44f03a0f5f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe0000010000010000000000000000000000000000000c010000000000
00000100000d010000110100000b0100000d0100000c0100000e01000022
0100000d0100002401000026000000000000008c00bd0110012d016801ad
01da023b026d02a1000000010000000c016c00310000000000010000002f
0029000001613dbb000000000000001e016e000100000000000000270000
0001000000000001000d0027000100000000000200070034000100000000
0003000d003b0001000000000004000d00480001000000000005000c0055
0001000000000006000d00610001000000000007002c006e000300010409
0000004e009a0003000104090001001a00e80003000104090002000e0102
0003000104090003001a01100003000104090004001a012a000300010409
0005001801440003000104090006001a015c000300010409000700580176
000300010409000d02aa01ce000300010409000e00520478000300010804
0000008204ca00030001080400010012054c00030001080400020004055e
000300010804000300120562000300010804000400120574000300010804
00050018058600030001080400060012059e0003000108040007005805b0
0003000108040008003e06080003000108040009003e0646000300010804
000b00380684000300010804000c003806bca920436f7079726967687420
5a484f4e47594920456c656374726f6e696320436f2e2032303031494953
45414b2b53696d53756e526567756c617249495345414b2b53696d53756e
49495345414b2b53696d53756e56657273696f6e20352e30344949534541
4b2b53696d53756e54726164656d61726b206f66205a484f4e4759492045
6c656374726f6e696320436f2e2c204265696a696e6700a900200043006f
00700079007200690067006800740020005a0048004f004e004700590049
00200045006c0065006300740072006f006e0069006300200043006f002e
0020003200300030003100490049005300450041004b002b00530069006d
00530075006e0052006500670075006c0061007200490049005300450041
004b002b00530069006d00530075006e00490049005300450041004b002b
00530069006d00530075006e00560065007200730069006f006e00200035
002e0030003400490049005300450041004b002b00530069006d00530075
006e00540072006100640065006d00610072006b0020006f00660020005a
0048004f004e00470059004900200045006c0065006300740072006f006e
0069006300200043006f002e002c0020004200650069006a0069006e0067
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e007400200074006f00200064006900730070006c
0061007900200061006e00640020007000720069006e007400200063006f
006e00740065006e00740020006100730020007000650072006d00690074
00740065006400200062007900200074006800650020006c006900630065
006e007300650020007400650072006d007300200066006f007200200074
00680065002000700072006f006400750063007400200069006e00200077
00680069006300680020007400680069007300200066006f006e00740020
0069007300200069006e0063006c0075006400650064002e00200059006f
00750020006d006100790020006f006e006c007900200028006900290020
0065006d0062006500640020007400680069007300200066006f006e0074
00200069006e00200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
006500200065006d00620065006400640069006e00670020007200650073
007400720069006300740069006f006e007300200069006e0063006c0075
00640065006400200069006e0020007400680069007300200066006f006e
0074003b00200061006e006400200028006900690029002000740065006d
0070006f0072006100720069006c007900200064006f0077006e006c006f
006100640020007400680069007300200066006f006e007400200074006f
002000610020007000720069006e0074006500720020006f00720020006f
00740068006500720020006f007500740070007500740020006400650076
00690063006500200074006f002000680065006c00700020007000720069
006e007400200063006f006e00740065006e0074002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f0066006f006e0074007300a900200043006f0070007900720069
0067006800740020005a0048004f004e00470059004900200045006c0065
006300740072006f006e0069006300200043006f002e0020003200300030
0031000d000a5b574f536570636e753153174eac4e2d66134e2d68077535
5b504fe1606f6280672f67099650516c53f863d04f9b3002004900490053
00450041004b002b5b8b4f535e3889c400490049005300450041004b002b
5b8b4f5300490049005300450041004b002b5b8b4f530056006500720073
0069006f006e00200035002e0030003400490049005300450041004b002b
5b8b4f5300540072006100640065006d00610072006b0020006f00660020
005a0048004f004e00470059004900200045006c0065006300740072006f
006e0069006300200043006f002e002c0020004200650069006a0069006e
0067004200650069006a0069006e00670020005a0068006f006e00670059
006900200045006c0065006300740072006f006e00690063007300200043
006f002e004200650069006a0069006e00670020005a0068006f006e0067
0059006900200045006c0065006300740072006f006e0069006300730020
0043006f002e0068007400740070003a002f002f007700770077002e007a
0068006f006e006700790069006300740073002e0063006f006d002e0063
006e0068007400740070003a002f002f007700770077002e007a0068006f
006e006700790069006300740073002e0063006f006d002e0063006e0000
411a01110110003200280110010e00280028010f010e00280028010c010d
00460028010d010e00280028010e010d00180028010c010db346285001b8
01ff858d001db0324b5258b0801d59b801064568b801062344b801044568
b801042344b801054568b801044560b801052344b801024568b801044560
b801022344b801034568b801024560b801032344b801004568b801044560
b801002344b801014568b801004560b801012344012b2b2b2b2b2b2b0000
00>
[1347 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 544 5 <0001000dfffc00f200bd0011000037333717231533371723220727333523
22071ba60f155e431117c40d0b096b3c0d0bae0f15a311170309a303>XFAAAA+SimSun AddT42Char 

1 0 0 <> XFAAAA+SimSun AddT42Char 
XFAAAA+SimSun /CharStrings get begin
/g5 5 def
end
XFAAAA+SimSun /Encoding get
dup 229 /g5 put
pop
end
%ADOEndSubsetFont
/KEVNZM+SimSun /XFAAAA+SimSun findfont ct_VMDictPut
/KEVNZM+SimSun*1 
[229{/.notdef}rp /g5 26{/.notdef}rp]
KEVNZM+SimSun nf
KEVNZM+SimSun*1 [16 0 0 -16 0 0 ]msf
331.638 316.365 mo
(\345)sh
347.398 320.028 mo
347.878 320.028 li
@
347.398 320.028 mo
363.878 320.028 li
@
%ADOBeginSubsetFont: GLAAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /GLAAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966fe9d10cd00000de400000cb068656164e34ba941000003f40000
003668686561020000ec0000042c00000024686d74780e0000b500000450
0000003c6c6f636115c119090000048c000000206d61787001cb3f570000
04ac000000206e616d65e7b3c970000004cc000008627072657005dc4fcc
00000d30000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
16ec42c15f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe0000010000010000000000000000000000000000000f010000000000
0000010000090100000b010000090100000a010000160100001201000012
010000140100000a0100000b0100000d010000130100000b000000000000
0077012501c5026c02e2033903b20448048304e6055e05c9065800010000
000f016c00310000000000010000002f0029000001613dbb000000000000
001e016e0001000000000000002700000001000000000001000d00270001
000000000002000700340001000000000003000d003b0001000000000004
000d00480001000000000005000c00550001000000000006000d00610001
000000000007002c006e0003000104090000004e009a0003000104090001
001a00e80003000104090002000e01020003000104090003001a01100003
000104090004001a012a0003000104090005001801440003000104090006
001a015c000300010409000700580176000300010409000d02aa01ce0003
00010409000e005204780003000108040000008204ca0003000108040001
0012054c00030001080400020004055e0003000108040003001205620003
000108040004001205740003000108040005001805860003000108040006
0012059e0003000108040007005805b00003000108040008003e06080003
000108040009003e0646000300010804000b00380684000300010804000c
003806bca920436f70797269676874205a484f4e47594920456c65637472
6f6e696320436f2e2032303031464a425351512b53696d53756e52656775
6c6172464a425351512b53696d53756e464a425351512b53696d53756e56
657273696f6e20352e3034464a425351512b53696d53756e54726164656d
61726b206f66205a484f4e47594920456c656374726f6e696320436f2e2c
204265696a696e6700a900200043006f0070007900720069006700680074
0020005a0048004f004e00470059004900200045006c0065006300740072
006f006e0069006300200043006f002e002000320030003000310046004a
0042005300510051002b00530069006d00530075006e0052006500670075
006c006100720046004a0042005300510051002b00530069006d00530075
006e0046004a0042005300510051002b00530069006d00530075006e0056
0065007200730069006f006e00200035002e003000340046004a00420053
00510051002b00530069006d00530075006e00540072006100640065006d
00610072006b0020006f00660020005a0048004f004e0047005900490020
0045006c0065006300740072006f006e0069006300200043006f002e002c
0020004200650069006a0069006e00670059006f00750020006d00610079
00200075007300650020007400680069007300200066006f006e00740020
0074006f00200064006900730070006c0061007900200061006e00640020
007000720069006e007400200063006f006e00740065006e007400200061
00730020007000650072006d006900740074006500640020006200790020
0074006800650020006c006900630065006e007300650020007400650072
006d007300200066006f00720020007400680065002000700072006f0064
00750063007400200069006e002000770068006900630068002000740068
0069007300200066006f006e007400200069007300200069006e0063006c
0075006400650064002e00200059006f00750020006d006100790020006f
006e006c0079002000280069002900200065006d00620065006400200074
00680069007300200066006f006e007400200069006e00200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
00650064002000620079002000740068006500200065006d006200650064
00640069006e00670020007200650073007400720069006300740069006f
006e007300200069006e0063006c007500640065006400200069006e0020
007400680069007300200066006f006e0074003b00200061006e00640020
0028006900690029002000740065006d0070006f0072006100720069006c
007900200064006f0077006e006c006f0061006400200074006800690073
00200066006f006e007400200074006f002000610020007000720069006e
0074006500720020006f00720020006f00740068006500720020006f0075
0074007000750074002000640065007600690063006500200074006f0020
00680065006c00700020007000720069006e007400200063006f006e0074
0065006e0074002e0068007400740070003a002f002f007700770077002e
006d006900630072006f0073006f00660074002e0063006f006d002f0074
00790070006f006700720061007000680079002f0066006f006e00740073
00a900200043006f00700079007200690067006800740020005a0048004f
004e00470059004900200045006c0065006300740072006f006e00690063
00200043006f002e00200032003000300031000d000a5b574f536570636e
753153174eac4e2d66134e2d680775355b504fe1606f6280672f67099650
516c53f863d04f9b30020046004a0042005300510051002b5b8b4f535e38
89c40046004a0042005300510051002b5b8b4f530046004a004200530051
0051002b5b8b4f5300560065007200730069006f006e00200035002e0030
00340046004a0042005300510051002b5b8b4f5300540072006100640065
006d00610072006b0020006f00660020005a0048004f004e004700590049
00200045006c0065006300740072006f006e0069006300200043006f002e
002c0020004200650069006a0069006e0067004200650069006a0069006e
00670020005a0068006f006e00670059006900200045006c006500630074
0072006f006e00690063007300200043006f002e004200650069006a0069
006e00670020005a0068006f006e00670059006900200045006c00650063
00740072006f006e00690063007300200043006f002e0068007400740070
003a002f002f007700770077002e007a0068006f006e0067007900690063
00740073002e0063006f006d002e0063006e0068007400740070003a002f
002f007700770077002e007a0068006f006e006700790069006300740073
002e0063006f006d002e0063006e0000411a01110110003200280110010e
00280028010f010e00280028010c010d00460028010d010e00280028010e
010d00180028010c010db346285001b801ff858d001db0324b5258b0801d
59b801064568b801062344b801044568b801042344b801054568b8010445
60b801052344b801024568b801044560b801022344b801034568b8010245
60b801032344b801004568b801044560b801002344b801014568b8010045
60b801012344012b2b2b2b2b2b2b000000>
[3249 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 0 2 <00040009ffe700f700ce000e0012002f0054000037363427173337170714
170735231535153335073337172315333717231533371723220727333523
2207273335232207270607353e01371722071533371723151e0106262714
170736350607273e013723220727337a01010f49090e09010e4b4b66680b
103d1d0b1038270c11780d0b0948120d0b0933180d0b3b0d1d1333080d09
1b0f0b102a15110c0c0e010f01121d021416040e0d0b09326e172d160909
0e062e0e050c0b453434580b112b0b112e0c1203092e03092b035d020304
0310071205320b11130911151e0d681207264e2e1f031f3a15030900>GLAAAA+SimSun AddT42Char 

1 0 0 <> GLAAAA+SimSun AddT42Char 
GLAAAA+SimSun /CharStrings get begin
/g2 2 def
end
GLAAAA+SimSun /Encoding get
dup 11 /g2 put
pop
end
%ADOEndSubsetFont
/KEVNZN+SimSun /GLAAAA+SimSun findfont ct_VMDictPut
/KEVNZN+SimSun*1 
[11{/.notdef}rp /g2 244{/.notdef}rp]
KEVNZN+SimSun nf
KEVNZN+SimSun*1 [16 0 0 -16 0 0 ]msf
347.638 316.365 mo
(\013)sh
363.398 320.028 mo
451.928 320.028 li
@
KEVNYQ+SimSun*1 [16 0 0 -16 0 0 ]msf
143.588 350.563 mo
(f)sh
%ADOBeginSubsetFont: MZQAAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal MZQAAA+SimSun gcheck setglobal} if
1 7100 47 <00030010ffe800f000ce000e0012002e0000371417073523150736342717
33371707153335170e02072627371636372307273e013723072733371723
07333717c0010f640f01010f63090e7a6414090e0e10021d012517085c09
0c070904390908c10d12850e590b0fbb2d0d060a0905142d14080a0c0433
3387341007040f0c040b0937080e04120e02080d13240b0f>MZQAAA+SimSun AddT42Char 
MZQAAA+SimSun /CharStrings get begin
/g47 47 def
end
MZQAAA+SimSun /Encoding get
dup 247 /g47 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNYV+SimSun*1 
[90{/.notdef}rp /g13 156{/.notdef}rp /g47 8{/.notdef}rp]
KEVNYV+SimSun nf
KEVNYV+SimSun*1 [16 0 0 -16 0 0 ]msf
191.588 350.563 mo
(\367)sh
211.348 354.226 mo
291.878 354.226 li
@
291.398 354.226 mo
371.878 354.226 li
@
%ADOBeginSubsetFont: UGXAAA+NimbusRomNo9L-Regu AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
KEVNYU+NimbusRomNo9L-Regu dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A73D33BD7C9339964DD07C87D05AB7B25A68144D7948D
5D72AF545A4D3C0513F795E10E78346C3F1E06A3A564CAE7C700C7FDC9B087C8
E6354649236E324B711B953A69EB07058EA7506E73C4971A2CD8E7B56CC9E4E9
FEA40EB905B2E375D63C0419CF10FC6C14A0C10D77A69> |-
/two <1C60D8A8C9B7A73DC5046156A965F0B3A5C5C92B949F09859351B744F8
D4F54DF812628245A65EF24CEAADD5DE190FFD56148C6E385D5491D13046F140
F2584C73B6FA05C320B018358B9C23ED6C9E586FC4F73E174BDB9E859FD3482F
BC3EE225AB5583DDBB> |-
/three <1C60D8A8C9B7A73D33B7A780A4FB6D478F9DFFD1DA2730E109F94628
9022DF44AA9C6B3C7A83D30909F0BAB42A6E1D1548FDDC248F7C953CDE5A28D8
689A27CB59F87D356A314D4EFED0475CC0AAF39DC03786C824DDF509843103FC
7FA496FB5DCC5A8557EAC7C07B47467CFAA928DDE85F766B75A88715FF4FBE39
5D793AA936CD181919EAA5062E994CBA144301D3C748F9AB1671C4DDDDB4E131
7F6796560BFDDC9A58> |-
/nine <1C60D8A8C9B7A73DB9A4910DA0CCBBECA0DA04663E9B3882E1E5DEE14
3B742A9F817DD3446A24A057E418BF30AF27F7FAD2F66F70A1B6D5A1487A1537
6B8264A176D2D7FF0C65A50E510656A4AB729508AE86A12EB73D4241401D8434
142B04B784C0BD286955405980DDD9F84CE9AA41E73E5A393EE6E73ADE3D0674
26A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KEVNYU+NimbusRomNo9L-Regu /Encoding get
dup 48 /zero put
dup 50 /two put
dup 51 /three put
dup 57 /nine put
pop
%ADOEndSubsetFont
/KEVNYU+NimbusRomNo9L-Regu*1 
[48{/.notdef}rp /zero /.notdef /two /three 5{/.notdef}rp /nine 7{/.notdef}rp 
/A /.notdef /C /D /E /F /G /H 
/I 2{/.notdef}rp /L /.notdef /N /O 2{/.notdef}rp /R 
/S /T /U /V /.notdef /X /Y 166{/.notdef}rp]
KEVNYU+NimbusRomNo9L-Regu nf
KEVNYU+NimbusRomNo9L-Regu*1 [16 0 0 -16 0 0 ]msf
291.638 350.563 mo
(2923000000)
[8 8 8 8 8 8 8 8 8 0 ]xsh
371.398 354.226 mo
451.928 354.226 li
@
%ADOBeginSubsetFont: AXNBAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal AXNBAA+SimSun gcheck setglobal} if
1 2676 17 <0002000bffe700ef00d3001f003300003715141707363d01230607273e01
37170706073337172315333717231533371707141707363d010607273e02
37170706071707990110010e151603171b0414090a07500d13562c0d134c
330d13aa011001121403111a0e04140810090e072621090f061e13812416
022140110d05150d0d13360d13310d1314140f0820175f1c14021735280f
0c0623130906>AXNBAA+SimSun AddT42Char 
AXNBAA+SimSun /CharStrings get begin
/g17 17 def
end
AXNBAA+SimSun /Encoding get
dup 92 /g17 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNYX+SimSun*1 
[77{/.notdef}rp /g12 14{/.notdef}rp /g17 46{/.notdef}rp /g20 116{/.notdef}rp]
KEVNYX+SimSun nf
KEVNYX+SimSun*1 [16 0 0 -16 0 0 ]msf
143.588 384.761 mo
(\\)sh
%ADOBeginSubsetFont: GISAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /GISAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966a8e458ba00000de000000aec68656164e34ba941000003f40000
003668686561020000eb0000042c00000024686d74780d0000a100000450
000000386c6f6361139810d2000004880000001e6d61787001ca3f570000
04a8000000206e616d65fd0dd318000004c8000008627072657005dc4fcc
00000d2c000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
b87993bd5f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe0000010000010000000000000000000000000000000e010000000000
0000010000080100000e0100000a0100000c0100000b0100000c0100000b
0100000b010000140100000e010000120100001400000000000000d9013d
01a30204024102c1032c03a70409047904e00576000000010000000e016c
00310000000000010000002f0029000001613dbb000000000000001e016e
0001000000000000002700000001000000000001000d0027000100000000
0002000700340001000000000003000d003b0001000000000004000d0048
0001000000000005000c00550001000000000006000d0061000100000000
0007002c006e0003000104090000004e009a0003000104090001001a00e8
0003000104090002000e01020003000104090003001a0110000300010409
0004001a012a0003000104090005001801440003000104090006001a015c
000300010409000700580176000300010409000d02aa01ce000300010409
000e005204780003000108040000008204ca00030001080400010012054c
00030001080400020004055e000300010804000300120562000300010804
00040012057400030001080400050018058600030001080400060012059e
0003000108040007005805b00003000108040008003e0608000300010804
0009003e0646000300010804000b00380684000300010804000c003806bc
a920436f70797269676874205a484f4e47594920456c656374726f6e6963
20436f2e203230303152545a4d42502b53696d53756e526567756c617252
545a4d42502b53696d53756e52545a4d42502b53696d53756e5665727369
6f6e20352e303452545a4d42502b53696d53756e54726164656d61726b20
6f66205a484f4e47594920456c656374726f6e696320436f2e2c20426569
6a696e6700a900200043006f00700079007200690067006800740020005a
0048004f004e00470059004900200045006c0065006300740072006f006e
0069006300200043006f002e0020003200300030003100520054005a004d
00420050002b00530069006d00530075006e0052006500670075006c0061
007200520054005a004d00420050002b00530069006d00530075006e0052
0054005a004d00420050002b00530069006d00530075006e005600650072
00730069006f006e00200035002e0030003400520054005a004d00420050
002b00530069006d00530075006e00540072006100640065006d00610072
006b0020006f00660020005a0048004f004e00470059004900200045006c
0065006300740072006f006e0069006300200043006f002e002c00200042
00650069006a0069006e00670059006f00750020006d0061007900200075
007300650020007400680069007300200066006f006e007400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
00650020006c006900630065006e007300650020007400650072006d0073
00200066006f00720020007400680065002000700072006f006400750063
007400200069006e00200077006800690063006800200074006800690073
00200066006f006e007400200069007300200069006e0063006c00750064
00650064002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e0074007300a90020
0043006f00700079007200690067006800740020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e00200032003000300031000d000a5b574f536570636e75315317
4eac4e2d66134e2d680775355b504fe1606f6280672f67099650516c53f8
63d04f9b300200520054005a004d00420050002b5b8b4f535e3889c40052
0054005a004d00420050002b5b8b4f5300520054005a004d00420050002b
5b8b4f5300560065007200730069006f006e00200035002e003000340052
0054005a004d00420050002b5b8b4f5300540072006100640065006d0061
0072006b0020006f00660020005a0048004f004e00470059004900200045
006c0065006300740072006f006e0069006300200043006f002e002c0020
004200650069006a0069006e0067004200650069006a0069006e00670020
005a0068006f006e00670059006900200045006c0065006300740072006f
006e00690063007300200043006f002e004200650069006a0069006e0067
0020005a0068006f006e00670059006900200045006c0065006300740072
006f006e00690063007300200043006f002e0068007400740070003a002f
002f007700770077002e007a0068006f006e006700790069006300740073
002e0063006f006d002e0063006e0068007400740070003a002f002f0077
00770077002e007a0068006f006e006700790069006300740073002e0063
006f006d002e0063006e0000411a01110110003200280110010e00280028
010f010e00280028010c010d00460028010d010e00280028010e010d0018
0028010c010db346285001b801ff858d001db0324b5258b0801d59b80106
4568b801062344b801044568b801042344b801054568b801044560b80105
2344b801024568b801044560b801022344b801034568b801024560b80103
2344b801004568b801044560b801002344b801014568b801004560b80101
2344012b2b2b2b2b2b2b000000>
[2797 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 838 5 <0003000cffe800f400ce0004000800440000371533352307153335271707
153337172315333e013717070607333717230607333717071c0117073523
1507363435060727363734271736372322072733352322072733345b564d
09564618090e0e122e0f09201011091a153510145f161444081109010f56
0f01211e02251c010f1712560d0b095f200d0b0941491c21272525a70a08
150e142409251a10041e160f15140f0b0c0828260c06110e06092e20130b
031314070b08111103092403091b>GISAAA+SimSun AddT42Char 

1 0 0 <> GISAAA+SimSun AddT42Char 
GISAAA+SimSun /CharStrings get begin
/g5 5 def
end
GISAAA+SimSun /Encoding get
dup 5 /g5 put
pop
end
%ADOEndSubsetFont
/KEVNZO+SimSun /GISAAA+SimSun findfont ct_VMDictPut
/KEVNZO+SimSun*1 
[5{/.notdef}rp /g5 250{/.notdef}rp]
KEVNZO+SimSun nf
KEVNZO+SimSun*1 [16 0 0 -16 0 0 ]msf
159.588 384.761 mo
(\005)sh
%ADOBeginSubsetFont: HJCBAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HJCBAA+SimSun gcheck setglobal} if
1 3926 23 <0003000affe600f600d0002a0031004f0000371707060733353427170715
33371723153337172315333717232207273335232207273335230607273e
0107060716173637270706073337170706071e0106262706072736372627
36372207273336377d150704042401190a1d0c123b180c1236210d13720d
0b0944110d0b0932250b10030c0c43060f0f100b0b0c0903071f070f080c
0c130902110e191f03210f0f190b090d0b09220802b00a050c0d290d110b
07350c12380c12440d130309440309382015021b3512163b06061c413806
0e1e0a0c06411f080d13130a2713021e200a0a282b03092b1200>HJCBAA+SimSun AddT42Char 
HJCBAA+SimSun /CharStrings get begin
/g23 23 def
end
HJCBAA+SimSun /Encoding get
dup 211 /g23 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNYT+SimSun*1 
[39{/.notdef}rp /g8 171{/.notdef}rp /g23 44{/.notdef}rp]
KEVNYT+SimSun nf
KEVNYT+SimSun*1 [16 0 0 -16 0 0 ]msf
175.588 384.761 mo
(\323)sh
%ADOBeginSubsetFont: BUZAAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /BUZAAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966d9131b0700000e1400000dba68656164e34ba941000003f40000
003668686561020000f40000042c00000024686d74781600017e00000450
0000005c6c6f63612177253f000004ac000000306d61787001d33f570000
04dc000000206e616d650877db7f000004fc000008627072657005dc4fcc
00000d60000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
ccd7332b5f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000017010000000000
00000100000d0100000b01000013010000230100000d0100000c01000024
010000120100000a010000180100000f0100000c01000010010000140100
000b01000018010000090100000b0100001f010000170100001300000000
0000005e00a400e3012d017f01bf0209025902b102fa0349038e03d70429
048a04e9054b059f05f3065506dd000100000017016c0031000000000001
0000002f0029000001613dbb000000000000001e016e0001000000000000
002700000001000000000001000d00270001000000000002000700340001
000000000003000d003b0001000000000004000d00480001000000000005
000c00550001000000000006000d00610001000000000007002c006e0003
000104090000004e009a0003000104090001001a00e80003000104090002
000e01020003000104090003001a01100003000104090004001a012a0003
000104090005001801440003000104090006001a015c0003000104090007
00580176000300010409000d02aa01ce000300010409000e005204780003
000108040000008204ca00030001080400010012054c0003000108040002
0004055e0003000108040003001205620003000108040004001205740003
0001080400050018058600030001080400060012059e0003000108040007
005805b00003000108040008003e06080003000108040009003e06460003
00010804000b00380684000300010804000c003806bca920436f70797269
676874205a484f4e47594920456c656374726f6e696320436f2e20323030
3150475a5857522b53696d53756e526567756c617250475a5857522b5369
6d53756e50475a5857522b53696d53756e56657273696f6e20352e303450
475a5857522b53696d53756e54726164656d61726b206f66205a484f4e47
594920456c656374726f6e696320436f2e2c204265696a696e6700a90020
0043006f00700079007200690067006800740020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e0020003200300030003100500047005a005800570052002b0053
0069006d00530075006e0052006500670075006c0061007200500047005a
005800570052002b00530069006d00530075006e00500047005a00580057
0052002b00530069006d00530075006e00560065007200730069006f006e
00200035002e0030003400500047005a005800570052002b00530069006d
00530075006e00540072006100640065006d00610072006b0020006f0066
0020005a0048004f004e00470059004900200045006c0065006300740072
006f006e0069006300200043006f002e002c0020004200650069006a0069
006e00670059006f00750020006d00610079002000750073006500200074
00680069007300200066006f006e007400200074006f0020006400690073
0070006c0061007900200061006e00640020007000720069006e00740020
0063006f006e00740065006e00740020006100730020007000650072006d
0069007400740065006400200062007900200074006800650020006c0069
00630065006e007300650020007400650072006d007300200066006f0072
0020007400680065002000700072006f006400750063007400200069006e
0020007700680069006300680020007400680069007300200066006f006e
007400200069007300200069006e0063006c0075006400650064002e0020
0059006f00750020006d006100790020006f006e006c0079002000280069
002900200065006d0062006500640020007400680069007300200066006f
006e007400200069006e00200063006f006e00740065006e007400200061
00730020007000650072006d006900740074006500640020006200790020
00740068006500200065006d00620065006400640069006e006700200072
00650073007400720069006300740069006f006e007300200069006e0063
006c007500640065006400200069006e0020007400680069007300200066
006f006e0074003b00200061006e00640020002800690069002900200074
0065006d0070006f0072006100720069006c007900200064006f0077006e
006c006f006100640020007400680069007300200066006f006e00740020
0074006f002000610020007000720069006e0074006500720020006f0072
0020006f00740068006500720020006f0075007400700075007400200064
0065007600690063006500200074006f002000680065006c007000200070
00720069006e007400200063006f006e00740065006e0074002e00680074
00740070003a002f002f007700770077002e006d006900630072006f0073
006f00660074002e0063006f006d002f007400790070006f006700720061
007000680079002f0066006f006e0074007300a900200043006f00700079
007200690067006800740020005a0048004f004e00470059004900200045
006c0065006300740072006f006e0069006300200043006f002e00200032
003000300031000d000a5b574f536570636e753153174eac4e2d66134e2d
680775355b504fe1606f6280672f67099650516c53f863d04f9b30020050
0047005a005800570052002b5b8b4f535e3889c400500047005a00580057
0052002b5b8b4f5300500047005a005800570052002b5b8b4f5300560065
007200730069006f006e00200035002e0030003400500047005a00580057
0052002b5b8b4f5300540072006100640065006d00610072006b0020006f
00660020005a0048004f004e00470059004900200045006c006500630074
0072006f006e0069006300200043006f002e002c0020004200650069006a
0069006e0067004200650069006a0069006e00670020005a0068006f006e
00670059006900200045006c0065006300740072006f006e006900630073
00200043006f002e004200650069006a0069006e00670020005a0068006f
006e00670059006900200045006c0065006300740072006f006e00690063
007300200043006f002e0068007400740070003a002f002f007700770077
002e007a0068006f006e006700790069006300740073002e0063006f006d
002e0063006e0068007400740070003a002f002f007700770077002e007a
0068006f006e006700790069006300740073002e0063006f006d002e0063
006e0000411a01110110003200280110010e00280028010f010e00280028
010c010d00460028010d010e00280028010e010d00180028010c010db346
285001b801ff858d001db0324b5258b0801d59b801064568b801062344b8
01044568b801042344b801054568b801044560b801052344b801024568b8
01044560b801022344b801034568b801024560b801032344b801004568b8
01044560b801002344b801014568b801004560b801012344012b2b2b2b2b
2b2b000000>
[3515 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 602 6 <0003000dffeb00df00d1002a003000340000370e01073337170715141707
35231507363d01060727363735173e0137230607273e0137170706073337
17071e0106262717153335cd17311759081008010f640f012326012b1f0b
17321157202403172b0a160b08055409138821040b09141864a0212b0f0a
0d06260f11080f0c06230b1f13090310160a04102f1a2b1503113a1f1004
0c070b0f190e110f17144b3c3c00>BUZAAA+SimSun AddT42Char 

1 0 0 <> BUZAAA+SimSun AddT42Char 
BUZAAA+SimSun /CharStrings get begin
/g6 6 def
end
BUZAAA+SimSun /Encoding get
dup 13 /g6 put
pop
end
%ADOEndSubsetFont
/KEVNZP+SimSun /BUZAAA+SimSun findfont ct_VMDictPut
/KEVNZP+SimSun*1 
[13{/.notdef}rp /g6 242{/.notdef}rp]
KEVNZP+SimSun nf
KEVNZP+SimSun*1 [16 0 0 -16 0 0 ]msf
191.588 384.761 mo
(\015)sh
211.348 388.424 mo
307.878 388.424 li
@
307.398 388.424 mo
323.878 388.424 li
@
%ADOBeginSubsetFont: LLIAAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+SimSun gcheck setglobal} if
1 5320 27 <00050016ffe900f100d10017001d00210025003500003734271707153337
172315140726273516363d0123220727171e0106262f0115333507153335
17141707352315073634271733371707b401190a0f0d132f1601201b0e34
0d0b09141a0c1009104b2929290e010f290f0101102608100890271a0d07
2d0d138613080f070504020b7d03091f1213172415383c3c42404014300e
08141508208013080a0d0700>LLIAAA+SimSun AddT42Char 
LLIAAA+SimSun /CharStrings get begin
/g27 27 def
end
LLIAAA+SimSun /Encoding get
dup 246 /g27 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNYZ+SimSun*1 
[135{/.notdef}rp /g13 110{/.notdef}rp /g27 9{/.notdef}rp]
KEVNYZ+SimSun nf
KEVNYZ+SimSun*1 [16 0 0 -16 0 0 ]msf
307.638 384.761 mo
(\366)sh
323.398 388.424 mo
323.878 388.424 li
@
323.398 388.424 mo
339.878 388.424 li
@
%ADOBeginSubsetFont: HIBBAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+SimSun gcheck setglobal} if
1 3410 19 <000a0014ffe700ec00d2000e0014001b001f002e00320036003a003e004d
00003f012314062636373315333717060727371e01062607333717232207
171533350736342717333717071417073523153515333533153335071533
3533153335273634271733371707141707352315ca09a4110a120504a20a
110e11600216090e0642700c126e0e0915547601010f78080f08010f7935
0d3779350d377401010e52080f08010e5490181408090f150b0a11011841
03080f11172f0c12031619198c182f1808090d063213050c094b1b1b1b1b
211b1b1b1b310f1c0d07080b06130c040707>HIBBAA+SimSun AddT42Char 
HIBBAA+SimSun /CharStrings get begin
/g19 19 def
end
HIBBAA+SimSun /Encoding get
dup 204 /g19 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNYQ+SimSun*1 
[80{/.notdef}rp /g2 21{/.notdef}rp /g5 101{/.notdef}rp /g19 51{/.notdef}rp]
KEVNYQ+SimSun nf
KEVNYQ+SimSun*1 [16 0 0 -16 0 0 ]msf
323.638 384.761 mo
(\314)sh
339.398 388.424 mo
339.878 388.424 li
@
339.398 388.424 mo
355.878 388.424 li
@
%ADOBeginSubsetFont: IRRAAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IRRAAA+SimSun gcheck setglobal} if
1 3350 23 <0002000effe500f000cb002f004000003736371707060733371723060733
342717071533371723153337172314170736352322072733352307273736
3723072737273723140e0126363733153337170e015b0b06140907064d0b
106a121139011608280c1145460d1265010f014f0d0b09703a080b090f0f
1c0c089f030da3070c08130404a109130c0b8d14140d040b0b0b111e181d
0e0a08190c12240d132d09071a23030924070d05151b02081402170e0c02
0811140b0b130207>IRRAAA+SimSun AddT42Char 
IRRAAA+SimSun /CharStrings get begin
/g23 23 def
end
IRRAAA+SimSun /Encoding get
dup 155 /g23 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNZG+SimSun*1 
[155{/.notdef}rp /g23 53{/.notdef}rp /g30 46{/.notdef}rp]
KEVNZG+SimSun nf
KEVNZG+SimSun*1 [16 0 0 -16 0 0 ]msf
339.638 384.761 mo
(\233)sh
355.398 388.424 mo
451.928 388.424 li
@
%ADOBeginSubsetFont: WRBBAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /WRBBAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966cd60416200000e080000139c68656164e34ba941000003f40000
003668686561020000f20000042c00000024686d7478140000c500000450
000000546c6f63612e383362000004a40000002c6d61787001d13f570000
04d0000000206e616d650e6edd68000004f0000008627072657005dc4fcc
00000d54000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
b4a2ddf55f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000015010000000000
00000100000d0100000b0100000d0100000c010000090100000a0100000c
0100000901000008010000090100000c0100000a01000009010000090100
00090100000a0100000c0100000b01000009000000000000007b00e90165
01f1028403010388040504a0054405b9062606b1075107d1084c08cd0951
09ce000100000015016c00310000000000010000002f0029000001613dbb
000000000000001e016e0001000000000000002700000001000000000001
000d00270001000000000002000700340001000000000003000d003b0001
000000000004000d00480001000000000005000c00550001000000000006
000d00610001000000000007002c006e0003000104090000004e009a0003
000104090001001a00e80003000104090002000e01020003000104090003
001a01100003000104090004001a012a0003000104090005001801440003
000104090006001a015c000300010409000700580176000300010409000d
02aa01ce000300010409000e005204780003000108040000008204ca0003
0001080400010012054c00030001080400020004055e0003000108040003
001205620003000108040004001205740003000108040005001805860003
0001080400060012059e0003000108040007005805b00003000108040008
003e06080003000108040009003e0646000300010804000b003806840003
00010804000c003806bca920436f70797269676874205a484f4e47594920
456c656374726f6e696320436f2e20323030314b4d5a5955502b53696d53
756e526567756c61724b4d5a5955502b53696d53756e4b4d5a5955502b53
696d53756e56657273696f6e20352e30344b4d5a5955502b53696d53756e
54726164656d61726b206f66205a484f4e47594920456c656374726f6e69
6320436f2e2c204265696a696e6700a900200043006f0070007900720069
0067006800740020005a0048004f004e00470059004900200045006c0065
006300740072006f006e0069006300200043006f002e0020003200300030
0031004b004d005a005900550050002b00530069006d00530075006e0052
006500670075006c00610072004b004d005a005900550050002b00530069
006d00530075006e004b004d005a005900550050002b00530069006d0053
0075006e00560065007200730069006f006e00200035002e00300034004b
004d005a005900550050002b00530069006d00530075006e005400720061
00640065006d00610072006b0020006f00660020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e002c0020004200650069006a0069006e00670059006f00750020
006d0061007900200075007300650020007400680069007300200066006f
006e007400200074006f00200064006900730070006c0061007900200061
006e00640020007000720069006e007400200063006f006e00740065006e
00740020006100730020007000650072006d006900740074006500640020
0062007900200074006800650020006c006900630065006e007300650020
007400650072006d007300200066006f0072002000740068006500200070
0072006f006400750063007400200069006e002000770068006900630068
0020007400680069007300200066006f006e007400200069007300200069
006e0063006c0075006400650064002e00200059006f00750020006d0061
00790020006f006e006c0079002000280069002900200065006d00620065
00640020007400680069007300200066006f006e007400200069006e0020
0063006f006e00740065006e00740020006100730020007000650072006d
00690074007400650064002000620079002000740068006500200065006d
00620065006400640069006e006700200072006500730074007200690063
00740069006f006e007300200069006e0063006c00750064006500640020
0069006e0020007400680069007300200066006f006e0074003b00200061
006e006400200028006900690029002000740065006d0070006f00720061
00720069006c007900200064006f0077006e006c006f0061006400200074
00680069007300200066006f006e007400200074006f0020006100200070
00720069006e0074006500720020006f00720020006f0074006800650072
0020006f0075007400700075007400200064006500760069006300650020
0074006f002000680065006c00700020007000720069006e007400200063
006f006e00740065006e0074002e0068007400740070003a002f002f0077
00770077002e006d006900630072006f0073006f00660074002e0063006f
006d002f007400790070006f006700720061007000680079002f0066006f
006e0074007300a900200043006f00700079007200690067006800740020
005a0048004f004e00470059004900200045006c0065006300740072006f
006e0069006300200043006f002e00200032003000300031000d000a5b57
4f536570636e753153174eac4e2d66134e2d680775355b504fe1606f6280
672f67099650516c53f863d04f9b3002004b004d005a005900550050002b
5b8b4f535e3889c4004b004d005a005900550050002b5b8b4f53004b004d
005a005900550050002b5b8b4f5300560065007200730069006f006e0020
0035002e00300034004b004d005a005900550050002b5b8b4f5300540072
006100640065006d00610072006b0020006f00660020005a0048004f004e
00470059004900200045006c0065006300740072006f006e006900630020
0043006f002e002c0020004200650069006a0069006e0067004200650069
006a0069006e00670020005a0068006f006e00670059006900200045006c
0065006300740072006f006e00690063007300200043006f002e00420065
0069006a0069006e00670020005a0068006f006e00670059006900200045
006c0065006300740072006f006e00690063007300200043006f002e0068
007400740070003a002f002f007700770077002e007a0068006f006e0067
00790069006300740073002e0063006f006d002e0063006e006800740074
0070003a002f002f007700770077002e007a0068006f006e006700790069
006300740073002e0063006f006d002e0063006e0000411a011101100032
00280110010e00280028010f010e00280028010c010d00460028010d010e
00280028010e010d00180028010c010db346285001b801ff858d001db032
4b5258b0801d59b801064568b801062344b801044568b801042344b80105
4568b801044560b801052344b801024568b801044560b801022344b80103
4568b801024560b801032344b801004568b801044560b801002344b80101
4568b801004560b801012344012b2b2b2b2b2b2b000000>
[5021 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 466 4 <0005000dffe800ef00d1001b002b002f0033005600003734271707153e01
3717220607151437333e0137331e0117062b010617151417073523150736
342717333717071533350715333527342717071533371723153717071514
0734273516363d01060f01273637352322072778011809132c090f082926
0f3b0804020401030906114d1464010f450f01010f4307115b4545459301
18090d0c122b220224151d160e0e0f030d0c210b0d0b0980430c0b082407
190a13100c110d010110191013030f012041081006130e071b4216090a0c
0422222821217128130c07280c122e1203195512090c090403010d44090b
0612041034030900>WRBBAA+SimSun AddT42Char 

1 0 0 <> WRBBAA+SimSun AddT42Char 
WRBBAA+SimSun /CharStrings get begin
/g4 4 def
end
WRBBAA+SimSun /Encoding get
dup 7 /g4 put
pop
end
%ADOEndSubsetFont
/KEVNZQ+SimSun /WRBBAA+SimSun findfont ct_VMDictPut
/KEVNZQ+SimSun*1 
[7{/.notdef}rp /g4 248{/.notdef}rp]
KEVNZQ+SimSun nf
KEVNZQ+SimSun*1 [16 0 0 -16 0 0 ]msf
143.588 418.959 mo
(\007)sh
%ADOBeginSubsetFont: HIBBAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+SimSun gcheck setglobal} if
1 4304 23 <00040011ffe900ef00ce001b001f0037003d000037223534271733371707
141707352315143b0132363733141617062327153335071e013735232207
2733342717071533371723151407262f01371e0106264d1501106b0a0e08
010f6e0f710905010505070616846e431c12016e0d0b098f0118091b1016
411803222c031e010e0864134412090a0e051d0f060b170e101b1115020e
5a2424b9030109330309140b0b070d101639110a0e09370315140d20>HIBBAA+SimSun AddT42Char 
HIBBAA+SimSun /CharStrings get begin
/g23 23 def
end
HIBBAA+SimSun /Encoding get
dup 252 /g23 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNYQ+SimSun*1 
[80{/.notdef}rp /g2 21{/.notdef}rp /g5 101{/.notdef}rp /g19 47{/.notdef}rp /g23 
3{/.notdef}rp]
KEVNYQ+SimSun nf
KEVNYQ+SimSun*1 [16 0 0 -16 0 0 ]msf
159.588 418.959 mo
(\374)sh
%ADOBeginSubsetFont: LLIAAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LLIAAA+SimSun gcheck setglobal} if
1 1368 9 <0003000dffe600f600d2004a0050006d0000373427170715333717231533
3e0137170706073337172306073337170607170715371707151407262735
16363d010607273237342717372306072736372307273336372307273335
230727170716173637270706073337172306071617152207262706072736
37262706072736374501160808090f200d0c110312090e0d0c0b112b0c0a
18090f13180a0833013414011818082d030a0b2f0108161c192503191a13
0908290a0b3d0908381809088c05090d11040c0908072d0c12190715191d
0f0418132130022e1f10020a10031b0da717130b0718090f1c111d080f03
14100b110d0b091003160706090a040e2c11060c0704040206250c061209
0d1205181713030e1902080a0e02081c02081a0c371a25383a061b130c12
46232407040a111e2310031328282f1915023250>LLIAAA+SimSun AddT42Char 
LLIAAA+SimSun /CharStrings get begin
/g9 9 def
end
LLIAAA+SimSun /Encoding get
dup 89 /g9 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNYZ+SimSun*1 
[89{/.notdef}rp /g9 45{/.notdef}rp /g13 110{/.notdef}rp /g27 9{/.notdef}rp]
KEVNYZ+SimSun nf
KEVNYZ+SimSun*1 [16 0 0 -16 0 0 ]msf
175.588 418.959 mo
(Y)sh
%ADOBeginSubsetFont: KEDBAA+SimSun Initial
ct_T42Dict begin
-0.008 -0.145 1 0.859
 256 array 0 1 255 {1 index exch /.notdef put} for  /KEDBAA+SimSun
Type42DictBegin
[<00010000000c000c000c000c4f532f324fd9e4e2000000cc000000566376
7420072903f000000124000002be6670676d4aa192e8000003e40000000d
676c7966d2d7adf400000e1c000010b268656164e34ba941000003f40000
003668686561020000f50000042c00000024686d74781700010900000450
000000606c6f636131b92d79000004b0000000326d61787001d43f570000
04e4000000206e616d65f2dcc5ac00000504000008627072657005dc4fcc
00000d68000000b267646972000000000000000000000000000100800190
0005000800800080000000100080008000000080000c0041000002010600
030101010101000000031000000000000000000000005a59454300400000
f0ff00dcffdc002400dc002480000000000000000000ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00ab00020070
00020004fffeffdfffff00060008000a000c000e00100012001400160018
001a001c001e000e0010ffff00060008000a000c000e0010001200140016
0018001a001a001cffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff001e001e00c90000001c001c0002ffea0055
0033003800c1000a00400037003d0032003c00dcffdd0057004d000b001f
000b001f00920037007a0070006c006f00200020001a0016000600080006
0008000f0000b0282c4b525845441b2121592d0000000001000000050a3d
854a6dd75f0f3cf5000b010000000000b798428000000000cb921dccfffe
ffdb010000dc0000000c00020000000000000001000000dcffdc00240100
fffe00000100000100000000000000000000000000000018010000000000
0000010000110100000a0100000e0100000a0100000e0100000b0100000f
010000100100000b0100001401000009010000090100000b010000100100
000b0100000a010000090100000b0100000a01000009010000090100000d
0000000000000044009300e8015501cd024002c7034603d50457047e04bc
0500054705a205c60626068a06dc074807c208590000000100000018016c
00310000000000010000002f0029000001613dbb000000000000001e016e
0001000000000000002700000001000000000001000d0027000100000000
0002000700340001000000000003000d003b0001000000000004000d0048
0001000000000005000c00550001000000000006000d0061000100000000
0007002c006e0003000104090000004e009a0003000104090001001a00e8
0003000104090002000e01020003000104090003001a0110000300010409
0004001a012a0003000104090005001801440003000104090006001a015c
000300010409000700580176000300010409000d02aa01ce000300010409
000e005204780003000108040000008204ca00030001080400010012054c
00030001080400020004055e000300010804000300120562000300010804
00040012057400030001080400050018058600030001080400060012059e
0003000108040007005805b00003000108040008003e0608000300010804
0009003e0646000300010804000b00380684000300010804000c003806bc
a920436f70797269676874205a484f4e47594920456c656374726f6e6963
20436f2e20323030314d444a574c522b53696d53756e526567756c61724d
444a574c522b53696d53756e4d444a574c522b53696d53756e5665727369
6f6e20352e30344d444a574c522b53696d53756e54726164656d61726b20
6f66205a484f4e47594920456c656374726f6e696320436f2e2c20426569
6a696e6700a900200043006f00700079007200690067006800740020005a
0048004f004e00470059004900200045006c0065006300740072006f006e
0069006300200043006f002e00200032003000300031004d0044004a0057
004c0052002b00530069006d00530075006e0052006500670075006c0061
0072004d0044004a0057004c0052002b00530069006d00530075006e004d
0044004a0057004c0052002b00530069006d00530075006e005600650072
00730069006f006e00200035002e00300034004d0044004a0057004c0052
002b00530069006d00530075006e00540072006100640065006d00610072
006b0020006f00660020005a0048004f004e00470059004900200045006c
0065006300740072006f006e0069006300200043006f002e002c00200042
00650069006a0069006e00670059006f00750020006d0061007900200075
007300650020007400680069007300200066006f006e007400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
00650020006c006900630065006e007300650020007400650072006d0073
00200066006f00720020007400680065002000700072006f006400750063
007400200069006e00200077006800690063006800200074006800690073
00200066006f006e007400200069007300200069006e0063006c00750064
00650064002e00200059006f00750020006d006100790020006f006e006c
0079002000280069002900200065006d0062006500640020007400680069
007300200066006f006e007400200069006e00200063006f006e00740065
006e00740020006100730020007000650072006d00690074007400650064
002000620079002000740068006500200065006d00620065006400640069
006e00670020007200650073007400720069006300740069006f006e0073
00200069006e0063006c007500640065006400200069006e002000740068
0069007300200066006f006e0074003b00200061006e0064002000280069
00690029002000740065006d0070006f0072006100720069006c00790020
0064006f0077006e006c006f006100640020007400680069007300200066
006f006e007400200074006f002000610020007000720069006e00740065
00720020006f00720020006f00740068006500720020006f007500740070
00750074002000640065007600690063006500200074006f002000680065
006c00700020007000720069006e007400200063006f006e00740065006e
0074002e0068007400740070003a002f002f007700770077002e006d0069
00630072006f0073006f00660074002e0063006f006d002f007400790070
006f006700720061007000680079002f0066006f006e0074007300a90020
0043006f00700079007200690067006800740020005a0048004f004e0047
0059004900200045006c0065006300740072006f006e0069006300200043
006f002e00200032003000300031000d000a5b574f536570636e75315317
4eac4e2d66134e2d680775355b504fe1606f6280672f67099650516c53f8
63d04f9b3002004d0044004a0057004c0052002b5b8b4f535e3889c4004d
0044004a0057004c0052002b5b8b4f53004d0044004a0057004c0052002b
5b8b4f5300560065007200730069006f006e00200035002e00300034004d
0044004a0057004c0052002b5b8b4f5300540072006100640065006d0061
0072006b0020006f00660020005a0048004f004e00470059004900200045
006c0065006300740072006f006e0069006300200043006f002e002c0020
004200650069006a0069006e0067004200650069006a0069006e00670020
005a0068006f006e00670059006900200045006c0065006300740072006f
006e00690063007300200043006f002e004200650069006a0069006e0067
0020005a0068006f006e00670059006900200045006c0065006300740072
006f006e00690063007300200043006f002e0068007400740070003a002f
002f007700770077002e007a0068006f006e006700790069006300740073
002e0063006f006d002e0063006e0068007400740070003a002f002f0077
00770077002e007a0068006f006e006700790069006300740073002e0063
006f006d002e0063006e0000411a01110110003200280110010e00280028
010f010e00280028010c010d00460028010d010e00280028010e010d0018
0028010c010db346285001b801ff858d001db0324b5258b0801d59b80106
4568b801062344b801044568b801042344b801054568b801044560b80105
2344b801024568b801044560b801022344b801034568b801024560b80103
2344b801004568b801044560b801002344b801014568b801004560b80101
2344012b2b2b2b2b2b2b000000>
[4275 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 294 4 <0003000effe600f300d0000600110039000037363427170715073e012627
1707140e01073715141707363d0123150736342717333523220727333717
231533371707151607262735163227351c010116081c2015010117080319
249c010f01290e01010e29200d0b09750d13472907100801140115100d01
2d0c62130b05684c21426d160b074041391d9f7c100e0618147468091259
15092b03090d132b090c065714070c0704020b55>KEDBAA+SimSun AddT42Char 

1 0 0 <> KEDBAA+SimSun AddT42Char 
KEDBAA+SimSun /CharStrings get begin
/g4 4 def
end
KEDBAA+SimSun /Encoding get
dup 8 /g4 put
pop
end
%ADOEndSubsetFont
/KEVNZR+SimSun /KEDBAA+SimSun findfont ct_VMDictPut
/KEVNZR+SimSun*1 
[8{/.notdef}rp /g4 247{/.notdef}rp]
KEVNZR+SimSun nf
KEVNZR+SimSun*1 [16 0 0 -16 0 0 ]msf
191.588 418.959 mo
(\010)sh
211.348 422.622 mo
302.102 422.622 li
@
301.622 422.622 mo
318.102 422.622 li
@
%ADOBeginSubsetFont: VXVBAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VXVBAA+SimSun gcheck setglobal} if
1 5316 30 <0003000affe700f300d1000300070042000037153335071533350f013635
060727363723220727333523150736352322072733342717071533342717
071533371723141707352315333717231617150607262723145b4949491d
1001264701411c3a0d0b096c1d0f01190d0b093a011708490117081a0e14
3c010f1e4a0e15651e4711043f1603a71c1c221e1e980623353c17041f32
03091a0506232e0309121109071312120907140e143a0f06091a0e14330c
04010d1d3440>VXVBAA+SimSun AddT42Char 
VXVBAA+SimSun /CharStrings get begin
/g30 30 def
end
VXVBAA+SimSun /Encoding get
dup 208 /g30 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNZJ+SimSun*1 
[127{/.notdef}rp /g22 80{/.notdef}rp /g30 47{/.notdef}rp]
KEVNZJ+SimSun nf
KEVNZJ+SimSun*1 [16 0 0 -16 0 0 ]msf
301.862 418.959 mo
(\320)sh
317.622 422.622 mo
318.102 422.622 li
@
317.622 422.622 mo
334.102 422.622 li
@
%ADOBeginSubsetFont: GISAAA+SimSun AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GISAAA+SimSun gcheck setglobal} if
1 434 3 <0002000effeb00f400d2003f004400003734271707153337173637170706
073337172306071536371707060715063b013e013733141617062723223d
010607273637351736372322072733352322072717153336376f011a0a1e
0d0d0a06160a14172b0f13511a243c170f09342501124a0a030105050b09
1a5317192e0124240e1616610d0b0961230d0b095317100ea2220e0a081d
0c0d111012041b1c0e141a181f1d181302180e100f011c13141702120215
34120c040d1b0f08101503092603090527131400>GISAAA+SimSun AddT42Char 
GISAAA+SimSun /CharStrings get begin
/g3 3 def
end
GISAAA+SimSun /Encoding get
dup 1 /g3 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/KEVNZO+SimSun*1 
[/.notdef /g3 3{/.notdef}rp /g5 250{/.notdef}rp]
KEVNZO+SimSun nf
KEVNZO+SimSun*1 [16 0 0 -16 0 0 ]msf
317.862 418.959 mo
(\001)sh
333.622 422.622 mo
334.102 422.622 li
@
333.622 422.622 mo
361.654 422.622 li
@
KEVNZR+SimSun*1 [16 0 0 -16 0 0 ]msf
333.862 418.959 mo
(\010)sh
KEVNYU+NimbusRomNo9L-Regu*1 [16 0 0 -16 0 0 ]msf
349.862 418.959 mo
(A)sh
361.174 422.622 mo
451.928 422.622 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/KEVNZR+SimSun*1 uf
/KEVNZR+SimSun uf
/KEDBAA+SimSun uf
/KEVNZQ+SimSun*1 uf
/KEVNZQ+SimSun uf
/WRBBAA+SimSun uf
/KEVNZP+SimSun*1 uf
/KEVNZP+SimSun uf
/BUZAAA+SimSun uf
/KEVNZO+SimSun*1 uf
/KEVNZO+SimSun uf
/GISAAA+SimSun uf
/KEVNZN+SimSun*1 uf
/KEVNZN+SimSun uf
/GLAAAA+SimSun uf
/KEVNZM+SimSun*1 uf
/KEVNZM+SimSun uf
/XFAAAA+SimSun uf
/KEVNZL+SimSun*1 uf
/KEVNZL+SimSun uf
/CUFAAA+SimSun uf
/KEVNZK+SimSun*1 uf
/KEVNZK+SimSun uf
/SPVAAA+SimSun uf
/KEVNZD+SimSun*1 uf
/KEVNZD+SimSun uf
/DTOAAA+SimSun uf
/KEVNZC+SimSun*1 uf
/KEVNZC+SimSun uf
/FXYAAA+SimSun uf
/KEVNZJ+SimSun*1 uf
/KEVNZJ+SimSun uf
/VXVBAA+SimSun uf
/KEVNZI+SimSun*1 uf
/KEVNZI+SimSun uf
/CBIAAA+SimSun uf
/KEVNZH+SimSun*1 uf
/KEVNZH+SimSun uf
/RDHAAA+SimSun uf
/KEVNZG+SimSun*1 uf
/KEVNZG+SimSun uf
/IRRAAA+SimSun uf
/KEVNZF+SimSun*1 uf
/KEVNZF+SimSun uf
/FLEAAA+SimSun uf
/KEVNZE+SimSun*1 uf
/KEVNZE+SimSun uf
/XSAAAA+SimSun uf
/KEVNZB+SimSun*1 uf
/KEVNZB+SimSun uf
/LLIBAA+SimSun uf
/KEVNZA+NimbusRomNo9L-Medi*1 uf
/KEVNZA+NimbusRomNo9L-Medi uf
/NQPBAA+NimbusRomNo9L-Medi uf
/KEVNYW+SimSun*1 uf
/KEVNYW+SimSun uf
/ELRBAA+SimSun uf
/KEVNYZ+SimSun*1 uf
/KEVNYZ+SimSun uf
/LLIAAA+SimSun uf
/KEVNYY+SimSun*1 uf
/KEVNYY+SimSun uf
/YEKBAA+SimSun uf
/KEVNYX+SimSun*1 uf
/KEVNYX+SimSun uf
/AXNBAA+SimSun uf
/KEVNYV+SimSun*1 uf
/KEVNYV+SimSun uf
/MZQAAA+SimSun uf
/KEVNYU+NimbusRomNo9L-Regu*1 uf
/KEVNYU+NimbusRomNo9L-Regu uf
/UGXAAA+NimbusRomNo9L-Regu uf
/KEVNYT+SimSun*1 uf
/KEVNYT+SimSun uf
/HJCBAA+SimSun uf
/KEVNYS+SimSun*1 uf
/KEVNYS+SimSun uf
/GFNBAA+SimSun uf
/KEVNYR+SimSun*1 uf
/KEVNYR+SimSun uf
/QJJAAA+SimSun uf
/KEVNYQ+SimSun*1 uf
/KEVNYQ+SimSun uf
/HIBBAA+SimSun uf
/KEVNYP+SimSun*1 uf
/KEVNYP+SimSun uf
/PBAAAA+SimSun uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
